{
  "id": "fc51f9154c94685b40877db426a21a02",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.5",
  "solcLongVersion": "0.7.5+commit.eb77ed08",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/Treasury.sol": {
        "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\nlibrary Address {\n\n  function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            if (returndata.length > 0) {\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            if (returndata.length > 0) {\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ninterface IOwnable {\n  function manager() external view returns (address);\n\n  function renounceManagement() external;\n  \n  function pushManagement( address newOwner_ ) external;\n  \n  function pullManagement() external;\n}\n\ncontract Ownable is IOwnable {\n\n    address internal _owner;\n    address internal _newOwner;\n\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        _owner = msg.sender;\n        emit OwnershipPushed( address(0), _owner );\n    }\n\n    function manager() public view override returns (address) {\n        return _owner;\n    }\n\n    modifier onlyManager() {\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\n        _;\n    }\n\n    function renounceManagement() public virtual override onlyManager() {\n        emit OwnershipPushed( _owner, address(0) );\n        _owner = address(0);\n    }\n\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipPushed( _owner, newOwner_ );\n        _newOwner = newOwner_;\n    }\n    \n    function pullManagement() public virtual override {\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\n        emit OwnershipPulled( _owner, _newOwner );\n        _owner = _newOwner;\n    }\n}\n\ninterface IERC20 {\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IERC20Mintable {\n  function mint( uint256 amount_ ) external;\n\n  function mint( address account_, uint256 ammount_ ) external;\n}\n\ninterface IOHMERC20 {\n    function burnFrom(address account_, uint256 amount_) external;\n}\n\ninterface IBondCalculator {\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\n}\n\ncontract ApeTreasury is Ownable {\n\n    using SafeMath for uint;\n    using SafeERC20 for IERC20;\n\n    event Deposit( address indexed token, uint amount, uint value );\n    event Withdrawal( address indexed token, uint amount, uint value );\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\n    event ReservesManaged( address indexed token, uint amount );\n    event ReservesUpdated( uint indexed totalReserves );\n    event ReservesAudited( uint indexed totalReserves );\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\n    event ChangeQueued( MANAGING indexed managing, address queued );\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\n\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SOHM }\n\n    address public immutable OHM;\n    uint public immutable blocksNeededForQueue;\n\n    address[] public reserveTokens; // Push only, beware false-positives.\n    mapping( address => bool ) public isReserveToken;\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\n\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\n    mapping( address => bool ) public isReserveDepositor;\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\n\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\n    mapping( address => bool ) public isReserveSpender;\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\n\n    address[] public liquidityTokens; // Push only, beware false-positives.\n    mapping( address => bool ) public isLiquidityToken;\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\n\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\n    mapping( address => bool ) public isLiquidityDepositor;\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\n\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\n\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\n    mapping( address => bool ) public isReserveManager;\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\n\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\n    mapping( address => bool ) public isLiquidityManager;\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\n\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\n    mapping( address => bool ) public isDebtor;\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\n    mapping( address => uint ) public debtorBalance;\n\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\n    mapping( address => bool ) public isRewardManager;\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\n\n    address public sOHM;\n    uint public sOHMQueue; // Delays change to sOHM address\n    \n    uint public totalReserves; // Risk-free value of all assets\n    uint public totalDebt;\n\n    constructor (\n        address _OHM,\n        address _DAI,\n        address _Frax,\n        address _OHMDAI,\n        uint _blocksNeededForQueue\n    ) {\n        require( _OHM != address(0) );\n        OHM = _OHM;\n\n        isReserveToken[ _DAI ] = true;\n        reserveTokens.push( _DAI );\n\n        isReserveToken[ _Frax] = true;\n        reserveTokens.push( _Frax );\n\n       isLiquidityToken[ _OHMDAI ] = true;\n       liquidityTokens.push( _OHMDAI );\n\n        blocksNeededForQueue = _blocksNeededForQueue;\n    }\n\n    /**\n        @notice allow approved address to deposit an asset for OHM\n        @param _amount uint\n        @param _token address\n        @param _profit uint\n        @return send_ uint\n     */\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \"Not accepted\" );\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\n\n        if ( isReserveToken[ _token ] ) {\n            require( isReserveDepositor[ msg.sender ], \"Not approved\" );\n        } else {\n            require( isLiquidityDepositor[ msg.sender ], \"Not approved\" );\n        }\n\n        uint value = valueOf(_token, _amount);\n        // mint OHM needed and store amount of rewards for distribution\n        send_ = value.sub( _profit );\n        IERC20Mintable( OHM ).mint( msg.sender, send_ );\n\n        totalReserves = totalReserves.add( value );\n        emit ReservesUpdated( totalReserves );\n\n        emit Deposit( _token, _amount, value );\n    }\n\n    /**\n        @notice allow approved address to burn OHM for reserves\n        @param _amount uint\n        @param _token address\n     */\n    function withdraw( uint _amount, address _token ) external {\n        require( isReserveToken[ _token ], \"Not accepted\" ); // Only reserves can be used for redemptions\n        require( isReserveSpender[ msg.sender ] == true, \"Not approved\" );\n\n        uint value = valueOf( _token, _amount );\n        IOHMERC20( OHM ).burnFrom( msg.sender, value );\n\n        totalReserves = totalReserves.sub( value );\n        emit ReservesUpdated( totalReserves );\n\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\n\n        emit Withdrawal( _token, _amount, value );\n    }\n\n    /**\n        @notice allow approved address to borrow reserves\n        @param _amount uint\n        @param _token address\n     */\n    function incurDebt( uint _amount, address _token ) external {\n        require( isDebtor[ msg.sender ], \"Not approved\" );\n        require( isReserveToken[ _token ], \"Not accepted\" );\n\n        uint value = valueOf( _token, _amount );\n\n        uint maximumDebt = IERC20( sOHM ).balanceOf( msg.sender ); // Can only borrow against sOHM held\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\n        require( value <= availableDebt, \"Exceeds debt limit\" );\n\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\n        totalDebt = totalDebt.add( value );\n\n        totalReserves = totalReserves.sub( value );\n        emit ReservesUpdated( totalReserves );\n\n        IERC20( _token ).transfer( msg.sender, _amount );\n        \n        emit CreateDebt( msg.sender, _token, _amount, value );\n    }\n\n    /**\n        @notice allow approved address to repay borrowed reserves with reserves\n        @param _amount uint\n        @param _token address\n     */\n    function repayDebtWithReserve( uint _amount, address _token ) external {\n        require( isDebtor[ msg.sender ], \"Not approved\" );\n        require( isReserveToken[ _token ], \"Not accepted\" );\n\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\n\n        uint value = valueOf( _token, _amount );\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\n        totalDebt = totalDebt.sub( value );\n\n        totalReserves = totalReserves.add( value );\n        emit ReservesUpdated( totalReserves );\n\n        emit RepayDebt( msg.sender, _token, _amount, value );\n    }\n\n    /**\n        @notice allow approved address to repay borrowed reserves with OHM\n        @param _amount uint\n     */\n    function repayDebtWithOHM( uint _amount ) external {\n        require( isDebtor[ msg.sender ], \"Not approved\" );\n\n        IOHMERC20( OHM ).burnFrom( msg.sender, _amount );\n\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\n        totalDebt = totalDebt.sub( _amount );\n\n        emit RepayDebt( msg.sender, OHM, _amount, _amount );\n    }\n\n    /**\n        @notice allow approved address to withdraw assets\n        @param _token address\n        @param _amount uint\n     */\n    function manage( address _token, uint _amount ) external {\n        if( isLiquidityToken[ _token ] ) {\n            require( isLiquidityManager[ msg.sender ], \"Not approved\" );\n        } else {\n            require( isReserveManager[ msg.sender ], \"Not approved\" );\n        }\n\n        uint value = valueOf(_token, _amount);\n        require( value <= excessReserves(), \"Insufficient reserves\" );\n\n        totalReserves = totalReserves.sub( value );\n        emit ReservesUpdated( totalReserves );\n\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\n\n        emit ReservesManaged( _token, _amount );\n    }\n\n    /**\n        @notice send epoch reward to staking contract\n     */\n    function mintRewards( address _recipient, uint _amount ) external {\n        require( isRewardManager[ msg.sender ], \"Not approved\" );\n        require( _amount <= excessReserves(), \"Insufficient reserves\" );\n\n        IERC20Mintable( OHM ).mint( _recipient, _amount );\n\n        emit RewardsMinted( msg.sender, _recipient, _amount );\n    } \n\n    /**\n        @notice returns excess reserves not backing tokens\n        @return uint\n     */\n    function excessReserves() public view returns ( uint ) {\n        return totalReserves.sub( IERC20( OHM ).totalSupply().sub( totalDebt ) );\n    }\n\n    /**\n        @notice takes inventory of all tracked assets\n        @notice always consolidate to recognized reserves before audit\n     */\n    function auditReserves() external onlyManager() {\n        uint reserves;\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\n            reserves = reserves.add ( \n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\n            );\n        }\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\n            reserves = reserves.add (\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\n            );\n        }\n        totalReserves = reserves;\n        emit ReservesUpdated( reserves );\n        emit ReservesAudited( reserves );\n    }\n\n    /**\n        @notice returns OHM valuation of asset\n        @param _token address\n        @param _amount uint\n        @return value_ uint\n     */\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\n        if ( isReserveToken[ _token ] ) {\n            // convert amount to match OHM decimals\n            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\n        } else if ( isLiquidityToken[ _token ] ) {\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\n        }\n    }\n\n    /**\n        @notice queue address to change boolean in mapping\n        @param _managing MANAGING\n        @param _address address\n        @return bool\n     */\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\n        require( _address != address(0) );\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\n        } else if ( _managing == MANAGING.SOHM ) { // 9\n            sOHMQueue = block.number.add( blocksNeededForQueue );\n        } else return false;\n\n        emit ChangeQueued( _managing, _address );\n        return true;\n    }\n\n    /**\n        @notice verify queue then set boolean in mapping\n        @param _managing MANAGING\n        @param _address address\n        @param _calculator address\n        @return bool\n     */\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\n        require( _address != address(0) );\n        bool result;\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\n                reserveDepositorQueue[ _address ] = 0;\n                if( !listContains( reserveDepositors, _address ) ) {\n                    reserveDepositors.push( _address );\n                }\n            }\n            result = !isReserveDepositor[ _address ];\n            isReserveDepositor[ _address ] = result;\n            \n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\n                reserveSpenderQueue[ _address ] = 0;\n                if( !listContains( reserveSpenders, _address ) ) {\n                    reserveSpenders.push( _address );\n                }\n            }\n            result = !isReserveSpender[ _address ];\n            isReserveSpender[ _address ] = result;\n\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\n                reserveTokenQueue[ _address ] = 0;\n                if( !listContains( reserveTokens, _address ) ) {\n                    reserveTokens.push( _address );\n                }\n            }\n            result = !isReserveToken[ _address ];\n            isReserveToken[ _address ] = result;\n\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\n                reserveManagers.push( _address );\n                ReserveManagerQueue[ _address ] = 0;\n                if( !listContains( reserveManagers, _address ) ) {\n                    reserveManagers.push( _address );\n                }\n            }\n            result = !isReserveManager[ _address ];\n            isReserveManager[ _address ] = result;\n\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\n                liquidityDepositors.push( _address );\n                LiquidityDepositorQueue[ _address ] = 0;\n                if( !listContains( liquidityDepositors, _address ) ) {\n                    liquidityDepositors.push( _address );\n                }\n            }\n            result = !isLiquidityDepositor[ _address ];\n            isLiquidityDepositor[ _address ] = result;\n\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\n                LiquidityTokenQueue[ _address ] = 0;\n                if( !listContains( liquidityTokens, _address ) ) {\n                    liquidityTokens.push( _address );\n                }\n            }\n            result = !isLiquidityToken[ _address ];\n            isLiquidityToken[ _address ] = result;\n            bondCalculator[ _address ] = _calculator;\n\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\n                LiquidityManagerQueue[ _address ] = 0;\n                if( !listContains( liquidityManagers, _address ) ) {\n                    liquidityManagers.push( _address );\n                }\n            }\n            result = !isLiquidityManager[ _address ];\n            isLiquidityManager[ _address ] = result;\n\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\n                debtorQueue[ _address ] = 0;\n                if( !listContains( debtors, _address ) ) {\n                    debtors.push( _address );\n                }\n            }\n            result = !isDebtor[ _address ];\n            isDebtor[ _address ] = result;\n\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\n                rewardManagerQueue[ _address ] = 0;\n                if( !listContains( rewardManagers, _address ) ) {\n                    rewardManagers.push( _address );\n                }\n            }\n            result = !isRewardManager[ _address ];\n            isRewardManager[ _address ] = result;\n\n        } else if ( _managing == MANAGING.SOHM ) { // 9\n            sOHMQueue = 0;\n            sOHM = _address;\n            result = true;\n\n        } else return false;\n\n        emit ChangeActivated( _managing, _address, result );\n        return true;\n    }\n\n    /**\n        @notice checks requirements and returns altered structs\n        @param queue_ mapping( address => uint )\n        @param status_ mapping( address => bool )\n        @param _address address\n        @return bool \n     */\n    function requirements( \n        mapping( address => uint ) storage queue_, \n        mapping( address => bool ) storage status_, \n        address _address \n    ) internal view returns ( bool ) {\n        if ( !status_[ _address ] ) {\n            require( queue_[ _address ] != 0, \"Must queue\" );\n            require( queue_[ _address ] <= block.number, \"Queue not expired\" );\n            return true;\n        } return false;\n    }\n\n    /**\n        @notice checks array to ensure against duplicate\n        @param _list address[]\n        @param _token address\n        @return bool\n     */\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\n        for( uint i = 0; i < _list.length; i++ ) {\n            if( _list[ i ] == _token ) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 10000
      },
      "metadata": {
        "bytecodeHash": "none",
        "useLiteralContent": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "storageLayout",
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/Treasury.sol": {
        "Address": {
          "abi": [],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "602d6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000705000a",
              "opcodes": "PUSH1 0x2D PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP SMOD SDIV STOP EXP ",
              "sourceMap": "1181:2013:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000705000a",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP SMOD SDIV STOP EXP ",
              "sourceMap": "1181:2013:0:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "9000",
                "executionCost": "88",
                "totalCost": "9088"
              },
              "internal": {
                "_functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
                "_verifyCallResult(bool,bytes memory,string memory)": "infinite",
                "functionCall(address,bytes memory,string memory)": "infinite",
                "isContract(address)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\nlibrary Address {\\n\\n  function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ninterface IOwnable {\\n  function manager() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\\n\\ncontract Ownable is IOwnable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function manager() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyManager() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\ninterface IERC20Mintable {\\n  function mint( uint256 amount_ ) external;\\n\\n  function mint( address account_, uint256 ammount_ ) external;\\n}\\n\\ninterface IOHMERC20 {\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ninterface IBondCalculator {\\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\n}\\n\\ncontract ApeTreasury is Ownable {\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit( address indexed token, uint amount, uint value );\\n    event Withdrawal( address indexed token, uint amount, uint value );\\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event ReservesManaged( address indexed token, uint amount );\\n    event ReservesUpdated( uint indexed totalReserves );\\n    event ReservesAudited( uint indexed totalReserves );\\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\\n    event ChangeQueued( MANAGING indexed managing, address queued );\\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\\n\\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SOHM }\\n\\n    address public immutable OHM;\\n    uint public immutable blocksNeededForQueue;\\n\\n    address[] public reserveTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isReserveToken;\\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\\n\\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveDepositor;\\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\\n\\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveSpender;\\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isLiquidityToken;\\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityDepositor;\\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\\n\\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\\n\\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveManager;\\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityManager;\\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\\n\\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isDebtor;\\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\\n    mapping( address => uint ) public debtorBalance;\\n\\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isRewardManager;\\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\\n\\n    address public sOHM;\\n    uint public sOHMQueue; // Delays change to sOHM address\\n    \\n    uint public totalReserves; // Risk-free value of all assets\\n    uint public totalDebt;\\n\\n    constructor (\\n        address _OHM,\\n        address _DAI,\\n        address _Frax,\\n        address _OHMDAI,\\n        uint _blocksNeededForQueue\\n    ) {\\n        require( _OHM != address(0) );\\n        OHM = _OHM;\\n\\n        isReserveToken[ _DAI ] = true;\\n        reserveTokens.push( _DAI );\\n\\n        isReserveToken[ _Frax] = true;\\n        reserveTokens.push( _Frax );\\n\\n       isLiquidityToken[ _OHMDAI ] = true;\\n       liquidityTokens.push( _OHMDAI );\\n\\n        blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for OHM\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \\\"Not accepted\\\" );\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        if ( isReserveToken[ _token ] ) {\\n            require( isReserveDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isLiquidityDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        // mint OHM needed and store amount of rewards for distribution\\n        send_ = value.sub( _profit );\\n        IERC20Mintable( OHM ).mint( msg.sender, send_ );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit Deposit( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to burn OHM for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw( uint _amount, address _token ) external {\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" ); // Only reserves can be used for redemptions\\n        require( isReserveSpender[ msg.sender ] == true, \\\"Not approved\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n        IOHMERC20( OHM ).burnFrom( msg.sender, value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit Withdrawal( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n\\n        uint maximumDebt = IERC20( sOHM ).balanceOf( msg.sender ); // Can only borrow against sOHM held\\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\\n        require( value <= availableDebt, \\\"Exceeds debt limit\\\" );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\\n        totalDebt = totalDebt.add( value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).transfer( msg.sender, _amount );\\n        \\n        emit CreateDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        uint value = valueOf( _token, _amount );\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\\n        totalDebt = totalDebt.sub( value );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit RepayDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with OHM\\n        @param _amount uint\\n     */\\n    function repayDebtWithOHM( uint _amount ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n\\n        IOHMERC20( OHM ).burnFrom( msg.sender, _amount );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\\n        totalDebt = totalDebt.sub( _amount );\\n\\n        emit RepayDebt( msg.sender, OHM, _amount, _amount );\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage( address _token, uint _amount ) external {\\n        if( isLiquidityToken[ _token ] ) {\\n            require( isLiquidityManager[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isReserveManager[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        require( value <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit ReservesManaged( _token, _amount );\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards( address _recipient, uint _amount ) external {\\n        require( isRewardManager[ msg.sender ], \\\"Not approved\\\" );\\n        require( _amount <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        IERC20Mintable( OHM ).mint( _recipient, _amount );\\n\\n        emit RewardsMinted( msg.sender, _recipient, _amount );\\n    } \\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns ( uint ) {\\n        return totalReserves.sub( IERC20( OHM ).totalSupply().sub( totalDebt ) );\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external onlyManager() {\\n        uint reserves;\\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\\n            reserves = reserves.add ( \\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\\n            reserves = reserves.add (\\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        totalReserves = reserves;\\n        emit ReservesUpdated( reserves );\\n        emit ReservesAudited( reserves );\\n    }\\n\\n    /**\\n        @notice returns OHM valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return value_ uint\\n     */\\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\\n        if ( isReserveToken[ _token ] ) {\\n            // convert amount to match OHM decimals\\n            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\\n        } else if ( isLiquidityToken[ _token ] ) {\\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = block.number.add( blocksNeededForQueue );\\n        } else return false;\\n\\n        emit ChangeQueued( _managing, _address );\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @param _calculator address\\n        @return bool\\n     */\\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        bool result;\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\\n                reserveDepositorQueue[ _address ] = 0;\\n                if( !listContains( reserveDepositors, _address ) ) {\\n                    reserveDepositors.push( _address );\\n                }\\n            }\\n            result = !isReserveDepositor[ _address ];\\n            isReserveDepositor[ _address ] = result;\\n            \\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\\n                reserveSpenderQueue[ _address ] = 0;\\n                if( !listContains( reserveSpenders, _address ) ) {\\n                    reserveSpenders.push( _address );\\n                }\\n            }\\n            result = !isReserveSpender[ _address ];\\n            isReserveSpender[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\\n                reserveTokenQueue[ _address ] = 0;\\n                if( !listContains( reserveTokens, _address ) ) {\\n                    reserveTokens.push( _address );\\n                }\\n            }\\n            result = !isReserveToken[ _address ];\\n            isReserveToken[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\\n                reserveManagers.push( _address );\\n                ReserveManagerQueue[ _address ] = 0;\\n                if( !listContains( reserveManagers, _address ) ) {\\n                    reserveManagers.push( _address );\\n                }\\n            }\\n            result = !isReserveManager[ _address ];\\n            isReserveManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\\n                liquidityDepositors.push( _address );\\n                LiquidityDepositorQueue[ _address ] = 0;\\n                if( !listContains( liquidityDepositors, _address ) ) {\\n                    liquidityDepositors.push( _address );\\n                }\\n            }\\n            result = !isLiquidityDepositor[ _address ];\\n            isLiquidityDepositor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\\n                LiquidityTokenQueue[ _address ] = 0;\\n                if( !listContains( liquidityTokens, _address ) ) {\\n                    liquidityTokens.push( _address );\\n                }\\n            }\\n            result = !isLiquidityToken[ _address ];\\n            isLiquidityToken[ _address ] = result;\\n            bondCalculator[ _address ] = _calculator;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\\n                LiquidityManagerQueue[ _address ] = 0;\\n                if( !listContains( liquidityManagers, _address ) ) {\\n                    liquidityManagers.push( _address );\\n                }\\n            }\\n            result = !isLiquidityManager[ _address ];\\n            isLiquidityManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\\n                debtorQueue[ _address ] = 0;\\n                if( !listContains( debtors, _address ) ) {\\n                    debtors.push( _address );\\n                }\\n            }\\n            result = !isDebtor[ _address ];\\n            isDebtor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\\n                rewardManagerQueue[ _address ] = 0;\\n                if( !listContains( rewardManagers, _address ) ) {\\n                    rewardManagers.push( _address );\\n                }\\n            }\\n            result = !isRewardManager[ _address ];\\n            isRewardManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = 0;\\n            sOHM = _address;\\n            result = true;\\n\\n        } else return false;\\n\\n        emit ChangeActivated( _managing, _address, result );\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements( \\n        mapping( address => uint ) storage queue_, \\n        mapping( address => bool ) storage status_, \\n        address _address \\n    ) internal view returns ( bool ) {\\n        if ( !status_[ _address ] ) {\\n            require( queue_[ _address ] != 0, \\\"Must queue\\\" );\\n            require( queue_[ _address ] <= block.number, \\\"Queue not expired\\\" );\\n            return true;\\n        } return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\\n        for( uint i = 0; i < _list.length; i++ ) {\\n            if( _list[ i ] == _token ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x7c766ccab2d5a550bf1d62919251d0a6ea0b2b1fba1109d8a5ea2ca9499f86d9\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "ApeTreasury": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_OHM",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_DAI",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_Frax",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_OHMDAI",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_blocksNeededForQueue",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "enum ApeTreasury.MANAGING",
                  "name": "managing",
                  "type": "uint8"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "activated",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "result",
                  "type": "bool"
                }
              ],
              "name": "ChangeActivated",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "enum ApeTreasury.MANAGING",
                  "name": "managing",
                  "type": "uint8"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "queued",
                  "type": "address"
                }
              ],
              "name": "ChangeQueued",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "debtor",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "CreateDebt",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Deposit",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipPulled",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipPushed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "debtor",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "RepayDebt",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "totalReserves",
                  "type": "uint256"
                }
              ],
              "name": "ReservesAudited",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "ReservesManaged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "totalReserves",
                  "type": "uint256"
                }
              ],
              "name": "ReservesUpdated",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "RewardsMinted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Withdrawal",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "LiquidityDepositorQueue",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "LiquidityManagerQueue",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "LiquidityTokenQueue",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "OHM",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "ReserveManagerQueue",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "auditReserves",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "blocksNeededForQueue",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "bondCalculator",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "debtorBalance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "debtorQueue",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "debtors",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_profit",
                  "type": "uint256"
                }
              ],
              "name": "deposit",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "send_",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "excessReserves",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_token",
                  "type": "address"
                }
              ],
              "name": "incurDebt",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "isDebtor",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "isLiquidityDepositor",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "isLiquidityManager",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "isLiquidityToken",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "isReserveDepositor",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "isReserveManager",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "isReserveSpender",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "isReserveToken",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "isRewardManager",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "liquidityDepositors",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "liquidityManagers",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "liquidityTokens",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "manage",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "manager",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "mintRewards",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "pullManagement",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner_",
                  "type": "address"
                }
              ],
              "name": "pushManagement",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum ApeTreasury.MANAGING",
                  "name": "_managing",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "queue",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceManagement",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "repayDebtWithOHM",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_token",
                  "type": "address"
                }
              ],
              "name": "repayDebtWithReserve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "reserveDepositorQueue",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "reserveDepositors",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "reserveManagers",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "reserveSpenderQueue",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "reserveSpenders",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "reserveTokenQueue",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "reserveTokens",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "rewardManagerQueue",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "rewardManagers",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "sOHM",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "sOHMQueue",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum ApeTreasury.MANAGING",
                  "name": "_managing",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_calculator",
                  "type": "address"
                }
              ],
              "name": "toggle",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalDebt",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalReserves",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "valueOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "value_",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_token",
                  "type": "address"
                }
              ],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "deposit(uint256,address,uint256)": {
                "params": {
                  "_amount": "uint",
                  "_profit": "uint",
                  "_token": "address"
                },
                "returns": {
                  "send_": "uint"
                }
              },
              "excessReserves()": {
                "returns": {
                  "_0": "uint"
                }
              },
              "incurDebt(uint256,address)": {
                "params": {
                  "_amount": "uint",
                  "_token": "address"
                }
              },
              "manage(address,uint256)": {
                "params": {
                  "_amount": "uint",
                  "_token": "address"
                }
              },
              "queue(uint8,address)": {
                "params": {
                  "_address": "address",
                  "_managing": "MANAGING"
                },
                "returns": {
                  "_0": "bool"
                }
              },
              "repayDebtWithOHM(uint256)": {
                "params": {
                  "_amount": "uint"
                }
              },
              "repayDebtWithReserve(uint256,address)": {
                "params": {
                  "_amount": "uint",
                  "_token": "address"
                }
              },
              "toggle(uint8,address,address)": {
                "params": {
                  "_address": "address",
                  "_calculator": "address",
                  "_managing": "MANAGING"
                },
                "returns": {
                  "_0": "bool"
                }
              },
              "valueOf(address,uint256)": {
                "params": {
                  "_amount": "uint",
                  "_token": "address"
                },
                "returns": {
                  "value_": "uint"
                }
              },
              "withdraw(uint256,address)": {
                "params": {
                  "_amount": "uint",
                  "_token": "address"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3A2D CODESIZE SUB DUP1 PUSH3 0x3A2D DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x80 SWAP1 SWAP6 ADD MLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR DUP1 DUP3 SSTORE SWAP4 MLOAD SWAP6 SWAP7 SWAP5 SWAP6 SWAP3 SWAP5 SWAP4 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH32 0xEA8258F2D9DDB679928CF34B78CF645B7FEDA9ACC828E4DD82D014EAAE270EBA SWAP1 DUP3 SWAP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0xB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x80 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x2 DUP1 SLOAD DUP1 DUP5 ADD DUP3 SSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP10 OR SWAP1 SSTORE SWAP10 DUP12 AND DUP1 DUP8 MSTORE DUP5 DUP8 KECCAK256 DUP1 SLOAD DUP5 AND DUP6 OR SWAP1 SSTORE DUP2 SLOAD DUP1 DUP6 ADD SWAP1 SWAP3 SSTORE SWAP10 ADD DUP1 SLOAD DUP8 AND SWAP1 SWAP10 OR SWAP1 SWAP9 SSTORE SWAP6 DUP9 AND DUP1 DUP5 MSTORE PUSH1 0xC SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP7 AND DUP6 OR SWAP1 SWAP6 SSTORE PUSH1 0xB DUP1 SLOAD SWAP5 DUP6 ADD DUP2 SSTORE DUP2 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 SWAP1 SWAP4 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0xA0 DUP3 SWAP1 MSTORE SWAP2 SWAP1 SWAP3 AND SWAP2 SWAP1 PUSH2 0x380B SWAP1 PUSH3 0x222 SWAP1 CODECOPY DUP1 PUSH2 0x204D MSTORE DUP1 PUSH2 0x22C8 MSTORE DUP1 PUSH2 0x2324 MSTORE DUP1 PUSH2 0x2380 MSTORE DUP1 PUSH2 0x23DE MSTORE DUP1 PUSH2 0x2443 MSTORE DUP1 PUSH2 0x249F MSTORE DUP1 PUSH2 0x24FD MSTORE DUP1 PUSH2 0x255B MSTORE DUP1 PUSH2 0x25B7 MSTORE DUP1 PUSH2 0x2613 MSTORE POP DUP1 PUSH2 0xAA7 MSTORE DUP1 PUSH2 0xEB6 MSTORE DUP1 PUSH2 0xFF1 MSTORE DUP1 PUSH2 0x10A5 MSTORE DUP1 PUSH2 0x153F MSTORE DUP1 PUSH2 0x1B70 MSTORE DUP1 PUSH2 0x1CFE MSTORE DUP1 PUSH2 0x1F03 MSTORE POP PUSH2 0x380B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x340 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x87D67DFF GT PUSH2 0x1BD JUMPI DUP1 PUSH4 0xCD85641A GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xEBD83CD8 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xFBFD393B GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xFBFD393B EQ PUSH2 0x93F JUMPI DUP1 PUSH4 0xFC7B9C18 EQ PUSH2 0x976 JUMPI DUP1 PUSH4 0xFD1EC010 EQ PUSH2 0x97E JUMPI DUP1 PUSH4 0xFFF9EE87 EQ PUSH2 0x99B JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xEBD83CD8 EQ PUSH2 0x8CD JUMPI DUP1 PUSH4 0xEE4E19A1 EQ PUSH2 0x8F3 JUMPI DUP1 PUSH4 0xFB939588 EQ PUSH2 0x919 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xD796FFB8 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0xD796FFB8 EQ PUSH2 0x84C JUMPI DUP1 PUSH4 0xDF89B344 EQ PUSH2 0x878 JUMPI DUP1 PUSH4 0xE83AFEE3 EQ PUSH2 0x89E JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xCD85641A EQ PUSH2 0x801 JUMPI DUP1 PUSH4 0xD031370B EQ PUSH2 0x827 JUMPI DUP1 PUSH4 0xD07F390F EQ PUSH2 0x844 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xA569E571 GT PUSH2 0x166 JUMPI DUP1 PUSH4 0xB1BD38B0 GT PUSH2 0x140 JUMPI DUP1 PUSH4 0xB1BD38B0 EQ PUSH2 0x766 JUMPI DUP1 PUSH4 0xB5B1D560 EQ PUSH2 0x78C JUMPI DUP1 PUSH4 0xBC157AC1 EQ PUSH2 0x7A9 JUMPI DUP1 PUSH4 0xC24AD43E EQ PUSH2 0x7DB JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xA569E571 EQ PUSH2 0x712 JUMPI DUP1 PUSH4 0xA6C41FEC EQ PUSH2 0x738 JUMPI DUP1 PUSH4 0xAB319C9A EQ PUSH2 0x740 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x8F840DDD GT PUSH2 0x197 JUMPI DUP1 PUSH4 0x8F840DDD EQ PUSH2 0x6BE JUMPI DUP1 PUSH4 0x932CC8C3 EQ PUSH2 0x6C6 JUMPI DUP1 PUSH4 0xA1210A2D EQ PUSH2 0x6EC JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x87D67DFF EQ PUSH2 0x655 JUMPI DUP1 PUSH4 0x8F59C727 EQ PUSH2 0x67B JUMPI DUP1 PUSH4 0x8F6A7B57 EQ PUSH2 0x6A1 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x2789DE37 GT PUSH2 0x28C JUMPI DUP1 PUSH4 0x5A96AC0A GT PUSH2 0x235 JUMPI DUP1 PUSH4 0x6B5E40A7 GT PUSH2 0x20F JUMPI DUP1 PUSH4 0x6B5E40A7 EQ PUSH2 0x5D8 JUMPI DUP1 PUSH4 0x70A0502A EQ PUSH2 0x5F5 JUMPI DUP1 PUSH4 0x788C6C01 EQ PUSH2 0x612 JUMPI DUP1 PUSH4 0x869871BF EQ PUSH2 0x638 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x5A96AC0A EQ PUSH2 0x57E JUMPI DUP1 PUSH4 0x68C31DD5 EQ PUSH2 0x586 JUMPI DUP1 PUSH4 0x6A20DE92 EQ PUSH2 0x5AC JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x46F68EE9 GT PUSH2 0x266 JUMPI DUP1 PUSH4 0x46F68EE9 EQ PUSH2 0x52A JUMPI DUP1 PUSH4 0x481C6A75 EQ PUSH2 0x550 JUMPI DUP1 PUSH4 0x4E83423C EQ PUSH2 0x558 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x2789DE37 EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0x2B7CE500 EQ PUSH2 0x505 JUMPI DUP1 PUSH4 0x437F7912 EQ PUSH2 0x50D JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xF70431F GT PUSH2 0x2EE JUMPI DUP1 PUSH4 0x15079925 GT PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x15079925 EQ PUSH2 0x4A3 JUMPI DUP1 PUSH4 0x1AF4DA70 EQ PUSH2 0x4AB JUMPI DUP1 PUSH4 0x1EEC5A9A EQ PUSH2 0x4D1 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xF70431F EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x124154CA EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0x12422D23 EQ PUSH2 0x477 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x94A8651 GT PUSH2 0x31F JUMPI DUP1 PUSH4 0x94A8651 EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0xB0EEE30 EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0xC3513A8 EQ PUSH2 0x418 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH3 0xF714CE EQ PUSH2 0x345 JUMPI DUP1 PUSH4 0x619AFF1 EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0x89208D8 EQ PUSH2 0x3AC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9C1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x371 PUSH2 0xBF6 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCAC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xCBE JUMP JUMPDEST PUSH2 0x3DA PUSH2 0xEA9 JUMP JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xF4D JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x453 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x110B JUMP JUMPDEST PUSH2 0x390 PUSH2 0x144C JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x145B JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1476 JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x169C JUMP JUMPDEST PUSH2 0x371 PUSH2 0x16A2 JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x18A2 JUMP JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18B2 JUMP JUMPDEST PUSH2 0x390 PUSH2 0x19BE JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x56E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x19CD JUMP JUMPDEST PUSH2 0x371 PUSH2 0x19E2 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x59C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A99 JUMP JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1AAE JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1C41 JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x60B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1C51 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1C61 JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x64E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1C73 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x66B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1C83 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x1CBA JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CC0 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CD2 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x728 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CE7 JUMP JUMPDEST PUSH2 0x390 PUSH2 0x1CFC JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D20 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x77C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D32 JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1D44 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x7BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x1D54 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2017 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2029 JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x83D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x203B JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x204B JUMP JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x206F JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x88E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2226 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x223B JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2698 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x909 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x26AD JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x92F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x26C2 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x40 ADD CALLDATALOAD AND PUSH2 0x26D4 JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x304B JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x994 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3051 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3061 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xA2E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742061636365707465640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0xA97 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAA3 DUP3 DUP5 PUSH2 0x1476 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x79CC6790 CALLER DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB30 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x21 SLOAD PUSH2 0xB42 SWAP3 POP SWAP1 POP DUP3 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x21 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x93BB8EDD35984706EEE1B92541281F7F62D33C01C5B2EC0929A113603BD21D66 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH2 0xB84 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER DUP6 PUSH2 0x30B5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 PUSH32 0xDF273CB619D95419A9CD0EC88123A0538C85064229BAA6363788F743FFF90DEB SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x12 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC55 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0xEA8258F2D9DDB679928CF34B78CF645B7FEDA9ACC828E4DD82D014EAAE270EBA SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD48 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xD43 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xDAC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xDAC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDB8 DUP4 DUP4 PUSH2 0x1476 JUMP JUMPDEST SWAP1 POP PUSH2 0xDC2 PUSH2 0xEA9 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0xE16 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742072657365727665730000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x21 SLOAD PUSH2 0xE23 SWAP1 DUP3 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x21 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x93BB8EDD35984706EEE1B92541281F7F62D33C01C5B2EC0929A113603BD21D66 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH2 0xE65 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER DUP5 PUSH2 0x30B5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0x2BB2640731848FE9820BA48DBC978C1FC9BBD5F11B948BFAB05B7DEE3378FD80 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF48 PUSH2 0xF3F PUSH1 0x22 SLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF21 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x21 SLOAD SWAP1 PUSH2 0x3073 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xFB1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x79CC679000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x79CC6790 SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1038 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x104C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x106B SWAP3 POP SWAP1 POP DUP3 PUSH2 0x3073 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x22 SLOAD PUSH2 0x1088 SWAP1 DUP3 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x22 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP3 CALLER SWAP3 PUSH32 0xC6D98EECFC9C78AB62C89A82950079B54874749F1F6F24090F7ACC758BC2F309 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x116F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x11DC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742061636365707465640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x11E8 DUP3 DUP5 PUSH2 0x1476 JUMP JUMPDEST PUSH1 0x1F SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1266 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x127C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x129D SWAP1 DUP4 SWAP1 PUSH2 0x3073 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x12F4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x457863656564732064656274206C696D69740000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x130E SWAP1 DUP5 PUSH2 0x313A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x22 SLOAD PUSH2 0x132B SWAP1 DUP5 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x22 SSTORE PUSH1 0x21 SLOAD PUSH2 0x133B SWAP1 DUP5 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x21 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x93BB8EDD35984706EEE1B92541281F7F62D33C01C5B2EC0929A113603BD21D66 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x40 DUP1 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP3 CALLER SWAP3 PUSH32 0x7E1A939BED137A819B5D2979822C67F877689F7A863D5E4CB57CDCA97B2977D6 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x15CC JUMPI PUSH2 0x15C5 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0xA EXP SWAP2 PUSH2 0x15BF SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1586 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x159A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD DUP6 SWAP1 PUSH1 0xFF AND PUSH1 0xA EXP PUSH2 0x3194 JUMP JUMPDEST SWAP1 PUSH2 0x31ED JUMP JUMPDEST SWAP1 POP PUSH2 0x1696 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1696 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD PUSH32 0x4249719F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x24 DUP5 ADD DUP8 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP4 AND SWAP3 PUSH4 0x4249719F SWAP3 PUSH1 0x44 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x167B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1701 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x17F2 JUMPI PUSH2 0x17E8 PUSH2 0x17E1 PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1722 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP6 SWAP1 DUP2 LT PUSH2 0x1748 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 PUSH4 0x70A08231 SWAP3 PUSH1 0x24 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x17DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x1476 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x313A JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1705 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0x1843 JUMPI PUSH2 0x1839 PUSH2 0x17E1 PUSH1 0xB DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1813 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP6 SWAP1 DUP2 LT PUSH2 0x1748 JUMPI INVALID JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x17F6 JUMP JUMPDEST POP PUSH1 0x21 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 SWAP1 PUSH32 0x93BB8EDD35984706EEE1B92541281F7F62D33C01C5B2EC0929A113603BD21D66 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x40 MLOAD DUP2 SWAP1 PUSH32 0xEC691F09F6924B27932253F85CAF99BACC30360CC0E50A1CC4D2ACC246014466 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x8 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1911 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1956 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x376C PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0xEA8258F2D9DDB679928CF34B78CF645B7FEDA9ACC828E4DD82D014EAAE270EBA SWAP2 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1A2B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3792 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP2 AND SWAP2 PUSH32 0xAA151555690C956FC3EA32F106BB9F119B5237A061EAA8557CFF3E51E3792C8D SWAP2 LOG3 PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1B12 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1B1A PUSH2 0xEA9 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x1B6E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742072657365727665730000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40C10F19 DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BF9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP4 POP CALLER SWAP3 POP PUSH32 0xFA8CCAB40E7DA8146C2304CD0950334FD30A6BA093ABE86261AA13911FED849C SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x5 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x15 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x18 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xE DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x21 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1C DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 PUSH2 0x1D93 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x1DE4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742061636365707465640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1DF9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER ADDRESS DUP8 PUSH2 0x322F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1E83 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1E7E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1EE7 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1EE7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1EF3 DUP5 DUP7 PUSH2 0x1476 JUMP JUMPDEST SWAP1 POP PUSH2 0x1EFF DUP2 DUP5 PUSH2 0x3073 JUMP JUMPDEST SWAP2 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40C10F19 CALLER DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F8C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x21 SLOAD PUSH2 0x1F9E SWAP3 POP SWAP1 POP DUP3 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x21 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x93BB8EDD35984706EEE1B92541281F7F62D33C01C5B2EC0929A113603BD21D66 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP3 PUSH32 0x90890809C654F11D6E72A28FA60149770A0D11EC6C92319D6CEB2BB0A4EA1A15 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x20D3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2140 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742061636365707465640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2155 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER ADDRESS DUP6 PUSH2 0x322F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2161 DUP3 DUP5 PUSH2 0x1476 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x217E SWAP1 DUP3 PUSH2 0x3073 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x22 SLOAD PUSH2 0x219B SWAP1 DUP3 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x22 SSTORE PUSH1 0x21 SLOAD PUSH2 0x21AB SWAP1 DUP3 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x21 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x93BB8EDD35984706EEE1B92541281F7F62D33C01C5B2EC0929A113603BD21D66 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 CALLER SWAP3 PUSH32 0xC6D98EECFC9C78AB62C89A82950079B54874749F1F6F24090F7ACC758BC2F309 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x229B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x22AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x22BC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x230A JUMPI PUSH2 0x22EC NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2318 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2366 JUMPI PUSH2 0x2348 NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x2 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2374 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x23C2 JUMPI PUSH2 0x23A4 NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x3 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x23D0 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2429 JUMPI PUSH2 0x240B PUSH2 0x2404 PUSH32 0x0 PUSH1 0x2 PUSH2 0x3194 JUMP JUMPDEST NUMBER SWAP1 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x4 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2437 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2485 JUMPI PUSH2 0x2467 NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x5 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2493 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x24E1 JUMPI PUSH2 0x24C3 NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x6 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x24EF JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2541 JUMPI PUSH2 0x2523 PUSH2 0x2404 PUSH32 0x0 PUSH1 0x2 PUSH2 0x3194 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x7 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x254F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x259D JUMPI PUSH2 0x257F NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x8 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x25AB JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x25F9 JUMPI PUSH2 0x25DB NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x9 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2607 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x263F JUMPI PUSH2 0x2637 NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x20 SSTORE PUSH2 0x2647 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1696 JUMP JUMPDEST DUP3 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2653 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE SWAP1 MLOAD PUSH32 0xE4F2C4B5BC209D509BC3D49348C787FEFADC66A79351B470599AC0F5BE52EAF SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2734 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2756 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x281F JUMPI PUSH2 0x2769 PUSH1 0x7 PUSH1 0x6 DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x27EF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2792 PUSH1 0x5 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x27EF JUMPI PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x282D JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x28F6 JUMPI PUSH2 0x2840 PUSH1 0xA PUSH1 0x9 DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x28C6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2869 PUSH1 0x8 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x28C6 JUMPI PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x2 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2904 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x29CD JUMPI PUSH2 0x2917 PUSH1 0x4 PUSH1 0x3 DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x299D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2940 PUSH1 0x2 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x299D JUMPI PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x3 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x29DB JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2AEE JUMPI PUSH2 0x29EE PUSH1 0x14 PUSH1 0x13 DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x2ABE JUMPI PUSH1 0x12 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH32 0xBB8A6A4669BA250D26CD7A459ECA9D215F8307E33AEBE50379BC5A3617EC3444 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2A61 SWAP1 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x2ABE JUMPI PUSH1 0x12 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xBB8A6A4669BA250D26CD7A459ECA9D215F8307E33AEBE50379BC5A3617EC3444 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x4 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2AFC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2C0F JUMPI PUSH2 0x2B0F PUSH1 0x10 PUSH1 0xF DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x2BDF JUMPI PUSH1 0xE DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2B82 SWAP1 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x2BDF JUMPI PUSH1 0xE DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x5 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2C1D JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2D15 JUMPI PUSH2 0x2C30 PUSH1 0xD PUSH1 0xC DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x2CB6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2C59 PUSH1 0xB DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x2CB6 JUMPI PUSH1 0xB DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x11 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP3 DUP6 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x6 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2D23 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2DEC JUMPI PUSH2 0x2D36 PUSH1 0x17 PUSH1 0x16 DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x2DBC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2D5F PUSH1 0x15 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x2DBC JUMPI PUSH1 0x15 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x55F448FDEA98C4D29EB340757EF0A66CD03DBB9538908A6A81D96026B71EC475 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x7 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2DFA JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2EC3 JUMPI PUSH2 0x2E0D PUSH1 0x1A PUSH1 0x19 DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x2E93 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2E36 PUSH1 0x18 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x2E93 JUMPI PUSH1 0x18 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xB13D2D76D1F4B7BE834882E410B3E3A8AFAF69F83600AE24DB354391D2378D2E ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x8 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2ED1 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2F9A JUMPI PUSH2 0x2EE4 PUSH1 0x1E PUSH1 0x1D DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x2F6A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2F0D PUSH1 0x1C DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x2F6A JUMPI PUSH1 0x1C DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xE4562A10381DEC21B205ED72637E6B1B523BDD0E4D4D50AF5CD23DD4500A211 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x9 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2FA8 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2FE3 JUMPI POP PUSH1 0x0 PUSH1 0x20 SSTORE PUSH1 0x1F DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x3044 JUMP JUMPDEST DUP5 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2FF9 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP2 MSTORE DUP4 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD PUSH32 0xDCACB7E392F3D6A216ED2660E3DCFD40B7793D33591DB2BA185A6B8E44FC477 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x22 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3044 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x3416 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x3135 SWAP1 DUP5 SWAP1 PUSH2 0x34AD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x3044 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x31A3 JUMPI POP PUSH1 0x0 PUSH2 0x1696 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x31B0 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3044 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x37B4 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3044 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH2 0x355E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x32B7 SWAP1 DUP6 SWAP1 PUSH2 0x34AD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x33BC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3347 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D75737420717565756500000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD NUMBER LT ISZERO PUSH2 0x33B4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5175657565206E6F742065787069726564000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH2 0x3044 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP4 SLOAD DUP2 LT ISZERO PUSH2 0x33BC JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x33E9 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x340E JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x1696 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x33CA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x34A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x346A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3452 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x3497 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3502 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x35C3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3135 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x3135 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x37D5 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x35AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP4 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 SWAP3 DUP4 SWAP3 PUSH1 0x44 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0x346A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3452 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x35B9 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x35D2 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x35DA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x35E5 DUP6 PUSH2 0x3765 JUMP JUMPDEST PUSH2 0x3636 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x3693 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x3656 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x36F5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x36FA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x370E JUMPI SWAP2 POP PUSH2 0x35D2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x371E JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP7 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP7 MLOAD DUP8 SWAP4 SWAP2 SWAP3 DUP4 SWAP3 PUSH1 0x44 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0x346A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3452 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F20616464726573734F776E61626C653A206D757374206265 KECCAK256 PUSH15 0x6577206F776E657220746F2070756C PUSH13 0x536166654D6174683A206D756C PUSH21 0x69706C69636174696F6E206F766572666C6F775361 PUSH7 0x6545524332303A KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A164736F6C6343000705000A0000 ",
              "sourceMap": "6550:18851:0:-:0;;;10110:505;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10110:505:0;;;;;;;;;;;;;;;;;;;;3710:6;:19;;-1:-1:-1;;;;;;3710:19:0;3719:10;3710:19;;;;3744:37;;10110:505;;;;;;;;;-1:-1:-1;;;;;3773:6:0;;;;;3744:37;;3710:6;;3744:37;-1:-1:-1;;;;;10276:18:0;;10267:29;;;;;;10306:10;;;;-1:-1:-1;;;;;;10306:10:0;;;-1:-1:-1;;;;;10327:22:0;;;;;;;:14;:22;;;;;;;;:29;;10352:4;-1:-1:-1;;10327:29:0;;;;;;;;10366:13;:26;;;;;;;;;;;;;-1:-1:-1;;;;;;10366:26:0;;;;;;;;10403:22;;;;;;;;;:29;;;;;;;;10442:27;;;;;;;;;;;;;;;;;;;;10479;;;;;;:16;:27;;;;;:34;;;;;;;;;;10522:15;:31;;;;;;;;;;;;;;;;;;;;;;;;10564:44;;;;6550:18851;;;;;10306:10;6550:18851;;;;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {
                "686": [
                  {
                    "length": 32,
                    "start": 2727
                  },
                  {
                    "length": 32,
                    "start": 3766
                  },
                  {
                    "length": 32,
                    "start": 4081
                  },
                  {
                    "length": 32,
                    "start": 4261
                  },
                  {
                    "length": 32,
                    "start": 5439
                  },
                  {
                    "length": 32,
                    "start": 7024
                  },
                  {
                    "length": 32,
                    "start": 7422
                  },
                  {
                    "length": 32,
                    "start": 7939
                  }
                ],
                "688": [
                  {
                    "length": 32,
                    "start": 8269
                  },
                  {
                    "length": 32,
                    "start": 8904
                  },
                  {
                    "length": 32,
                    "start": 8996
                  },
                  {
                    "length": 32,
                    "start": 9088
                  },
                  {
                    "length": 32,
                    "start": 9182
                  },
                  {
                    "length": 32,
                    "start": 9283
                  },
                  {
                    "length": 32,
                    "start": 9375
                  },
                  {
                    "length": 32,
                    "start": 9469
                  },
                  {
                    "length": 32,
                    "start": 9563
                  },
                  {
                    "length": 32,
                    "start": 9655
                  },
                  {
                    "length": 32,
                    "start": 9747
                  }
                ]
              },
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106103405760003560e01c806387d67dff116101bd578063cd85641a116100f9578063ebd83cd8116100a2578063fbfd393b1161007c578063fbfd393b1461093f578063fc7b9c1814610976578063fd1ec0101461097e578063fff9ee871461099b57610340565b8063ebd83cd8146108cd578063ee4e19a1146108f3578063fb9395881461091957610340565b8063d796ffb8116100d3578063d796ffb81461084c578063df89b34414610878578063e83afee31461089e57610340565b8063cd85641a14610801578063d031370b14610827578063d07f390f1461084457610340565b8063a569e57111610166578063b1bd38b011610140578063b1bd38b014610766578063b5b1d5601461078c578063bc157ac1146107a9578063c24ad43e146107db57610340565b8063a569e57114610712578063a6c41fec14610738578063ab319c9a1461074057610340565b80638f840ddd116101975780638f840ddd146106be578063932cc8c3146106c6578063a1210a2d146106ec57610340565b806387d67dff146106555780638f59c7271461067b5780638f6a7b57146106a157610340565b80632789de371161028c5780635a96ac0a116102355780636b5e40a71161020f5780636b5e40a7146105d857806370a0502a146105f5578063788c6c0114610612578063869871bf1461063857610340565b80635a96ac0a1461057e57806368c31dd5146105865780636a20de92146105ac57610340565b806346f68ee91161026657806346f68ee91461052a578063481c6a75146105505780634e83423c1461055857610340565b80632789de37146104fd5780632b7ce50014610505578063437f79121461050d57610340565b80630f70431f116102ee57806315079925116102c857806315079925146104a35780631af4da70146104ab5780631eec5a9a146104d157610340565b80630f70431f14610420578063124154ca1461043d57806312422d231461047757610340565b8063094a86511161031f578063094a8651146103b45780630b0eee30146103ec5780630c3513a81461041857610340565b8062f714ce146103455780630619aff114610373578063089208d8146103ac575b600080fd5b6103716004803603604081101561035b57600080fd5b50803590602001356001600160a01b03166109c1565b005b6103906004803603602081101561038957600080fd5b5035610bcc565b604080516001600160a01b039092168252519081900360200190f35b610371610bf6565b6103da600480360360208110156103ca57600080fd5b50356001600160a01b0316610cac565b60408051918252519081900360200190f35b6103716004803603604081101561040257600080fd5b506001600160a01b038135169060200135610cbe565b6103da610ea9565b6103716004803603602081101561043657600080fd5b5035610f4d565b6104636004803603602081101561045357600080fd5b50356001600160a01b03166110f6565b604080519115158252519081900360200190f35b6103716004803603604081101561048d57600080fd5b50803590602001356001600160a01b031661110b565b61039061144c565b610390600480360360208110156104c157600080fd5b50356001600160a01b031661145b565b6103da600480360360408110156104e757600080fd5b506001600160a01b038135169060200135611476565b6103da61169c565b6103716116a2565b6103906004803603602081101561052357600080fd5b50356118a2565b6103716004803603602081101561054057600080fd5b50356001600160a01b03166118b2565b6103906119be565b6104636004803603602081101561056e57600080fd5b50356001600160a01b03166119cd565b6103716119e2565b6104636004803603602081101561059c57600080fd5b50356001600160a01b0316611a99565b610371600480360360408110156105c257600080fd5b506001600160a01b038135169060200135611aae565b610390600480360360208110156105ee57600080fd5b5035611c41565b6103906004803603602081101561060b57600080fd5b5035611c51565b6103da6004803603602081101561062857600080fd5b50356001600160a01b0316611c61565b6103906004803603602081101561064e57600080fd5b5035611c73565b6104636004803603602081101561066b57600080fd5b50356001600160a01b0316611c83565b6103da6004803603602081101561069157600080fd5b50356001600160a01b0316611c98565b610390600480360360208110156106b757600080fd5b5035611caa565b6103da611cba565b6103da600480360360208110156106dc57600080fd5b50356001600160a01b0316611cc0565b6104636004803603602081101561070257600080fd5b50356001600160a01b0316611cd2565b6104636004803603602081101561072857600080fd5b50356001600160a01b0316611ce7565b610390611cfc565b6103da6004803603602081101561075657600080fd5b50356001600160a01b0316611d20565b6103da6004803603602081101561077c57600080fd5b50356001600160a01b0316611d32565b610390600480360360208110156107a257600080fd5b5035611d44565b6103da600480360360608110156107bf57600080fd5b508035906001600160a01b036020820135169060400135611d54565b6103da600480360360208110156107f157600080fd5b50356001600160a01b0316612017565b6103da6004803603602081101561081757600080fd5b50356001600160a01b0316612029565b6103906004803603602081101561083d57600080fd5b503561203b565b6103da61204b565b6103716004803603604081101561086257600080fd5b50803590602001356001600160a01b031661206f565b6104636004803603602081101561088e57600080fd5b50356001600160a01b0316612226565b610463600480360360408110156108b457600080fd5b50803560ff1690602001356001600160a01b031661223b565b610463600480360360208110156108e357600080fd5b50356001600160a01b0316612698565b6104636004803603602081101561090957600080fd5b50356001600160a01b03166126ad565b6103da6004803603602081101561092f57600080fd5b50356001600160a01b03166126c2565b6104636004803603606081101561095557600080fd5b5060ff813516906001600160a01b03602082013581169160400135166126d4565b6103da61304b565b6103906004803603602081101561099457600080fd5b5035613051565b6103da600480360360208110156109b157600080fd5b50356001600160a01b0316613061565b6001600160a01b03811660009081526003602052604090205460ff16610a2e576040805162461bcd60e51b815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b3360009081526009602052604090205460ff161515600114610a97576040805162461bcd60e51b815260206004820152600c60248201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604482015290519081900360640190fd5b6000610aa38284611476565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166379cc679033836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610b1c57600080fd5b505af1158015610b30573d6000803e3d6000fd5b5050602154610b429250905082613073565b60218190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a2610b846001600160a01b03831633856130b5565b604080518481526020810183905281516001600160a01b038516927fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb928290030190a2505050565b60128181548110610bdc57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03163314610c55576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b601b6020526000908152604090205481565b6001600160a01b0382166000908152600c602052604090205460ff1615610d48573360009081526016602052604090205460ff16610d43576040805162461bcd60e51b815260206004820152600c60248201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604482015290519081900360640190fd5b610dac565b3360009081526013602052604090205460ff16610dac576040805162461bcd60e51b815260206004820152600c60248201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604482015290519081900360640190fd5b6000610db88383611476565b9050610dc2610ea9565b811115610e16576040805162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e742072657365727665730000000000000000000000604482015290519081900360640190fd5b602154610e239082613073565b60218190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a2610e656001600160a01b03841633846130b5565b6040805183815290516001600160a01b038516917f2bb2640731848fe9820ba48dbc978c1fc9bbd5f11b948bfab05b7dee3378fd80919081900360200190a2505050565b6000610f48610f3f6022547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0d57600080fd5b505afa158015610f21573d6000803e3d6000fd5b505050506040513d6020811015610f3757600080fd5b505190613073565b60215490613073565b905090565b3360009081526019602052604090205460ff16610fb1576040805162461bcd60e51b815260206004820152600c60248201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810183905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916379cc679091604480830192600092919082900301818387803b15801561103857600080fd5b505af115801561104c573d6000803e3d6000fd5b5050336000908152601b602052604090205461106b9250905082613073565b336000908152601b60205260409020556022546110889082613073565b602255604080518281526020810183905281516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169233927fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309929081900390910190a350565b60066020526000908152604090205460ff1681565b3360009081526019602052604090205460ff1661116f576040805162461bcd60e51b815260206004820152600c60248201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03811660009081526003602052604090205460ff166111dc576040805162461bcd60e51b815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b60006111e88284611476565b601f54604080517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561125257600080fd5b505afa158015611266573d6000803e3d6000fd5b505050506040513d602081101561127c57600080fd5b5051336000908152601b60205260408120549192509061129d908390613073565b9050808311156112f4576040805162461bcd60e51b815260206004820152601260248201527f457863656564732064656274206c696d69740000000000000000000000000000604482015290519081900360640190fd5b336000908152601b602052604090205461130e908461313a565b336000908152601b602052604090205560225461132b908461313a565b60225560215461133b9084613073565b60218190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a2604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810187905290516001600160a01b0386169163a9059cbb9160448083019260209291908290030181600087803b1580156113d157600080fd5b505af11580156113e5573d6000803e3d6000fd5b505050506040513d60208110156113fb57600080fd5b5050604080518681526020810185905281516001600160a01b0387169233927f7e1a939bed137a819b5d2979822c67f877689f7a863d5e4cb57cdca97b2977d6929081900390910190a35050505050565b601f546001600160a01b031681565b6011602052600090815260409020546001600160a01b031681565b6001600160a01b03821660009081526003602052604081205460ff16156115cc576115c5836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156114d357600080fd5b505afa1580156114e7573d6000803e3d6000fd5b505050506040513d60208110156114fd57600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160ff909216600a0a916115bf916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163313ce56791600480820192602092909190829003018186803b15801561158657600080fd5b505afa15801561159a573d6000803e3d6000fd5b505050506040513d60208110156115b057600080fd5b5051859060ff16600a0a613194565b906131ed565b9050611696565b6001600160a01b0383166000908152600c602052604090205460ff1615611696576001600160a01b038084166000818152601160209081526040918290205482517f4249719f00000000000000000000000000000000000000000000000000000000815260048101949094526024840187905291519190931692634249719f9260448082019391829003018186803b15801561166757600080fd5b505afa15801561167b573d6000803e3d6000fd5b505050506040513d602081101561169157600080fd5b505190505b92915050565b60205481565b6000546001600160a01b03163314611701576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805b6002548110156117f2576117e86117e16002838154811061172257fe5b600091825260209091200154600280546001600160a01b03909216918590811061174857fe5b60009182526020918290200154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b1580156117b057600080fd5b505afa1580156117c4573d6000803e3d6000fd5b505050506040513d60208110156117da57600080fd5b5051611476565b839061313a565b9150600101611705565b5060005b600b54811015611843576118396117e1600b838154811061181357fe5b600091825260209091200154600b80546001600160a01b03909216918590811061174857fe5b91506001016117f6565b50602181905560405181907f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a260405181907fec691f09f6924b27932253f85caf99bacc30360cc0e50a1cc4d2acc24601446690600090a250565b60088181548110610bdc57600080fd5b6000546001600160a01b03163314611911576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166119565760405162461bcd60e51b815260040180806020018281038252602681526020018061376c6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a36001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b601d6020526000908152604090205460ff1681565b6001546001600160a01b03163314611a2b5760405162461bcd60e51b81526004018080602001828103825260228152602001806137926022913960400191505060405180910390fd5b600154600080546040516001600160a01b0393841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a36001546000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b60036020526000908152604090205460ff1681565b336000908152601d602052604090205460ff16611b12576040805162461bcd60e51b815260206004820152600c60248201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604482015290519081900360640190fd5b611b1a610ea9565b811115611b6e576040805162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e742072657365727665730000000000000000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f1983836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611be557600080fd5b505af1158015611bf9573d6000803e3d6000fd5b50506040805184815290516001600160a01b03861693503392507ffa8ccab40e7da8146c2304cd0950334fd30a6ba093abe86261aa13911fed849c9181900360200190a35050565b60058181548110610bdc57600080fd5b60158181548110610bdc57600080fd5b60046020526000908152604090205481565b60188181548110610bdc57600080fd5b60096020526000908152604090205460ff1681565b600d6020526000908152604090205481565b600e8181548110610bdc57600080fd5b60215481565b60076020526000908152604090205481565b600f6020526000908152604090205460ff1681565b600c6020526000908152604090205460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60176020526000908152604090205481565b60146020526000908152604090205481565b601c8181548110610bdc57600080fd5b6001600160a01b03821660009081526003602052604081205460ff1680611d9357506001600160a01b0383166000908152600c602052604090205460ff165b611de4576040805162461bcd60e51b815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b611df96001600160a01b03841633308761322f565b6001600160a01b03831660009081526003602052604090205460ff1615611e83573360009081526006602052604090205460ff16611e7e576040805162461bcd60e51b815260206004820152600c60248201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604482015290519081900360640190fd5b611ee7565b336000908152600f602052604090205460ff16611ee7576040805162461bcd60e51b815260206004820152600c60248201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611ef38486611476565b9050611eff8184613073565b91507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f1933846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611f7857600080fd5b505af1158015611f8c573d6000803e3d6000fd5b5050602154611f9e925090508261313a565b60218190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a2604080518681526020810183905281516001600160a01b038716927f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15928290030190a2509392505050565b600a6020526000908152604090205481565b601a6020526000908152604090205481565b60028181548110610bdc57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b3360009081526019602052604090205460ff166120d3576040805162461bcd60e51b815260206004820152600c60248201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03811660009081526003602052604090205460ff16612140576040805162461bcd60e51b815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b6121556001600160a01b03821633308561322f565b60006121618284611476565b336000908152601b602052604090205490915061217e9082613073565b336000908152601b602052604090205560225461219b9082613073565b6022556021546121ab908261313a565b60218190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a2604080518481526020810183905281516001600160a01b0385169233927fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309929081900390910190a3505050565b60166020526000908152604090205460ff1681565b600080546001600160a01b0316331461229b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0382166122ae57600080fd5b60008360098111156122bc57fe5b141561230a576122ec437f000000000000000000000000000000000000000000000000000000000000000061313a565b6001600160a01b038316600090815260076020526040902055612647565b600183600981111561231857fe5b141561236657612348437f000000000000000000000000000000000000000000000000000000000000000061313a565b6001600160a01b0383166000908152600a6020526040902055612647565b600283600981111561237457fe5b14156123c2576123a4437f000000000000000000000000000000000000000000000000000000000000000061313a565b6001600160a01b038316600090815260046020526040902055612647565b60038360098111156123d057fe5b14156124295761240b6124047f00000000000000000000000000000000000000000000000000000000000000006002613194565b439061313a565b6001600160a01b038316600090815260146020526040902055612647565b600483600981111561243757fe5b141561248557612467437f000000000000000000000000000000000000000000000000000000000000000061313a565b6001600160a01b038316600090815260106020526040902055612647565b600583600981111561249357fe5b14156124e1576124c3437f000000000000000000000000000000000000000000000000000000000000000061313a565b6001600160a01b0383166000908152600d6020526040902055612647565b60068360098111156124ef57fe5b1415612541576125236124047f00000000000000000000000000000000000000000000000000000000000000006002613194565b6001600160a01b038316600090815260176020526040902055612647565b600783600981111561254f57fe5b141561259d5761257f437f000000000000000000000000000000000000000000000000000000000000000061313a565b6001600160a01b0383166000908152601a6020526040902055612647565b60088360098111156125ab57fe5b14156125f9576125db437f000000000000000000000000000000000000000000000000000000000000000061313a565b6001600160a01b0383166000908152601e6020526040902055612647565b600983600981111561260757fe5b141561263f57612637437f000000000000000000000000000000000000000000000000000000000000000061313a565b602055612647565b506000611696565b82600981111561265357fe5b604080516001600160a01b038516815290517f0e4f2c4b5bc209d509bc3d49348c787fefadc66a79351b470599ac0f5be52eaf9181900360200190a250600192915050565b60136020526000908152604090205460ff1681565b60196020526000908152604090205460ff1681565b601e6020526000908152604090205481565b600080546001600160a01b03163314612734576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03831661274757600080fd5b60008085600981111561275657fe5b141561281f5761276960076006866132bd565b156127ef576001600160a01b0384166000908152600760205260408120556127926005856133c6565b6127ef57600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b506001600160a01b0383166000908152600660205260409020805460ff81161560ff199091168117909155612fed565b600185600981111561282d57fe5b14156128f657612840600a6009866132bd565b156128c6576001600160a01b0384166000908152600a60205260408120556128696008856133c6565b6128c657600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b506001600160a01b0383166000908152600960205260409020805460ff81161560ff199091168117909155612fed565b600285600981111561290457fe5b14156129cd5761291760046003866132bd565b1561299d576001600160a01b0384166000908152600460205260408120556129406002856133c6565b61299d57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b506001600160a01b0383166000908152600360205260409020805460ff81161560ff199091168117909155612fed565b60038560098111156129db57fe5b1415612aee576129ee60146013866132bd565b15612abe57601280546001810182557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344401805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038716908117909155600090815260146020526040812055612a6190856133c6565b612abe57601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344401805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b506001600160a01b0383166000908152601360205260409020805460ff81161560ff199091168117909155612fed565b6004856009811115612afc57fe5b1415612c0f57612b0f6010600f866132bd565b15612bdf57600e80546001810182557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038716908117909155600090815260106020526040812055612b8290856133c6565b612bdf57600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b506001600160a01b0383166000908152600f60205260409020805460ff81161560ff199091168117909155612fed565b6005856009811115612c1d57fe5b1415612d1557612c30600d600c866132bd565b15612cb6576001600160a01b0384166000908152600d6020526040812055612c59600b856133c6565b612cb657600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b506001600160a01b038381166000908152600c60209081526040808320805460ff81161560ff1990911681179091556011909252909120805473ffffffffffffffffffffffffffffffffffffffff191692851692909217909155612fed565b6006856009811115612d2357fe5b1415612dec57612d3660176016866132bd565b15612dbc576001600160a01b038416600090815260176020526040812055612d5f6015856133c6565b612dbc57601580546001810182556000919091527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47501805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b506001600160a01b0383166000908152601660205260409020805460ff81161560ff199091168117909155612fed565b6007856009811115612dfa57fe5b1415612ec357612e0d601a6019866132bd565b15612e93576001600160a01b0384166000908152601a6020526040812055612e366018856133c6565b612e9357601880546001810182556000919091527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b506001600160a01b0383166000908152601960205260409020805460ff81161560ff199091168117909155612fed565b6008856009811115612ed157fe5b1415612f9a57612ee4601e601d866132bd565b15612f6a576001600160a01b0384166000908152601e6020526040812055612f0d601c856133c6565b612f6a57601c80546001810182556000919091527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a21101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b506001600160a01b0383166000908152601d60205260409020805460ff81161560ff199091168117909155612fed565b6009856009811115612fa857fe5b1415612fe357506000602055601f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790556001612fed565b6000915050613044565b846009811115612ff957fe5b604080516001600160a01b0387168152831515602082015281517f0dcacb7e392f3d6a216ed2660e3dcfd40b7793d33591db2ba185a6b8e44fc477929181900390910190a260019150505b9392505050565b60225481565b600b8181548110610bdc57600080fd5b60106020526000908152604090205481565b600061304483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613416565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526131359084906134ad565b505050565b600082820183811015613044576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826131a357506000611696565b828202828482816131b057fe5b04146130445760405162461bcd60e51b81526004018080602001828103825260218152602001806137b46021913960400191505060405180910390fd5b600061304483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061355e565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526132b79085906134ad565b50505050565b6001600160a01b03811660009081526020839052604081205460ff166133bc576001600160a01b038216600090815260208590526040902054613347576040805162461bcd60e51b815260206004820152600a60248201527f4d75737420717565756500000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152602085905260409020544310156133b4576040805162461bcd60e51b815260206004820152601160248201527f5175657565206e6f742065787069726564000000000000000000000000000000604482015290519081900360640190fd5b506001613044565b5060009392505050565b6000805b83548110156133bc57826001600160a01b03168482815481106133e957fe5b6000918252602090912001546001600160a01b0316141561340e576001915050611696565b6001016133ca565b600081848411156134a55760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561346a578181015183820152602001613452565b50505050905090810190601f1680156134975780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6060613502826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135c39092919063ffffffff16565b8051909150156131355780806020019051602081101561352157600080fd5b50516131355760405162461bcd60e51b815260040180806020018281038252602a8152602001806137d5602a913960400191505060405180910390fd5b600081836135ad5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561346a578181015183820152602001613452565b5060008385816135b957fe5b0495945050505050565b60606135d284846000856135da565b949350505050565b60606135e585613765565b613636576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061369357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613656565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146136f5576040519150601f19603f3d011682016040523d82523d6000602084013e6136fa565b606091505b5091509150811561370e5791506135d29050565b80511561371e5780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561346a578181015183820152602001613452565b3b15159056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a206d757374206265206e6577206f776e657220746f2070756c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a164736f6c6343000705000a",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x340 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x87D67DFF GT PUSH2 0x1BD JUMPI DUP1 PUSH4 0xCD85641A GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xEBD83CD8 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xFBFD393B GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xFBFD393B EQ PUSH2 0x93F JUMPI DUP1 PUSH4 0xFC7B9C18 EQ PUSH2 0x976 JUMPI DUP1 PUSH4 0xFD1EC010 EQ PUSH2 0x97E JUMPI DUP1 PUSH4 0xFFF9EE87 EQ PUSH2 0x99B JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xEBD83CD8 EQ PUSH2 0x8CD JUMPI DUP1 PUSH4 0xEE4E19A1 EQ PUSH2 0x8F3 JUMPI DUP1 PUSH4 0xFB939588 EQ PUSH2 0x919 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xD796FFB8 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0xD796FFB8 EQ PUSH2 0x84C JUMPI DUP1 PUSH4 0xDF89B344 EQ PUSH2 0x878 JUMPI DUP1 PUSH4 0xE83AFEE3 EQ PUSH2 0x89E JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xCD85641A EQ PUSH2 0x801 JUMPI DUP1 PUSH4 0xD031370B EQ PUSH2 0x827 JUMPI DUP1 PUSH4 0xD07F390F EQ PUSH2 0x844 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xA569E571 GT PUSH2 0x166 JUMPI DUP1 PUSH4 0xB1BD38B0 GT PUSH2 0x140 JUMPI DUP1 PUSH4 0xB1BD38B0 EQ PUSH2 0x766 JUMPI DUP1 PUSH4 0xB5B1D560 EQ PUSH2 0x78C JUMPI DUP1 PUSH4 0xBC157AC1 EQ PUSH2 0x7A9 JUMPI DUP1 PUSH4 0xC24AD43E EQ PUSH2 0x7DB JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xA569E571 EQ PUSH2 0x712 JUMPI DUP1 PUSH4 0xA6C41FEC EQ PUSH2 0x738 JUMPI DUP1 PUSH4 0xAB319C9A EQ PUSH2 0x740 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x8F840DDD GT PUSH2 0x197 JUMPI DUP1 PUSH4 0x8F840DDD EQ PUSH2 0x6BE JUMPI DUP1 PUSH4 0x932CC8C3 EQ PUSH2 0x6C6 JUMPI DUP1 PUSH4 0xA1210A2D EQ PUSH2 0x6EC JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x87D67DFF EQ PUSH2 0x655 JUMPI DUP1 PUSH4 0x8F59C727 EQ PUSH2 0x67B JUMPI DUP1 PUSH4 0x8F6A7B57 EQ PUSH2 0x6A1 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x2789DE37 GT PUSH2 0x28C JUMPI DUP1 PUSH4 0x5A96AC0A GT PUSH2 0x235 JUMPI DUP1 PUSH4 0x6B5E40A7 GT PUSH2 0x20F JUMPI DUP1 PUSH4 0x6B5E40A7 EQ PUSH2 0x5D8 JUMPI DUP1 PUSH4 0x70A0502A EQ PUSH2 0x5F5 JUMPI DUP1 PUSH4 0x788C6C01 EQ PUSH2 0x612 JUMPI DUP1 PUSH4 0x869871BF EQ PUSH2 0x638 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x5A96AC0A EQ PUSH2 0x57E JUMPI DUP1 PUSH4 0x68C31DD5 EQ PUSH2 0x586 JUMPI DUP1 PUSH4 0x6A20DE92 EQ PUSH2 0x5AC JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x46F68EE9 GT PUSH2 0x266 JUMPI DUP1 PUSH4 0x46F68EE9 EQ PUSH2 0x52A JUMPI DUP1 PUSH4 0x481C6A75 EQ PUSH2 0x550 JUMPI DUP1 PUSH4 0x4E83423C EQ PUSH2 0x558 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x2789DE37 EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0x2B7CE500 EQ PUSH2 0x505 JUMPI DUP1 PUSH4 0x437F7912 EQ PUSH2 0x50D JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xF70431F GT PUSH2 0x2EE JUMPI DUP1 PUSH4 0x15079925 GT PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x15079925 EQ PUSH2 0x4A3 JUMPI DUP1 PUSH4 0x1AF4DA70 EQ PUSH2 0x4AB JUMPI DUP1 PUSH4 0x1EEC5A9A EQ PUSH2 0x4D1 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0xF70431F EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x124154CA EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0x12422D23 EQ PUSH2 0x477 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH4 0x94A8651 GT PUSH2 0x31F JUMPI DUP1 PUSH4 0x94A8651 EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0xB0EEE30 EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0xC3513A8 EQ PUSH2 0x418 JUMPI PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH3 0xF714CE EQ PUSH2 0x345 JUMPI DUP1 PUSH4 0x619AFF1 EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0x89208D8 EQ PUSH2 0x3AC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9C1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x371 PUSH2 0xBF6 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCAC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xCBE JUMP JUMPDEST PUSH2 0x3DA PUSH2 0xEA9 JUMP JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xF4D JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x453 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x110B JUMP JUMPDEST PUSH2 0x390 PUSH2 0x144C JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x145B JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1476 JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x169C JUMP JUMPDEST PUSH2 0x371 PUSH2 0x16A2 JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x18A2 JUMP JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18B2 JUMP JUMPDEST PUSH2 0x390 PUSH2 0x19BE JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x56E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x19CD JUMP JUMPDEST PUSH2 0x371 PUSH2 0x19E2 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x59C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A99 JUMP JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1AAE JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1C41 JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x60B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1C51 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1C61 JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x64E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1C73 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x66B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1C83 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x1CBA JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CC0 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CD2 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x728 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CE7 JUMP JUMPDEST PUSH2 0x390 PUSH2 0x1CFC JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D20 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x77C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D32 JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1D44 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x7BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x1D54 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2017 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2029 JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x83D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x203B JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x204B JUMP JUMPDEST PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x206F JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x88E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2226 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x223B JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2698 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x909 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x26AD JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x92F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x26C2 JUMP JUMPDEST PUSH2 0x463 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x40 ADD CALLDATALOAD AND PUSH2 0x26D4 JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x304B JUMP JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x994 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3051 JUMP JUMPDEST PUSH2 0x3DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3061 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xA2E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742061636365707465640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0xA97 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAA3 DUP3 DUP5 PUSH2 0x1476 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x79CC6790 CALLER DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB30 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x21 SLOAD PUSH2 0xB42 SWAP3 POP SWAP1 POP DUP3 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x21 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x93BB8EDD35984706EEE1B92541281F7F62D33C01C5B2EC0929A113603BD21D66 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH2 0xB84 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER DUP6 PUSH2 0x30B5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 PUSH32 0xDF273CB619D95419A9CD0EC88123A0538C85064229BAA6363788F743FFF90DEB SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x12 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC55 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0xEA8258F2D9DDB679928CF34B78CF645B7FEDA9ACC828E4DD82D014EAAE270EBA SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD48 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xD43 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xDAC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xDAC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDB8 DUP4 DUP4 PUSH2 0x1476 JUMP JUMPDEST SWAP1 POP PUSH2 0xDC2 PUSH2 0xEA9 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0xE16 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742072657365727665730000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x21 SLOAD PUSH2 0xE23 SWAP1 DUP3 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x21 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x93BB8EDD35984706EEE1B92541281F7F62D33C01C5B2EC0929A113603BD21D66 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH2 0xE65 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER DUP5 PUSH2 0x30B5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0x2BB2640731848FE9820BA48DBC978C1FC9BBD5F11B948BFAB05B7DEE3378FD80 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF48 PUSH2 0xF3F PUSH1 0x22 SLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF21 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x21 SLOAD SWAP1 PUSH2 0x3073 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xFB1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x79CC679000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x79CC6790 SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1038 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x104C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x106B SWAP3 POP SWAP1 POP DUP3 PUSH2 0x3073 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x22 SLOAD PUSH2 0x1088 SWAP1 DUP3 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x22 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP3 CALLER SWAP3 PUSH32 0xC6D98EECFC9C78AB62C89A82950079B54874749F1F6F24090F7ACC758BC2F309 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x116F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x11DC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742061636365707465640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x11E8 DUP3 DUP5 PUSH2 0x1476 JUMP JUMPDEST PUSH1 0x1F SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1266 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x127C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x129D SWAP1 DUP4 SWAP1 PUSH2 0x3073 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x12F4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x457863656564732064656274206C696D69740000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x130E SWAP1 DUP5 PUSH2 0x313A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x22 SLOAD PUSH2 0x132B SWAP1 DUP5 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x22 SSTORE PUSH1 0x21 SLOAD PUSH2 0x133B SWAP1 DUP5 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x21 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x93BB8EDD35984706EEE1B92541281F7F62D33C01C5B2EC0929A113603BD21D66 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x40 DUP1 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP3 CALLER SWAP3 PUSH32 0x7E1A939BED137A819B5D2979822C67F877689F7A863D5E4CB57CDCA97B2977D6 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x15CC JUMPI PUSH2 0x15C5 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0xA EXP SWAP2 PUSH2 0x15BF SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1586 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x159A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD DUP6 SWAP1 PUSH1 0xFF AND PUSH1 0xA EXP PUSH2 0x3194 JUMP JUMPDEST SWAP1 PUSH2 0x31ED JUMP JUMPDEST SWAP1 POP PUSH2 0x1696 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1696 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD PUSH32 0x4249719F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x24 DUP5 ADD DUP8 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP4 AND SWAP3 PUSH4 0x4249719F SWAP3 PUSH1 0x44 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x167B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1701 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x17F2 JUMPI PUSH2 0x17E8 PUSH2 0x17E1 PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1722 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP6 SWAP1 DUP2 LT PUSH2 0x1748 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 PUSH4 0x70A08231 SWAP3 PUSH1 0x24 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x17DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x1476 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x313A JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1705 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0x1843 JUMPI PUSH2 0x1839 PUSH2 0x17E1 PUSH1 0xB DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1813 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP6 SWAP1 DUP2 LT PUSH2 0x1748 JUMPI INVALID JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x17F6 JUMP JUMPDEST POP PUSH1 0x21 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 SWAP1 PUSH32 0x93BB8EDD35984706EEE1B92541281F7F62D33C01C5B2EC0929A113603BD21D66 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x40 MLOAD DUP2 SWAP1 PUSH32 0xEC691F09F6924B27932253F85CAF99BACC30360CC0E50A1CC4D2ACC246014466 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x8 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1911 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1956 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x376C PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0xEA8258F2D9DDB679928CF34B78CF645B7FEDA9ACC828E4DD82D014EAAE270EBA SWAP2 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1A2B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3792 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP2 AND SWAP2 PUSH32 0xAA151555690C956FC3EA32F106BB9F119B5237A061EAA8557CFF3E51E3792C8D SWAP2 LOG3 PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1B12 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1B1A PUSH2 0xEA9 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x1B6E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742072657365727665730000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40C10F19 DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BF9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP4 POP CALLER SWAP3 POP PUSH32 0xFA8CCAB40E7DA8146C2304CD0950334FD30A6BA093ABE86261AA13911FED849C SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x5 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x15 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x18 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xE DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x21 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1C DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 PUSH2 0x1D93 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x1DE4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742061636365707465640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1DF9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER ADDRESS DUP8 PUSH2 0x322F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1E83 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1E7E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1EE7 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1EE7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1EF3 DUP5 DUP7 PUSH2 0x1476 JUMP JUMPDEST SWAP1 POP PUSH2 0x1EFF DUP2 DUP5 PUSH2 0x3073 JUMP JUMPDEST SWAP2 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40C10F19 CALLER DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F8C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x21 SLOAD PUSH2 0x1F9E SWAP3 POP SWAP1 POP DUP3 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x21 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x93BB8EDD35984706EEE1B92541281F7F62D33C01C5B2EC0929A113603BD21D66 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP3 PUSH32 0x90890809C654F11D6E72A28FA60149770A0D11EC6C92319D6CEB2BB0A4EA1A15 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x20D3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617070726F7665640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2140 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742061636365707465640000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2155 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER ADDRESS DUP6 PUSH2 0x322F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2161 DUP3 DUP5 PUSH2 0x1476 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x217E SWAP1 DUP3 PUSH2 0x3073 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x22 SLOAD PUSH2 0x219B SWAP1 DUP3 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x22 SSTORE PUSH1 0x21 SLOAD PUSH2 0x21AB SWAP1 DUP3 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x21 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x93BB8EDD35984706EEE1B92541281F7F62D33C01C5B2EC0929A113603BD21D66 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 CALLER SWAP3 PUSH32 0xC6D98EECFC9C78AB62C89A82950079B54874749F1F6F24090F7ACC758BC2F309 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x229B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x22AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x22BC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x230A JUMPI PUSH2 0x22EC NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2318 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2366 JUMPI PUSH2 0x2348 NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x2 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2374 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x23C2 JUMPI PUSH2 0x23A4 NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x3 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x23D0 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2429 JUMPI PUSH2 0x240B PUSH2 0x2404 PUSH32 0x0 PUSH1 0x2 PUSH2 0x3194 JUMP JUMPDEST NUMBER SWAP1 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x4 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2437 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2485 JUMPI PUSH2 0x2467 NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x5 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2493 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x24E1 JUMPI PUSH2 0x24C3 NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x6 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x24EF JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2541 JUMPI PUSH2 0x2523 PUSH2 0x2404 PUSH32 0x0 PUSH1 0x2 PUSH2 0x3194 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x7 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x254F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x259D JUMPI PUSH2 0x257F NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x8 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x25AB JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x25F9 JUMPI PUSH2 0x25DB NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x9 DUP4 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2607 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x263F JUMPI PUSH2 0x2637 NUMBER PUSH32 0x0 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x20 SSTORE PUSH2 0x2647 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1696 JUMP JUMPDEST DUP3 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2653 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE SWAP1 MLOAD PUSH32 0xE4F2C4B5BC209D509BC3D49348C787FEFADC66A79351B470599AC0F5BE52EAF SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2734 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2756 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x281F JUMPI PUSH2 0x2769 PUSH1 0x7 PUSH1 0x6 DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x27EF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2792 PUSH1 0x5 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x27EF JUMPI PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x282D JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x28F6 JUMPI PUSH2 0x2840 PUSH1 0xA PUSH1 0x9 DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x28C6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2869 PUSH1 0x8 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x28C6 JUMPI PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x2 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2904 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x29CD JUMPI PUSH2 0x2917 PUSH1 0x4 PUSH1 0x3 DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x299D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2940 PUSH1 0x2 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x299D JUMPI PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x3 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x29DB JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2AEE JUMPI PUSH2 0x29EE PUSH1 0x14 PUSH1 0x13 DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x2ABE JUMPI PUSH1 0x12 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH32 0xBB8A6A4669BA250D26CD7A459ECA9D215F8307E33AEBE50379BC5A3617EC3444 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2A61 SWAP1 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x2ABE JUMPI PUSH1 0x12 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xBB8A6A4669BA250D26CD7A459ECA9D215F8307E33AEBE50379BC5A3617EC3444 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x4 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2AFC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2C0F JUMPI PUSH2 0x2B0F PUSH1 0x10 PUSH1 0xF DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x2BDF JUMPI PUSH1 0xE DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2B82 SWAP1 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x2BDF JUMPI PUSH1 0xE DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x5 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2C1D JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2D15 JUMPI PUSH2 0x2C30 PUSH1 0xD PUSH1 0xC DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x2CB6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2C59 PUSH1 0xB DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x2CB6 JUMPI PUSH1 0xB DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x11 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP3 DUP6 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x6 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2D23 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2DEC JUMPI PUSH2 0x2D36 PUSH1 0x17 PUSH1 0x16 DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x2DBC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2D5F PUSH1 0x15 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x2DBC JUMPI PUSH1 0x15 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x55F448FDEA98C4D29EB340757EF0A66CD03DBB9538908A6A81D96026B71EC475 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x7 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2DFA JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2EC3 JUMPI PUSH2 0x2E0D PUSH1 0x1A PUSH1 0x19 DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x2E93 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2E36 PUSH1 0x18 DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x2E93 JUMPI PUSH1 0x18 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xB13D2D76D1F4B7BE834882E410B3E3A8AFAF69F83600AE24DB354391D2378D2E ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x8 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2ED1 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2F9A JUMPI PUSH2 0x2EE4 PUSH1 0x1E PUSH1 0x1D DUP7 PUSH2 0x32BD JUMP JUMPDEST ISZERO PUSH2 0x2F6A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2F0D PUSH1 0x1C DUP6 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x2F6A JUMPI PUSH1 0x1C DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xE4562A10381DEC21B205ED72637E6B1B523BDD0E4D4D50AF5CD23DD4500A211 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x9 DUP6 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2FA8 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2FE3 JUMPI POP PUSH1 0x0 PUSH1 0x20 SSTORE PUSH1 0x1F DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x3044 JUMP JUMPDEST DUP5 PUSH1 0x9 DUP2 GT ISZERO PUSH2 0x2FF9 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP2 MSTORE DUP4 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD PUSH32 0xDCACB7E392F3D6A216ED2660E3DCFD40B7793D33591DB2BA185A6B8E44FC477 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x22 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3044 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x3416 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x3135 SWAP1 DUP5 SWAP1 PUSH2 0x34AD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x3044 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x31A3 JUMPI POP PUSH1 0x0 PUSH2 0x1696 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x31B0 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3044 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x37B4 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3044 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH2 0x355E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x32B7 SWAP1 DUP6 SWAP1 PUSH2 0x34AD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x33BC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3347 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D75737420717565756500000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD NUMBER LT ISZERO PUSH2 0x33B4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5175657565206E6F742065787069726564000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH2 0x3044 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP4 SLOAD DUP2 LT ISZERO PUSH2 0x33BC JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x33E9 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x340E JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x1696 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x33CA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x34A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x346A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3452 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x3497 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3502 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x35C3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3135 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x3135 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x37D5 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x35AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP4 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 SWAP3 DUP4 SWAP3 PUSH1 0x44 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0x346A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3452 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x35B9 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x35D2 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x35DA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x35E5 DUP6 PUSH2 0x3765 JUMP JUMPDEST PUSH2 0x3636 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x3693 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x3656 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x36F5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x36FA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x370E JUMPI SWAP2 POP PUSH2 0x35D2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x371E JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP7 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP7 MLOAD DUP8 SWAP4 SWAP2 SWAP3 DUP4 SWAP3 PUSH1 0x44 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0x346A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3452 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F20616464726573734F776E61626C653A206D757374206265 KECCAK256 PUSH15 0x6577206F776E657220746F2070756C PUSH13 0x536166654D6174683A206D756C PUSH21 0x69706C69636174696F6E206F766572666C6F775361 PUSH7 0x6545524332303A KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A164736F6C6343000705000A0000 ",
              "sourceMapi;:::-;;8936:32;;;;;;;;;;;;;;;;-1:-1:-1;8936:32:0;;:::i;:::-;;;;-1:-1:-1;;;;;8936:32:0;;;;;;;;;;;;;;4012:156;;;:::i;9637:47::-;;;;;;;;;;;;;;;;-1:-1:-1;9637:47:0;-1:-1:-1;;;;;9637:47:0;;:::i;:::-;;;;;;;;;;;;;;;;14770:610;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;14770:610:0;;;;;;;;:::i;15895:144::-;;;:::i;14265:367::-;;;;;;;;;;;;;;;;-1:-1:-1;14265:367:0;;:::i;7975:52::-;;;;;;;;;;;;;;;;-1:-1:-1;7975:52:0;-1:-1:-1;;;;;7975:52:0;;:::i;:::-;;;;;;;;;;;;;;;;;;12523:840;;;;;;;;;;;;;;;;-1:-1:-1;12523:840:0;;;;;;-1:-1:-1;;;;;12523:840:0;;:::i;9928:19::-;;;:::i;8839:51::-;;;;;;;;;;;;;;;;-1:-1:-1;8839:51:0;-1:-1:-1;;;;;8839:51:0;;:::i;16994:451::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;16994:451:0;;;;;;;;:::i;9953:21::-;;;:::i;16186:653::-;;;:::i;8125:32::-;;;;;;;;;;;;;;;;-1:-1:-1;8125:32:0;;:::i;4174:257::-;;;;;;;;;;;;;;;;-1:-1:-1;4174:257:0;-1:-1:-1;;;;;4174:257:0;;:::i;3794:88::-;;;:::i;9784:49::-;;;;;;;;;;;;;;;;-1:-1:-1;9784:49:0;-1:-1:-1;;;;;9784:49:0;;:::i;4441:217::-;;;:::i;7737:48::-;;;;;;;;;;;;;;;;-1:-1:-1;7737:48:0;-1:-1:-1;;;;;7737:48:0;;:::i;15456:336::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;15456:336:0;;;;;;;;:::i;7879:34::-;;;;;;;;;;;;;;;;-1:-1:-1;7879:34:0;;:::i;9176:::-;;;;;;;;;;;;;;;;-1:-1:-1;9176:34:0;;:::i;7791:51::-;;;;;;;;;;;;;;;;-1:-1:-1;7791:51:0;-1:-1:-1;;;;;7791:51:0;;:::i;9422:24::-;;;;;;;;;;;;;;;;-1:-1:-1;9422:24:0;;:::i;8219:50::-;;;;;;;;;;;;;;;;-1:-1:-1;8219:50:0;-1:-1:-1;;;;;8219:50:0;;:::i;8497:53::-;;;;;;;;;;;;;;;;-1:-1:-1;8497:53:0;-1:-1:-1;;;;;8497:53:0;;:::i;8587:36::-;;;;;;;;;;;;;;;;-1:-1:-1;8587:36:0;;:::i;10018:25::-;;;:::i;8033:55::-;;;;;;;;;;;;;;;;-1:-1:-1;8033:55:0;-1:-1:-1;;;;;8033:55:0;;:::i;8685:54::-;;;;;;;;;;;;;;;;-1:-1:-1;8685:54:0;-1:-1:-1;;;;;8685:54:0;;:::i;8441:50::-;;;;;;;;;;;;;;;;-1:-1:-1;8441:50:0;-1:-1:-1;;;;;8441:50:0;;:::i;7580:28::-;;;:::i;9330:55::-;;;;;;;;;;;;;;;;-1:-1:-1;9330:55:0;-1:-1:-1;;;;;9330:55:0;;:::i;9086:53::-;;;;;;;;;;;;;;;;-1:-1:-1;9086:53:0;-1:-1:-1;;;;;9086:53:0;;:::i;9691:31::-;;;;;;;;;;;;;;;;-1:-1:-1;9691:31:0;;:::i;10817:856::-;;;;;;;;;;;;;;;;-1:-1:-1;10817:856:0;;;-1:-1:-1;;;;;10817:856:0;;;;;;;;;;:::i;8275:53::-;;;;;;;;;;;;;;;;-1:-1:-1;8275:53:0;-1:-1:-1;;;;;8275:53:0;;:::i;9556:45::-;;;;;;;;;;;;;;;;-1:-1:-1;9556:45:0;-1:-1:-1;;;;;9556:45:0;;:::i;7663:30::-;;;;;;;;;;;;;;;;-1:-1:-1;7663:30:0;;:::i;7614:42::-;;;:::i;13523:617::-;;;;;;;;;;;;;;;;-1:-1:-1;13523:617:0;;;;;;-1:-1:-1;;;;;13523:617:0;;:::i;9272:52::-;;;;;;;;;;;;;;;;-1:-1:-1;9272:52:0;-1:-1:-1;;;;;9272:52:0;;:::i;17613:1759::-;;;;;;;;;;;;;;;;-1:-1:-1;17613:1759:0;;;;;;;;-1:-1:-1;;;;;17613:1759:0;;:::i;9030:50::-;;;;;;;;;;;;;;;;-1:-1:-1;9030:50:0;-1:-1:-1;;;;;9030:50:0;;:::i;9508:42::-;;;;;;;;;;;;;;;;-1:-1:-1;9508:42:0;-1:-1:-1;;;;;9508:42:0;;:::i;9839:52::-;;;;;;;;;;;;;;;;-1:-1:-1;9839:52:0;-1:-1:-1;;;;;9839:52:0;;:::i;19573:4728::-;;;;;;;;;;;;;;;;-1:-1:-1;19573:4728:0;;;;;-1:-1:-1;;;;;19573:4728:0;;;;;;;;;;;;:::i;10082:21::-;;;:::i;8365:32::-;;;;;;;;;;;;;;;;-1:-1:-1;8365:32:0;;:::i;8745:57::-;;;;;;;;;;;;;;;;-1:-1:-1;8745:57:0;-1:-1:-1;;;;;8745:57:0;;:::i;11817:568::-;-1:-1:-1;;;;;11895:24:0;;;;;;:14;:24;;;;;;;;11886:51;;;;;-1:-1:-1;;;11886:51:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;12019:10;12001:30;;;;:16;:30;;;;;;;;:38;;:30;:38;11992:65;;;;;-1:-1:-1;;;11992:65:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;12068:10;12081:26;12090:6;12098:7;12081;:26::i;:::-;12068:39;;12128:3;-1:-1:-1;;;;;12117:25:0;;12144:10;12156:5;12117:46;;;;;;;;;;;;;-1:-1:-1;;;;;12117:46:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12190:13:0;;:26;;-1:-1:-1;12190:13:0;-1:-1:-1;12209:5:0;12190:17;:26::i;:::-;12174:13;:42;;;12231:32;;;;;;;12274:52;-1:-1:-1;;;;;12274:29:0;;12305:10;12317:7;12274:29;:52::i;:::-;12342:36;;;;;;;;;;;;;;-1:-1:-1;;;;;12342:36:0;;;;;;;;;;;11817:568;;;:::o;8936:32::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8936:32:0;;-1:-1:-1;8936:32:0;:::o;4012:156::-;3930:6;;-1:-1:-1;;;;;3930:6:0;3940:10;3930:20;3921:67;;;;;-1:-1:-1;;;3921:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4128:1:::1;4112:6:::0;;4095:37:::1;::::0;-1:-1:-1;;;;;4112:6:0;;::::1;::::0;4095:37:::1;::::0;4128:1;;4095:37:::1;4159:1;4142:19:::0;;-1:-1:-1;;4142:19:0::1;::::0;;4012:156::o;9637:47::-;;;;;;;;;;;;;:::o;14770:610::-;-1:-1:-1;;;;;14841:26:0;;;;;;:16;:26;;;;;;;;14837:205;;;14913:10;14893:32;;;;:18;:32;;;;;;;;14884:59;;;;;-1:-1:-1;;;14884:59:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;14837:205;;;15001:10;14983:30;;;;:16;:30;;;;;;;;14974:57;;;;;-1:-1:-1;;;14974:57:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;15052:10;15065:24;15073:6;15081:7;15065;:24::i;:::-;15052:37;;15117:16;:14;:16::i;:::-;15108:5;:25;;15099:61;;;;;-1:-1:-1;;;15099:61:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;15187:13;;:26;;15206:5;15187:17;:26::i;:::-;15171:13;:42;;;15228:32;;;;;;;15271:52;-1:-1:-1;;;;;15271:29:0;;15302:10;15314:7;15271:29;:52::i;:::-;15339:34;;;;;;;;-1:-1:-1;;;;;15339:34:0;;;;;;;;;;;;;14770:610;;;:::o;15895:144::-;15943:4;15967:65;15986:44;16019:9;;15994:3;-1:-1:-1;;;;;15986:25:0;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15986:27:0;;:31;:44::i;:::-;15967:13;;;:17;:65::i;:::-;15960:72;;15895:144;:::o;14265:367::-;14345:10;14335:22;;;;:8;:22;;;;;;;;14326:49;;;;;-1:-1:-1;;;14326:49:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;14386:48;;;;;;14413:10;14386:48;;;;;;;;;;;;-1:-1:-1;;;;;14397:3:0;14386:25;;;;:48;;;;;-1:-1:-1;;14386:48:0;;;;;;;-1:-1:-1;14386:25:0;:48;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;14490:10:0;14475:27;;;;:13;:27;;;;;;:42;;-1:-1:-1;14475:27:0;-1:-1:-1;14508:7:0;14475:31;:42::i;:::-;14460:10;14445:27;;;;:13;:27;;;;;:72;14539:9;;:24;;14554:7;14539:13;:24::i;:::-;14527:9;:36;14579:46;;;;;;;;;;;;;;-1:-1:-1;;;;;14602:3:0;14579:46;;14590:10;;14579:46;;;;;;;;;;;14265:367;:::o;7975:52::-;;;;;;;;;;;;;;;:::o;12523:840::-;12612:10;12602:22;;;;:8;:22;;;;;;;;12593:49;;;;;-1:-1:-1;;;12593:49:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;12661:24:0;;;;;;:14;:24;;;;;;;;12652:51;;;;;-1:-1:-1;;;12652:51:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;12714:10;12727:26;12736:6;12744:7;12727;:26::i;:::-;12791:4;;12783:38;;;;;;12809:10;12783:38;;;;;;12714:39;;-1:-1:-1;12764:16:0;;-1:-1:-1;;;;;12791:4:0;;;;12783:24;;:38;;;;;;;;;;;;;;;12791:4;12783:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12783:38:0;12921:10;12868:18;12906:27;;;:13;12783:38;12906:27;;;;;12783:38;;-1:-1:-1;12868:18:0;12889:46;;12783:38;;12889:15;:46::i;:::-;12868:67;;12963:13;12954:5;:22;;12945:55;;;;;-1:-1:-1;;;12945:55:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;13056:10;13041:27;;;;:13;:27;;;;;;:40;;13074:5;13041:31;:40::i;:::-;13026:10;13011:27;;;;:13;:27;;;;;:70;13103:9;;:22;;13118:5;13103:13;:22::i;:::-;13091:9;:34;13152:13;;:26;;13171:5;13152:17;:26::i;:::-;13136:13;:42;;;13193:32;;;;;;;13236:48;;;;;;13263:10;13236:48;;;;;;;;;;;;-1:-1:-1;;;;;13236:25:0;;;;;:48;;;;;;;;;;;;;;-1:-1:-1;13236:25:0;:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;13308:48:0;;;;;;13236;13308;;;;;;;-1:-1:-1;;;;;13308:48:0;;;13320:10;;13308:48;;;;;;;;;;;12523:840;;;;;:::o;9928:19::-;;;-1:-1:-1;;;;;9928:19:0;;:::o;8839:51::-;;;;;;;;;;;;-1:-1:-1;;;;;8839:51:0;;:::o;16994:451::-;-1:-1:-1;;;;;17094:24:0;;17065:11;17094:24;;;:14;:24;;;;;;;;17089:350;;;17196:86;17261:6;-1:-1:-1;;;;;17253:25:0;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17253:27:0;17215:24;;;;;;;;17247:33;;;;:2;:33;;17196:45;;-1:-1:-1;;;;;17223:3:0;17215:22;;;;:24;;;;;17253:27;;17215:24;;;;;;;;:22;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17215:24:0;17196:7;;17209:30;;:2;:30;17196:11;:45::i;:::-;:49;;:86::i;:::-;17187:95;;17089:350;;;-1:-1:-1;;;;;17304:26:0;;;;;;:16;:26;;;;;;;;17299:140;;;-1:-1:-1;;;;;17373:24:0;;;;;;;:14;:24;;;;;;;;;;17356:72;;;;;;;;;;;;;;;;;;;;17373:24;;;;;17356:53;;:72;;;;;;;;;;;17373:24;17356:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17356:72:0;;-1:-1:-1;17299:140:0;16994:451;;;;:::o;9953:21::-;;;;:::o;16186:653::-;3930:6;;-1:-1:-1;;;;;3930:6:0;3940:10;3930:20;3921:67;;;;;-1:-1:-1;;;3921:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16244:13:::1;::::0;16267:217:::1;16288:13;:20:::0;16284:24;::::1;16267:217;;;16341:132;16373:86;16382:13;16397:1;16382:18;;;;;;;;;::::0;;;::::1;::::0;;;::::1;::::0;16410:13:::1;:18:::0;;-1:-1:-1;;;;;16382:18:0;;::::1;::::0;16425:1;;16410:18;::::1;;;;;;::::0;;;::::1;::::0;;;;::::1;::::0;16402:55:::1;::::0;;;;;16450:4:::1;16402:55;::::0;::::1;::::0;;;-1:-1:-1;;;;;16410:18:0;;::::1;::::0;16402:38:::1;::::0;:55;;;;;;;;;;16410:18;16402:55;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;16402:55:0;16373:7:::1;:86::i;:::-;16341:8:::0;;:12:::1;:132::i;:::-;16330:143:::0;-1:-1:-1;16310:3:0::1;;16267:217;;;;16498:6;16493:222;16514:15;:22:::0;16510:26;::::1;16493:222;;;16569:135;16600:90;16609:15;16626:1;16609:20;;;;;;;;;::::0;;;::::1;::::0;;;::::1;::::0;16639:15:::1;:20:::0;;-1:-1:-1;;;;;16609:20:0;;::::1;::::0;16656:1;;16639:20;::::1;;;;16569:135;16558:146:::0;-1:-1:-1;16538:3:0::1;;16493:222;;;-1:-1:-1::0;16724:13:0::1;:24:::0;;;16763:27:::1;::::0;16740:8;;16763:27:::1;::::0;;;::::1;16805;::::0;16822:8;;16805:27:::1;::::0;;;::::1;3998:1;16186:653::o:0;8125:32::-;;;;;;;;;;;;4174:257;3930:6;;-1:-1:-1;;;;;3930:6:0;3940:10;3930:20;3921:67;;;;;-1:-1:-1;;;3921:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4276:23:0;::::1;4267:75;;;;-1:-1:-1::0;;;4267:75:0::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4374:6;::::0;;4357:36:::1;::::0;-1:-1:-1;;;;;4357:36:0;;::::1;::::0;4374:6;::::1;::::0;4357:36:::1;::::0;::::1;4403:9;:21:::0;;-1:-1:-1;;4403:21:0::1;-1:-1:-1::0;;;;;4403:21:0;;;::::1;::::0;;;::::1;::::0;;4174:257::o;3794:88::-;3843:7;3869:6;-1:-1:-1;;;;;3869:6:0;3794:88;:::o;9784:49::-;;;;;;;;;;;;;;;:::o;4441:217::-;4524:9;;-1:-1:-1;;;;;4524:9:0;4510:10;:23;4501:71;;;;-1:-1:-1;;;4501:71:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4612:9;;;4604:6;;4587:36;;-1:-1:-1;;;;;4612:9:0;;;;4604:6;;;;4587:36;;;4642:9;;;4633:18;;-1:-1:-1;;4633:18:0;-1:-1:-1;;;;;4642:9:0;;;4633:18;;;;;;4441:217::o;7737:48::-;;;;;;;;;;;;;;;:::o;15456:336::-;15558:10;15541:29;;;;:15;:29;;;;;;;;15532:56;;;;;-1:-1:-1;;;15532:56:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;15618:16;:14;:16::i;:::-;15607:7;:27;;15598:63;;;;;-1:-1:-1;;;15598:63:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;15688:3;-1:-1:-1;;;;;15672:26:0;;15700:10;15712:7;15672:49;;;;;;;;;;;;;-1:-1:-1;;;;;15672:49:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;15737:48:0;;;;;;;;-1:-1:-1;;;;;15737:48:0;;;-1:-1:-1;15752:10:0;;-1:-1:-1;15737:48:0;;;;;;;;;15456:336;;:::o;7879:34::-;;;;;;;;;;;;9176;;;;;;;;;;;;7791:51;;;;;;;;;;;;;:::o;9422:24::-;;;;;;;;;;;;8219:50;;;;;;;;;;;;;;;:::o;8497:53::-;;;;;;;;;;;;;:::o;8587:36::-;;;;;;;;;;;;10018:25;;;;:::o;8033:55::-;;;;;;;;;;;;;:::o;8685:54::-;;;;;;;;;;;;;;;:::o;8441:50::-;;;;;;;;;;;;;;;:::o;7580:28::-;;;:::o;9330:55::-;;;;;;;;;;;;;:::o;9086:53::-;;;;;;;;;;;;;:::o;9691:31::-;;;;;;;;;;;;10817:856;-1:-1:-1;;;;;10931:24:0;;10899:10;10931:24;;;:14;:24;;;;;;;;;:54;;-1:-1:-1;;;;;;10959:26:0;;;;;;:16;:26;;;;;;;;10931:54;10922:81;;;;;-1:-1:-1;;;10922:81:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;11013:71;-1:-1:-1;;;;;11013:33:0;;11048:10;11068:4;11075:7;11013:33;:71::i;:::-;-1:-1:-1;;;;;11100:24:0;;;;;;:14;:24;;;;;;;;11095:208;;;11170:10;11150:32;;;;:18;:32;;;;;;;;11141:59;;;;;-1:-1:-1;;;11141:59:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;11095:208;;;11262:10;11240:34;;;;:20;:34;;;;;;;;11231:61;;;;;-1:-1:-1;;;11231:61:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;11313:10;11326:24;11334:6;11342:7;11326;:24::i;:::-;11313:37;-1:-1:-1;11440:20:0;11313:37;11451:7;11440:9;:20::i;:::-;11432:28;;11486:3;-1:-1:-1;;;;;11470:26:0;;11498:10;11510:5;11470:47;;;;;;;;;;;;;-1:-1:-1;;;;;11470:47:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11544:13:0;;:26;;-1:-1:-1;11544:13:0;-1:-1:-1;11563:5:0;11544:17;:26::i;:::-;11528:13;:42;;;11585:32;;;;;;;11633:33;;;;;;;;;;;;;;-1:-1:-1;;;;;11633:33:0;;;;;;;;;;;10817:856;;;;;;:::o;8275:53::-;;;;;;;;;;;;;:::o;9556:45::-;;;;;;;;;;;;;:::o;7663:30::-;;;;;;;;;;;;7614:42;;;:::o;13523:617::-;13623:10;13613:22;;;;:8;:22;;;;;;;;13604:49;;;;;-1:-1:-1;;;13604:49:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;13672:24:0;;;;;;:14;:24;;;;;;;;13663:51;;;;;-1:-1:-1;;;13663:51:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;13725:71;-1:-1:-1;;;;;13725:33:0;;13760:10;13780:4;13787:7;13725:33;:71::i;:::-;13807:10;13820:26;13829:6;13837:7;13820;:26::i;:::-;13901:10;13886:27;;;;:13;:27;;;;;;13807:39;;-1:-1:-1;13886:40:0;;13807:39;13886:31;:40::i;:::-;13871:10;13856:27;;;;:13;:27;;;;;:70;13948:9;;:22;;13963:5;13948:13;:22::i;:::-;13936:9;:34;13997:13;;:26;;14016:5;13997:17;:26::i;:::-;13981:13;:42;;;14038:32;;;;;;;14086:47;;;;;;;;;;;;;;-1:-1:-1;;;;;14086:47:0;;;14097:10;;14086:47;;;;;;;;;;;13523:617;;;:::o;9272:52::-;;;;;;;;;;;;;;;:::o;17613:1759::-;17701:4;3930:6;;-1:-1:-1;;;;;3930:6:0;3940:10;3930:20;3921:67;;;;;-1:-1:-1;;;3921:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;17727:22:0;::::1;17718:33;;;::::0;::::1;;17779:25;17766:9;:38;;;;;;;;;17761:1532;;;17862:40;:12;17880:20;17862:16;:40::i;:::-;-1:-1:-1::0;;;;;17826:33:0;::::1;;::::0;;;:21:::1;:33;::::0;;;;:76;17761:1532:::1;;;17937:23;17924:9;:36;;;;;;;;;17919:1374;;;18016:40;:12;18034:20;18016:16;:40::i;:::-;-1:-1:-1::0;;;;;17982:31:0;::::1;;::::0;;;:19:::1;:31;::::0;;;;:74;17919:1374:::1;;;18091:21;18078:9;:34;;;;;;;;;18073:1220;;;18166:40;:12;18184:20;18166:16;:40::i;:::-;-1:-1:-1::0;;;;;18134:29:0;::::1;;::::0;;;:17:::1;:29;::::0;;;;:72;18073:1220:::1;;;18241:23;18228:9;:36;;;;;;;;;18223:1070;;;18320:49;18338:29;:20;18364:1;18338:24;:29::i;:::-;18320:12;::::0;:16:::1;:49::i;:::-;-1:-1:-1::0;;;;;18286:31:0;::::1;;::::0;;;:19:::1;:31;::::0;;;;:83;18223:1070:::1;;;18404:27;18391:9;:40;;;;;;;;;18386:907;;;18491:40;:12;18509:20;18491:16;:40::i;:::-;-1:-1:-1::0;;;;;18453:35:0;::::1;;::::0;;;:23:::1;:35;::::0;;;;:78;18386:907:::1;;;18566:23;18553:9;:36;;;;;;;;;18548:745;;;18645:40;:12;18663:20;18645:16;:40::i;:::-;-1:-1:-1::0;;;;;18611:31:0;::::1;;::::0;;;:19:::1;:31;::::0;;;;:74;18548:745:::1;;;18720:25;18707:9;:38;;;;;;;;;18702:591;;;18803:49;18821:29;:20;18847:1;18821:24;:29::i;18803:49::-;-1:-1:-1::0;;;;;18767:33:0;::::1;;::::0;;;:21:::1;:33;::::0;;;;:85;18702:591:::1;;;18887:15;18874:9;:28;;;;;;;;;18869:424;;;18950:40;:12;18968:20;18950:16;:40::i;:::-;-1:-1:-1::0;;;;;18924:23:0;::::1;;::::0;;;:11:::1;:23;::::0;;;;:66;18869:424:::1;;;19025:22;19012:9;:35;;;;;;;;;19007:286;;;19102:40;:12;19120:20;19102:16;:40::i;:::-;-1:-1:-1::0;;;;;19069:30:0;::::1;;::::0;;;:18:::1;:30;::::0;;;;:73;19007:286:::1;;;19177:13;19164:9;:26;;;;;;;;;19159:134;;;19224:40;:12;19242:20;19224:16;:40::i;:::-;19212:9;:52:::0;19159:134:::1;;;-1:-1:-1::0;19288:5:0::1;19281:12;;19159:134;19323:9;19309:35;;;;;;;;;::::0;;-1:-1:-1;;;;;19309:35:0;::::1;::::0;;;;::::1;::::0;;;;::::1;::::0;;::::1;-1:-1:-1::0;19361:4:0::1;17613:1759:::0;;;;:::o;9030:50::-;;;;;;;;;;;;;;;:::o;9508:42::-;;;;;;;;;;;;;;;:::o;9839:52::-;;;;;;;;;;;;;:::o;19573:4728::-;19683:4;3930:6;;-1:-1:-1;;;;;3930:6:0;3940:10;3930:20;3921:67;;;;;-1:-1:-1;;;3921:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;19709:22:0;::::1;19700:33;;;::::0;::::1;;19743:11;::::0;19769:9:::1;:38;;;;;;;;;19764:4447;;;19834:67;19848:21;19871:18;19891:8;19834:12;:67::i;:::-;19829:288;;;-1:-1:-1::0;;;;;19922:33:0;::::1;19958:1;19922:33:::0;;;:21:::1;:33;::::0;;;;:37;19982:43:::1;19996:17;19945:8:::0;19982:12:::1;:43::i;:::-;19977:126;;20050:17;:34:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;20050:34:0;;;;;::::1;::::0;;-1:-1:-1;;20050:34:0::1;-1:-1:-1::0;;;;;20050:34:0;::::1;;::::0;;19977:126:::1;-1:-1:-1::0;;;;;;20140:30:0;::::1;;::::0;;;:18:::1;:30;::::0;;;;;;::::1;::::0;::::1;20139:31;-1:-1:-1::0;;20184:39:0;;::::1;::::0;::::1;::::0;;;19764:4447:::1;;;20271:23;20258:9;:36;;;;;;;;;20253:3958;;;20321:63;20335:19;20356:16;20374:8;20321:12;:63::i;:::-;20316:278;;;-1:-1:-1::0;;;;;20405:31:0;::::1;20439:1;20405:31:::0;;;:19:::1;:31;::::0;;;;:35;20463:41:::1;20477:15;20426:8:::0;20463:12:::1;:41::i;:::-;20458:122;;20529:15;:32:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;20529:32:0;;;;;::::1;::::0;;-1:-1:-1;;20529:32:0::1;-1:-1:-1::0;;;;;20529:32:0;::::1;;::::0;;20458:122:::1;-1:-1:-1::0;;;;;;20617:28:0;::::1;;::::0;;;:16:::1;:28;::::0;;;;;;::::1;::::0;::::1;20616:29;-1:-1:-1::0;;20659:37:0;;::::1;::::0;::::1;::::0;;;20253:3958:::1;;;20732:21;20719:9;:34;;;;;;;;;20714:3497;;;20780:59;20794:17;20813:14;20829:8;20780:12;:59::i;:::-;20775:268;;;-1:-1:-1::0;;;;;20860:29:0;::::1;20892:1;20860:29:::0;;;:17:::1;:29;::::0;;;;:33;20916:39:::1;20930:13;20879:8:::0;20916:12:::1;:39::i;:::-;20911:118;;20980:13;:30:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;20980:30:0;;;;;::::1;::::0;;-1:-1:-1;;20980:30:0::1;-1:-1:-1::0;;;;;20980:30:0;::::1;;::::0;;20911:118:::1;-1:-1:-1::0;;;;;;21066:26:0;::::1;;::::0;;;:14:::1;:26;::::0;;;;;;::::1;::::0;::::1;21065:27;-1:-1:-1::0;;21106:35:0;;::::1;::::0;::::1;::::0;;;20714:3497:::1;;;21177:23;21164:9;:36;;;;;;;;;21159:3052;;;21227:63;21241:19;21262:16;21280:8;21227:12;:63::i;:::-;21222:328;;;21311:15;:32:::0;;::::1;::::0;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;21311:32:0::1;-1:-1:-1::0;;;;;21311:32:0;::::1;::::0;;::::1;::::0;;;-1:-1:-1;21361:31:0;;;:19:::1;21311:32;21361:31:::0;;;;:35;21419:41:::1;::::0;21311:32;21419:12:::1;:41::i;:::-;21414:122;;21485:15;:32:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;21485:32:0;;;;;::::1;::::0;;-1:-1:-1;;21485:32:0::1;-1:-1:-1::0;;;;;21485:32:0;::::1;;::::0;;21414:122:::1;-1:-1:-1::0;;;;;;21573:28:0;::::1;;::::0;;;:16:::1;:28;::::0;;;;;;::::1;::::0;::::1;21572:29;-1:-1:-1::0;;21615:37:0;;::::1;::::0;::::1;::::0;;;21159:3052:::1;;;21688:27;21675:9;:40;;;;;;;;;21670:2541;;;21742:71;21756:23;21781:20;21803:8;21742:12;:71::i;:::-;21737:352;;;21834:19;:36:::0;;::::1;::::0;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;21834:36:0::1;-1:-1:-1::0;;;;;21834:36:0;::::1;::::0;;::::1;::::0;;;-1:-1:-1;21888:35:0;;;:23:::1;21834:36;21888:35:::0;;;;:39;21950:45:::1;::::0;21834:36;21950:12:::1;:45::i;:::-;21945:130;;22020:19;:36:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;22020:36:0;;;;;::::1;::::0;;-1:-1:-1;;22020:36:0::1;-1:-1:-1::0;;;;;22020:36:0;::::1;;::::0;;21945:130:::1;-1:-1:-1::0;;;;;;22112:32:0;::::1;;::::0;;;:20:::1;:32;::::0;;;;;;::::1;::::0;::::1;22111:33;-1:-1:-1::0;;22158:41:0;;::::1;::::0;::::1;::::0;;;21670:2541:::1;;;22235:23;22222:9;:36;;;;;;;;;22217:1994;;;22285:63;22299:19;22320:16;22338:8;22285:12;:63::i;:::-;22280:278;;;-1:-1:-1::0;;;;;22369:31:0;::::1;22403:1;22369:31:::0;;;:19:::1;:31;::::0;;;;:35;22427:41:::1;22441:15;22390:8:::0;22427:12:::1;:41::i;:::-;22422:122;;22493:15;:32:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;22493:32:0;;;;;::::1;::::0;;-1:-1:-1;;22493:32:0::1;-1:-1:-1::0;;;;;22493:32:0;::::1;;::::0;;22422:122:::1;-1:-1:-1::0;;;;;;22581:28:0;;::::1;;::::0;;;:16:::1;:28;::::0;;;;;;;;;::::1;::::0;::::1;22580:29;-1:-1:-1::0;;22623:37:0;;::::1;::::0;::::1;::::0;;;22674:14:::1;:26:::0;;;;;;:40;;-1:-1:-1;;22674:40:0::1;::::0;;::::1;::::0;;;::::1;::::0;;;22217:1994:::1;;;22750:25;22737:9;:38;;;;;;;;;22732:1479;;;22802:67;22816:21;22839:18;22859:8;22802:12;:67::i;:::-;22797:288;;;-1:-1:-1::0;;;;;22890:33:0;::::1;22926:1;22890:33:::0;;;:21:::1;:33;::::0;;;;:37;22950:43:::1;22964:17;22913:8:::0;22950:12:::1;:43::i;:::-;22945:126;;23018:17;:34:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;23018:34:0;;;;;::::1;::::0;;-1:-1:-1;;23018:34:0::1;-1:-1:-1::0;;;;;23018:34:0;::::1;;::::0;;22945:126:::1;-1:-1:-1::0;;;;;;23108:30:0;::::1;;::::0;;;:18:::1;:30;::::0;;;;;;::::1;::::0;::::1;23107:31;-1:-1:-1::0;;23152:39:0;;::::1;::::0;::::1;::::0;;;22732:1479:::1;;;23227:15;23214:9;:28;;;;;;;;;23209:1002;;;23269:47;23283:11;23296:8;23306;23269:12;:47::i;:::-;23264:238;;;-1:-1:-1::0;;;;;23337:23:0;::::1;23363:1;23337:23:::0;;;:11:::1;:23;::::0;;;;:27;23387:33:::1;23401:7;23350:8:::0;23387:12:::1;:33::i;:::-;23382:106;;23445:7;:24:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;23445:24:0;;;;;::::1;::::0;;-1:-1:-1;;23445:24:0::1;-1:-1:-1::0;;;;;23445:24:0;::::1;;::::0;;23382:106:::1;-1:-1:-1::0;;;;;;23525:20:0;::::1;;::::0;;;:8:::1;:20;::::0;;;;;;::::1;::::0;::::1;23524:21;-1:-1:-1::0;;23559:29:0;;::::1;::::0;::::1;::::0;;;23209:1002:::1;;;23624:22;23611:9;:35;;;;;;;;;23606:605;;;23673:61;23687:18;23707:15;23724:8;23673:12;:61::i;:::-;23668:273;;;-1:-1:-1::0;;;;;23755:30:0;::::1;23788:1;23755:30:::0;;;:18:::1;:30;::::0;;;;:34;23812:40:::1;23826:14;23775:8:::0;23812:12:::1;:40::i;:::-;23807:120;;23877:14;:31:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;23877:31:0;;;;;::::1;::::0;;-1:-1:-1;;23877:31:0::1;-1:-1:-1::0;;;;;23877:31:0;::::1;;::::0;;23807:120:::1;-1:-1:-1::0;;;;;;23964:27:0;::::1;;::::0;;;:15:::1;:27;::::0;;;;;;::::1;::::0;::::1;23963:28;-1:-1:-1::0;;24005:36:0;;::::1;::::0;::::1;::::0;;;23606:605:::1;;;24077:13;24064:9;:26;;;;;;;;;24059:152;;;-1:-1:-1::0;24124:1:0::1;24112:9;:13:::0;24139:4:::1;:15:::0;;-1:-1:-1;;24139:15:0::1;-1:-1:-1::0;;;;;24139:15:0;::::1;;::::0;;-1:-1:-1;24059:152:0::1;;;24206:5;24199:12;;;;;24059:152;24244:9;24227:46;;;;;;;;;::::0;;-1:-1:-1;;;;;24227:46:0;::::1;::::0;;;::::1;;;::::0;::::1;::::0;;;::::1;::::0;;;;;;;;;::::1;24290:4;24283:11;;;3998:1;19573:4728:::0;;;;;:::o;10082:21::-;;;;:::o;8365:32::-;;;;;;;;;;;;8745:57;;;;;;;;;;;;;:::o;276:134::-;334:7;360:43;364:1;367;360:43;;;;;;;;;;;;;;;;;:3;:43::i;5390:175::-;5499:58;;;-1:-1:-1;;;;;5499:58:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5522:23;5499:58;;;5472:86;;5492:5;;5472:19;:86::i;:::-;5390:175;;;:::o;94:176::-;152:7;183:5;;;206:6;;;;198:46;;;;;-1:-1:-1;;;198:46:0;;;;;;;;;;;;;;;;;;;;;;;;;;;609:241;667:7;690:6;686:45;;-1:-1:-1;719:1:0;712:8;;686:45;753:5;;;757:1;753;:5;:1;776:5;;;;;:10;768:56;;;;-1:-1:-1;;;768:56:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;856:130;914:7;940:39;944:1;947;940:39;;;;;;;;;;;;;;;;;:3;:39::i;5571:203::-;5698:68;;;-1:-1:-1;;;;;5698:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5721:27;5698:68;;;5671:96;;5691:5;;5671:19;:96::i;:::-;5571:203;;;;:::o;24540:428::-;-1:-1:-1;;;;;24748:19:0;;24725:4;24748:19;;;;;;;;;;;;;24742:206;;-1:-1:-1;;;;;24793:18:0;;;;;;;;;;;;;;24784:48;;;;;-1:-1:-1;;;24784:48:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;24855:18:0;;;;;;;;;;;;;;24877:12;-1:-1:-1;24855:34:0;24846:66;;;;;-1:-1:-1;;;24846:66:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;24933:4:0;24926:11;;24742:206;-1:-1:-1;24956:5:0;24540:428;;;;;:::o;25129:270::-;25218:4;;25235:136;25256:12;;25252:16;;25235:136;;;25308:6;-1:-1:-1;;;;;25294:20:0;:5;25301:1;25294:10;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;25294:10:0;:20;25290:71;;;25342:4;25335:11;;;;;25290:71;25270:3;;25235:136;;416:187;502:7;537:12;529:6;;;;521:29;;;;-1:-1:-1;;;521:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;572:5:0;;;416:187::o;5780:412::-;5860:23;5886:69;5914:4;5886:69;;;;;;;;;;;;;;;;;5894:5;-1:-1:-1;;;;;5886:27:0;;;:69;;;;;:::i;:::-;5969:17;;5860:95;;-1:-1:-1;5969:21:0;5965:221;;6109:10;6098:30;;;;;;;;;;;;;;;-1:-1:-1;6098:30:0;6090:85;;;;-1:-1:-1;;;6090:85:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;992:185;1078:7;1112:12;1105:5;1097:28;;;;-1:-1:-1;;;1097:28:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1135:9;1151:1;1147;:5;;;;;;;992:185;-1:-1:-1;;;;;992:185:0:o;1621:194::-;1724:12;1755:53;1778:6;1786:4;1792:1;1795:12;1755:22;:53::i;:::-;1748:60;1621:194;-1:-1:-1;;;;1621:194:0:o;1821:799::-;1951:12;1983:18;1994:6;1983:10;:18::i;:::-;1975:60;;;;;-1:-1:-1;;;1975:60:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;2106:12;2120:23;2147:6;-1:-1:-1;;;;;2147:11:0;2167:8;2178:4;2147:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2105:78;;;;2197:7;2193:421;;;2227:10;-1:-1:-1;2220:17:0;;-1:-1:-1;2220:17:0;2193:421;2272:17;;:21;2268:336;;2437:10;2431:17;2497:15;2484:10;2480:2;2476:19;2469:44;2386:145;2569:20;;-1:-1:-1;;;2569:20:0;;;;;;;;;;;;;;;;;2576:12;;2569:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1202:413;1562:20;1600:8;;;1202:413::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "2869400",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "LiquidityDepositorQueue(address)": "1256",
                "LiquidityManagerQueue(address)": "1236",
                "LiquidityTokenQueue(address)": "1215",
                "OHM()": "infinite",
                "ReserveManagerQueue(address)": "1191",
                "auditReserves()": "infinite",
                "blocksNeededForQueue()": "infinite",
                "bondCalculator(address)": "1253",
                "debtorBalance(address)": "1193",
                "debtorQueue(address)": "1192",
                "debtors(uint256)": "2103",
                "deposit(uint256,address,uint256)": "infinite",
                "excessReserves()": "infinite",
                "incurDebt(uint256,address)": "infinite",
                "isDebtor(address)": "1225",
                "isLiquidityDepositor(address)": "1248",
                "isLiquidityManager(address)": "1225",
                "isLiquidityToken(address)": "1204",
                "isReserveDepositor(address)": "1227",
                "isReserveManager(address)": "1203",
                "isReserveSpender(address)": "1205",
                "isReserveToken(address)": "1226",
                "isRewardManager(address)": "1248",
                "liquidityDepositors(uint256)": "2083",
                "liquidityManagers(uint256)": "2059",
                "liquidityTokens(uint256)": "2080",
                "manage(address,uint256)": "infinite",
                "manager()": "1127",
                "mintRewards(address,uint256)": "infinite",
                "pullManagement()": "infinite",
                "pushManagement(address)": "infinite",
                "queue(uint8,address)": "infinite",
                "renounceManagement()": "24267",
                "repayDebtWithOHM(uint256)": "infinite",
                "repayDebtWithReserve(uint256,address)": "infinite",
                "reserveDepositorQueue(address)": "1214",
                "reserveDepositors(uint256)": "2037",
                "reserveManagers(uint256)": "2062",
                "reserveSpenderQueue(address)": "1257",
                "reserveSpenders(uint256)": "2083",
                "reserveTokenQueue(address)": "1235",
                "reserveTokens(uint256)": "2060",
                "rewardManagerQueue(address)": "1235",
                "rewardManagers(uint256)": "2059",
                "sOHM()": "1105",
                "sOHMQueue()": "1067",
                "toggle(uint8,address,address)": "infinite",
                "totalDebt()": "1086",
                "totalReserves()": "1066",
                "valueOf(address,uint256)": "infinite",
                "withdraw(uint256,address)": "infinite"
              },
              "internal": {
                "listContains(address[] storage pointer,address)": "infinite",
                "requirements(mapping(address => uint256),mapping(address => bool),address)": "infinite"
              }
            },
            "methodIdentifiers": {
              "LiquidityDepositorQueue(address)": "fff9ee87",
              "LiquidityManagerQueue(address)": "ab319c9a",
              "LiquidityTokenQueue(address)": "8f59c727",
              "OHM()": "a6c41fec",
              "ReserveManagerQueue(address)": "b1bd38b0",
              "auditReserves()": "2b7ce500",
              "blocksNeededForQueue()": "d07f390f",
              "bondCalculator(address)": "1af4da70",
              "debtorBalance(address)": "094a8651",
              "debtorQueue(address)": "cd85641a",
              "debtors(uint256)": "869871bf",
              "deposit(uint256,address,uint256)": "bc157ac1",
              "excessReserves()": "0c3513a8",
              "incurDebt(uint256,address)": "12422d23",
              "isDebtor(address)": "ee4e19a1",
              "isLiquidityDepositor(address)": "a1210a2d",
              "isLiquidityManager(address)": "df89b344",
              "isLiquidityToken(address)": "a569e571",
              "isReserveDepositor(address)": "124154ca",
              "isReserveManager(address)": "ebd83cd8",
              "isReserveSpender(address)": "87d67dff",
              "isReserveToken(address)": "68c31dd5",
              "isRewardManager(address)": "4e83423c",
              "liquidityDepositors(uint256)": "8f6a7b57",
              "liquidityManagers(uint256)": "70a0502a",
              "liquidityTokens(uint256)": "fd1ec010",
              "manage(address,uint256)": "0b0eee30",
              "manager()": "481c6a75",
              "mintRewards(address,uint256)": "6a20de92",
              "pullManagement()": "5a96ac0a",
              "pushManagement(address)": "46f68ee9",
              "queue(uint8,address)": "e83afee3",
              "renounceManagement()": "089208d8",
              "repayDebtWithOHM(uint256)": "0f70431f",
              "repayDebtWithReserve(uint256,address)": "d796ffb8",
              "reserveDepositorQueue(address)": "932cc8c3",
              "reserveDepositors(uint256)": "6b5e40a7",
              "reserveManagers(uint256)": "0619aff1",
              "reserveSpenderQueue(address)": "c24ad43e",
              "reserveSpenders(uint256)": "437f7912",
              "reserveTokenQueue(address)": "788c6c01",
              "reserveTokens(uint256)": "d031370b",
              "rewardManagerQueue(address)": "fb939588",
              "rewardManagers(uint256)": "b5b1d560",
              "sOHM()": "15079925",
              "sOHMQueue()": "2789de37",
              "toggle(uint8,address,address)": "fbfd393b",
              "totalDebt()": "fc7b9c18",
              "totalReserves()": "8f840ddd",
              "valueOf(address,uint256)": "1eec5a9a",
              "withdraw(uint256,address)": "00f714ce"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_OHM\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Frax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_OHMDAI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocksNeededForQueue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ApeTreasury.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"activated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ChangeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ApeTreasury.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"queued\",\"type\":\"address\"}],\"name\":\"ChangeQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CreateDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RepayDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservesManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityDepositorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityTokenQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ReserveManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksNeededForQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debtors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"send_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"incurDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDebtor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveSpender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ApeTreasury.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayDebtWithOHM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"repayDebtWithReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveDepositorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveSpenderQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveSpenders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveTokenQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sOHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sOHMQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ApeTreasury.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_calculator\",\"type\":\"address\"}],\"name\":\"toggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"valueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_profit\":\"uint\",\"_token\":\"address\"},\"returns\":{\"send_\":\"uint\"}},\"excessReserves()\":{\"returns\":{\"_0\":\"uint\"}},\"incurDebt(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"manage(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"queue(uint8,address)\":{\"params\":{\"_address\":\"address\",\"_managing\":\"MANAGING\"},\"returns\":{\"_0\":\"bool\"}},\"repayDebtWithOHM(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"repayDebtWithReserve(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"toggle(uint8,address,address)\":{\"params\":{\"_address\":\"address\",\"_calculator\":\"address\",\"_managing\":\"MANAGING\"},\"returns\":{\"_0\":\"bool\"}},\"valueOf(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"},\"returns\":{\"value_\":\"uint\"}},\"withdraw(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"auditReserves()\":{\"notice\":\"takes inventory of all tracked assetsalways consolidate to recognized reserves before audit\"},\"deposit(uint256,address,uint256)\":{\"notice\":\"allow approved address to deposit an asset for OHM\"},\"excessReserves()\":{\"notice\":\"returns excess reserves not backing tokens\"},\"incurDebt(uint256,address)\":{\"notice\":\"allow approved address to borrow reserves\"},\"manage(address,uint256)\":{\"notice\":\"allow approved address to withdraw assets\"},\"mintRewards(address,uint256)\":{\"notice\":\"send epoch reward to staking contract\"},\"queue(uint8,address)\":{\"notice\":\"queue address to change boolean in mapping\"},\"repayDebtWithOHM(uint256)\":{\"notice\":\"allow approved address to repay borrowed reserves with OHM\"},\"repayDebtWithReserve(uint256,address)\":{\"notice\":\"allow approved address to repay borrowed reserves with reserves\"},\"toggle(uint8,address,address)\":{\"notice\":\"verify queue then set boolean in mapping\"},\"valueOf(address,uint256)\":{\"notice\":\"returns OHM valuation of asset\"},\"withdraw(uint256,address)\":{\"notice\":\"allow approved address to burn OHM for reserves\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"ApeTreasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\nlibrary Address {\\n\\n  function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ninterface IOwnable {\\n  function manager() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\\n\\ncontract Ownable is IOwnable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function manager() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyManager() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\ninterface IERC20Mintable {\\n  function mint( uint256 amount_ ) external;\\n\\n  function mint( address account_, uint256 ammount_ ) external;\\n}\\n\\ninterface IOHMERC20 {\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ninterface IBondCalculator {\\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\n}\\n\\ncontract ApeTreasury is Ownable {\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit( address indexed token, uint amount, uint value );\\n    event Withdrawal( address indexed token, uint amount, uint value );\\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event ReservesManaged( address indexed token, uint amount );\\n    event ReservesUpdated( uint indexed totalReserves );\\n    event ReservesAudited( uint indexed totalReserves );\\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\\n    event ChangeQueued( MANAGING indexed managing, address queued );\\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\\n\\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SOHM }\\n\\n    address public immutable OHM;\\n    uint public immutable blocksNeededForQueue;\\n\\n    address[] public reserveTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isReserveToken;\\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\\n\\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveDepositor;\\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\\n\\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveSpender;\\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isLiquidityToken;\\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityDepositor;\\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\\n\\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\\n\\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveManager;\\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityManager;\\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\\n\\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isDebtor;\\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\\n    mapping( address => uint ) public debtorBalance;\\n\\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isRewardManager;\\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\\n\\n    address public sOHM;\\n    uint public sOHMQueue; // Delays change to sOHM address\\n    \\n    uint public totalReserves; // Risk-free value of all assets\\n    uint public totalDebt;\\n\\n    constructor (\\n        address _OHM,\\n        address _DAI,\\n        address _Frax,\\n        address _OHMDAI,\\n        uint _blocksNeededForQueue\\n    ) {\\n        require( _OHM != address(0) );\\n        OHM = _OHM;\\n\\n        isReserveToken[ _DAI ] = true;\\n        reserveTokens.push( _DAI );\\n\\n        isReserveToken[ _Frax] = true;\\n        reserveTokens.push( _Frax );\\n\\n       isLiquidityToken[ _OHMDAI ] = true;\\n       liquidityTokens.push( _OHMDAI );\\n\\n        blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for OHM\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \\\"Not accepted\\\" );\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        if ( isReserveToken[ _token ] ) {\\n            require( isReserveDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isLiquidityDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        // mint OHM needed and store amount of rewards for distribution\\n        send_ = value.sub( _profit );\\n        IERC20Mintable( OHM ).mint( msg.sender, send_ );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit Deposit( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to burn OHM for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw( uint _amount, address _token ) external {\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" ); // Only reserves can be used for redemptions\\n        require( isReserveSpender[ msg.sender ] == true, \\\"Not approved\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n        IOHMERC20( OHM ).burnFrom( msg.sender, value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit Withdrawal( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n\\n        uint maximumDebt = IERC20( sOHM ).balanceOf( msg.sender ); // Can only borrow against sOHM held\\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\\n        require( value <= availableDebt, \\\"Exceeds debt limit\\\" );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\\n        totalDebt = totalDebt.add( value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).transfer( msg.sender, _amount );\\n        \\n        emit CreateDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        uint value = valueOf( _token, _amount );\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\\n        totalDebt = totalDebt.sub( value );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit RepayDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with OHM\\n        @param _amount uint\\n     */\\n    function repayDebtWithOHM( uint _amount ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n\\n        IOHMERC20( OHM ).burnFrom( msg.sender, _amount );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\\n        totalDebt = totalDebt.sub( _amount );\\n\\n        emit RepayDebt( msg.sender, OHM, _amount, _amount );\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage( address _token, uint _amount ) external {\\n        if( isLiquidityToken[ _token ] ) {\\n            require( isLiquidityManager[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isReserveManager[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        require( value <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit ReservesManaged( _token, _amount );\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards( address _recipient, uint _amount ) external {\\n        require( isRewardManager[ msg.sender ], \\\"Not approved\\\" );\\n        require( _amount <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        IERC20Mintable( OHM ).mint( _recipient, _amount );\\n\\n        emit RewardsMinted( msg.sender, _recipient, _amount );\\n    } \\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns ( uint ) {\\n        return totalReserves.sub( IERC20( OHM ).totalSupply().sub( totalDebt ) );\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external onlyManager() {\\n        uint reserves;\\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\\n            reserves = reserves.add ( \\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\\n            reserves = reserves.add (\\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        totalReserves = reserves;\\n        emit ReservesUpdated( reserves );\\n        emit ReservesAudited( reserves );\\n    }\\n\\n    /**\\n        @notice returns OHM valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return value_ uint\\n     */\\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\\n        if ( isReserveToken[ _token ] ) {\\n            // convert amount to match OHM decimals\\n            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\\n        } else if ( isLiquidityToken[ _token ] ) {\\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = block.number.add( blocksNeededForQueue );\\n        } else return false;\\n\\n        emit ChangeQueued( _managing, _address );\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @param _calculator address\\n        @return bool\\n     */\\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        bool result;\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\\n                reserveDepositorQueue[ _address ] = 0;\\n                if( !listContains( reserveDepositors, _address ) ) {\\n                    reserveDepositors.push( _address );\\n                }\\n            }\\n            result = !isReserveDepositor[ _address ];\\n            isReserveDepositor[ _address ] = result;\\n            \\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\\n                reserveSpenderQueue[ _address ] = 0;\\n                if( !listContains( reserveSpenders, _address ) ) {\\n                    reserveSpenders.push( _address );\\n                }\\n            }\\n            result = !isReserveSpender[ _address ];\\n            isReserveSpender[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\\n                reserveTokenQueue[ _address ] = 0;\\n                if( !listContains( reserveTokens, _address ) ) {\\n                    reserveTokens.push( _address );\\n                }\\n            }\\n            result = !isReserveToken[ _address ];\\n            isReserveToken[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\\n                reserveManagers.push( _address );\\n                ReserveManagerQueue[ _address ] = 0;\\n                if( !listContains( reserveManagers, _address ) ) {\\n                    reserveManagers.push( _address );\\n                }\\n            }\\n            result = !isReserveManager[ _address ];\\n            isReserveManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\\n                liquidityDepositors.push( _address );\\n                LiquidityDepositorQueue[ _address ] = 0;\\n                if( !listContains( liquidityDepositors, _address ) ) {\\n                    liquidityDepositors.push( _address );\\n                }\\n            }\\n            result = !isLiquidityDepositor[ _address ];\\n            isLiquidityDepositor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\\n                LiquidityTokenQueue[ _address ] = 0;\\n                if( !listContains( liquidityTokens, _address ) ) {\\n                    liquidityTokens.push( _address );\\n                }\\n            }\\n            result = !isLiquidityToken[ _address ];\\n            isLiquidityToken[ _address ] = result;\\n            bondCalculator[ _address ] = _calculator;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\\n                LiquidityManagerQueue[ _address ] = 0;\\n                if( !listContains( liquidityManagers, _address ) ) {\\n                    liquidityManagers.push( _address );\\n                }\\n            }\\n            result = !isLiquidityManager[ _address ];\\n            isLiquidityManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\\n                debtorQueue[ _address ] = 0;\\n                if( !listContains( debtors, _address ) ) {\\n                    debtors.push( _address );\\n                }\\n            }\\n            result = !isDebtor[ _address ];\\n            isDebtor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\\n                rewardManagerQueue[ _address ] = 0;\\n                if( !listContains( rewardManagers, _address ) ) {\\n                    rewardManagers.push( _address );\\n                }\\n            }\\n            result = !isRewardManager[ _address ];\\n            isRewardManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = 0;\\n            sOHM = _address;\\n            result = true;\\n\\n        } else return false;\\n\\n        emit ChangeActivated( _managing, _address, result );\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements( \\n        mapping( address => uint ) storage queue_, \\n        mapping( address => bool ) storage status_, \\n        address _address \\n    ) internal view returns ( bool ) {\\n        if ( !status_[ _address ] ) {\\n            require( queue_[ _address ] != 0, \\\"Must queue\\\" );\\n            require( queue_[ _address ] <= block.number, \\\"Queue not expired\\\" );\\n            return true;\\n        } return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\\n        for( uint i = 0; i < _list.length; i++ ) {\\n            if( _list[ i ] == _token ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x7c766ccab2d5a550bf1d62919251d0a6ea0b2b1fba1109d8a5ea2ca9499f86d9\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 284,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 286,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "_newOwner",
                "offset": 0,
                "slot": "1",
                "type": "t_address"
              },
              {
                "astId": 691,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "reserveTokens",
                "offset": 0,
                "slot": "2",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 695,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "isReserveToken",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 699,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "reserveTokenQueue",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 702,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "reserveDepositors",
                "offset": 0,
                "slot": "5",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 706,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "isReserveDepositor",
                "offset": 0,
                "slot": "6",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 710,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "reserveDepositorQueue",
                "offset": 0,
                "slot": "7",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 713,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "reserveSpenders",
                "offset": 0,
                "slot": "8",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 717,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "isReserveSpender",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 721,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "reserveSpenderQueue",
                "offset": 0,
                "slot": "10",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 724,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "liquidityTokens",
                "offset": 0,
                "slot": "11",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 728,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "isLiquidityToken",
                "offset": 0,
                "slot": "12",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 732,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "LiquidityTokenQueue",
                "offset": 0,
                "slot": "13",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 735,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "liquidityDepositors",
                "offset": 0,
                "slot": "14",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 739,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "isLiquidityDepositor",
                "offset": 0,
                "slot": "15",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 743,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "LiquidityDepositorQueue",
                "offset": 0,
                "slot": "16",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 747,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "bondCalculator",
                "offset": 0,
                "slot": "17",
                "type": "t_mapping(t_address,t_address)"
              },
              {
                "astId": 750,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "reserveManagers",
                "offset": 0,
                "slot": "18",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 754,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "isReserveManager",
                "offset": 0,
                "slot": "19",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 758,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "ReserveManagerQueue",
                "offset": 0,
                "slot": "20",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 761,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "liquidityManagers",
                "offset": 0,
                "slot": "21",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 765,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "isLiquidityManager",
                "offset": 0,
                "slot": "22",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 769,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "LiquidityManagerQueue",
                "offset": 0,
                "slot": "23",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 772,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "debtors",
                "offset": 0,
                "slot": "24",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 776,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "isDebtor",
                "offset": 0,
                "slot": "25",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 780,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "debtorQueue",
                "offset": 0,
                "slot": "26",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 784,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "debtorBalance",
                "offset": 0,
                "slot": "27",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 787,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "rewardManagers",
                "offset": 0,
                "slot": "28",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 791,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "isRewardManager",
                "offset": 0,
                "slot": "29",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 795,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "rewardManagerQueue",
                "offset": 0,
                "slot": "30",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 797,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "sOHM",
                "offset": 0,
                "slot": "31",
                "type": "t_address"
              },
              {
                "astId": 799,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "sOHMQueue",
                "offset": 0,
                "slot": "32",
                "type": "t_uint256"
              },
              {
                "astId": 801,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "totalReserves",
                "offset": 0,
                "slot": "33",
                "type": "t_uint256"
              },
              {
                "astId": 803,
                "contract": "contracts/Treasury.sol:ApeTreasury",
                "label": "totalDebt",
                "offset": 0,
                "slot": "34",
                "type": "t_uint256"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_mapping(t_address,t_address)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => address)",
                "numberOfBytes": "32",
                "value": "t_address"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "auditReserves()": {
                "notice": "takes inventory of all tracked assetsalways consolidate to recognized reserves before audit"
              },
              "deposit(uint256,address,uint256)": {
                "notice": "allow approved address to deposit an asset for OHM"
              },
              "excessReserves()": {
                "notice": "returns excess reserves not backing tokens"
              },
              "incurDebt(uint256,address)": {
                "notice": "allow approved address to borrow reserves"
              },
              "manage(address,uint256)": {
                "notice": "allow approved address to withdraw assets"
              },
              "mintRewards(address,uint256)": {
                "notice": "send epoch reward to staking contract"
              },
              "queue(uint8,address)": {
                "notice": "queue address to change boolean in mapping"
              },
              "repayDebtWithOHM(uint256)": {
                "notice": "allow approved address to repay borrowed reserves with OHM"
              },
              "repayDebtWithReserve(uint256,address)": {
                "notice": "allow approved address to repay borrowed reserves with reserves"
              },
              "toggle(uint8,address,address)": {
                "notice": "verify queue then set boolean in mapping"
              },
              "valueOf(address,uint256)": {
                "notice": "returns OHM valuation of asset"
              },
              "withdraw(uint256,address)": {
                "notice": "allow approved address to burn OHM for reserves"
              }
            },
            "version": 1
          }
        },
        "IBondCalculator": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "pair_",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount_",
                  "type": "uint256"
                }
              ],
              "name": "valuation",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "valuation(address,uint256)": "4249719f"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"valuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"IBondCalculator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\nlibrary Address {\\n\\n  function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ninterface IOwnable {\\n  function manager() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\\n\\ncontract Ownable is IOwnable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function manager() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyManager() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\ninterface IERC20Mintable {\\n  function mint( uint256 amount_ ) external;\\n\\n  function mint( address account_, uint256 ammount_ ) external;\\n}\\n\\ninterface IOHMERC20 {\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ninterface IBondCalculator {\\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\n}\\n\\ncontract ApeTreasury is Ownable {\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit( address indexed token, uint amount, uint value );\\n    event Withdrawal( address indexed token, uint amount, uint value );\\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event ReservesManaged( address indexed token, uint amount );\\n    event ReservesUpdated( uint indexed totalReserves );\\n    event ReservesAudited( uint indexed totalReserves );\\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\\n    event ChangeQueued( MANAGING indexed managing, address queued );\\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\\n\\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SOHM }\\n\\n    address public immutable OHM;\\n    uint public immutable blocksNeededForQueue;\\n\\n    address[] public reserveTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isReserveToken;\\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\\n\\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveDepositor;\\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\\n\\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveSpender;\\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isLiquidityToken;\\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityDepositor;\\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\\n\\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\\n\\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveManager;\\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityManager;\\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\\n\\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isDebtor;\\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\\n    mapping( address => uint ) public debtorBalance;\\n\\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isRewardManager;\\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\\n\\n    address public sOHM;\\n    uint public sOHMQueue; // Delays change to sOHM address\\n    \\n    uint public totalReserves; // Risk-free value of all assets\\n    uint public totalDebt;\\n\\n    constructor (\\n        address _OHM,\\n        address _DAI,\\n        address _Frax,\\n        address _OHMDAI,\\n        uint _blocksNeededForQueue\\n    ) {\\n        require( _OHM != address(0) );\\n        OHM = _OHM;\\n\\n        isReserveToken[ _DAI ] = true;\\n        reserveTokens.push( _DAI );\\n\\n        isReserveToken[ _Frax] = true;\\n        reserveTokens.push( _Frax );\\n\\n       isLiquidityToken[ _OHMDAI ] = true;\\n       liquidityTokens.push( _OHMDAI );\\n\\n        blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for OHM\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \\\"Not accepted\\\" );\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        if ( isReserveToken[ _token ] ) {\\n            require( isReserveDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isLiquidityDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        // mint OHM needed and store amount of rewards for distribution\\n        send_ = value.sub( _profit );\\n        IERC20Mintable( OHM ).mint( msg.sender, send_ );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit Deposit( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to burn OHM for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw( uint _amount, address _token ) external {\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" ); // Only reserves can be used for redemptions\\n        require( isReserveSpender[ msg.sender ] == true, \\\"Not approved\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n        IOHMERC20( OHM ).burnFrom( msg.sender, value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit Withdrawal( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n\\n        uint maximumDebt = IERC20( sOHM ).balanceOf( msg.sender ); // Can only borrow against sOHM held\\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\\n        require( value <= availableDebt, \\\"Exceeds debt limit\\\" );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\\n        totalDebt = totalDebt.add( value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).transfer( msg.sender, _amount );\\n        \\n        emit CreateDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        uint value = valueOf( _token, _amount );\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\\n        totalDebt = totalDebt.sub( value );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit RepayDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with OHM\\n        @param _amount uint\\n     */\\n    function repayDebtWithOHM( uint _amount ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n\\n        IOHMERC20( OHM ).burnFrom( msg.sender, _amount );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\\n        totalDebt = totalDebt.sub( _amount );\\n\\n        emit RepayDebt( msg.sender, OHM, _amount, _amount );\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage( address _token, uint _amount ) external {\\n        if( isLiquidityToken[ _token ] ) {\\n            require( isLiquidityManager[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isReserveManager[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        require( value <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit ReservesManaged( _token, _amount );\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards( address _recipient, uint _amount ) external {\\n        require( isRewardManager[ msg.sender ], \\\"Not approved\\\" );\\n        require( _amount <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        IERC20Mintable( OHM ).mint( _recipient, _amount );\\n\\n        emit RewardsMinted( msg.sender, _recipient, _amount );\\n    } \\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns ( uint ) {\\n        return totalReserves.sub( IERC20( OHM ).totalSupply().sub( totalDebt ) );\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external onlyManager() {\\n        uint reserves;\\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\\n            reserves = reserves.add ( \\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\\n            reserves = reserves.add (\\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        totalReserves = reserves;\\n        emit ReservesUpdated( reserves );\\n        emit ReservesAudited( reserves );\\n    }\\n\\n    /**\\n        @notice returns OHM valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return value_ uint\\n     */\\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\\n        if ( isReserveToken[ _token ] ) {\\n            // convert amount to match OHM decimals\\n            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\\n        } else if ( isLiquidityToken[ _token ] ) {\\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = block.number.add( blocksNeededForQueue );\\n        } else return false;\\n\\n        emit ChangeQueued( _managing, _address );\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @param _calculator address\\n        @return bool\\n     */\\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        bool result;\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\\n                reserveDepositorQueue[ _address ] = 0;\\n                if( !listContains( reserveDepositors, _address ) ) {\\n                    reserveDepositors.push( _address );\\n                }\\n            }\\n            result = !isReserveDepositor[ _address ];\\n            isReserveDepositor[ _address ] = result;\\n            \\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\\n                reserveSpenderQueue[ _address ] = 0;\\n                if( !listContains( reserveSpenders, _address ) ) {\\n                    reserveSpenders.push( _address );\\n                }\\n            }\\n            result = !isReserveSpender[ _address ];\\n            isReserveSpender[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\\n                reserveTokenQueue[ _address ] = 0;\\n                if( !listContains( reserveTokens, _address ) ) {\\n                    reserveTokens.push( _address );\\n                }\\n            }\\n            result = !isReserveToken[ _address ];\\n            isReserveToken[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\\n                reserveManagers.push( _address );\\n                ReserveManagerQueue[ _address ] = 0;\\n                if( !listContains( reserveManagers, _address ) ) {\\n                    reserveManagers.push( _address );\\n                }\\n            }\\n            result = !isReserveManager[ _address ];\\n            isReserveManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\\n                liquidityDepositors.push( _address );\\n                LiquidityDepositorQueue[ _address ] = 0;\\n                if( !listContains( liquidityDepositors, _address ) ) {\\n                    liquidityDepositors.push( _address );\\n                }\\n            }\\n            result = !isLiquidityDepositor[ _address ];\\n            isLiquidityDepositor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\\n                LiquidityTokenQueue[ _address ] = 0;\\n                if( !listContains( liquidityTokens, _address ) ) {\\n                    liquidityTokens.push( _address );\\n                }\\n            }\\n            result = !isLiquidityToken[ _address ];\\n            isLiquidityToken[ _address ] = result;\\n            bondCalculator[ _address ] = _calculator;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\\n                LiquidityManagerQueue[ _address ] = 0;\\n                if( !listContains( liquidityManagers, _address ) ) {\\n                    liquidityManagers.push( _address );\\n                }\\n            }\\n            result = !isLiquidityManager[ _address ];\\n            isLiquidityManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\\n                debtorQueue[ _address ] = 0;\\n                if( !listContains( debtors, _address ) ) {\\n                    debtors.push( _address );\\n                }\\n            }\\n            result = !isDebtor[ _address ];\\n            isDebtor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\\n                rewardManagerQueue[ _address ] = 0;\\n                if( !listContains( rewardManagers, _address ) ) {\\n                    rewardManagers.push( _address );\\n                }\\n            }\\n            result = !isRewardManager[ _address ];\\n            isRewardManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = 0;\\n            sOHM = _address;\\n            result = true;\\n\\n        } else return false;\\n\\n        emit ChangeActivated( _managing, _address, result );\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements( \\n        mapping( address => uint ) storage queue_, \\n        mapping( address => bool ) storage status_, \\n        address _address \\n    ) internal view returns ( bool ) {\\n        if ( !status_[ _address ] ) {\\n            require( queue_[ _address ] != 0, \\\"Must queue\\\" );\\n            require( queue_[ _address ] <= block.number, \\\"Queue not expired\\\" );\\n            return true;\\n        } return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\\n        for( uint i = 0; i < _list.length; i++ ) {\\n            if( _list[ i ] == _token ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x7c766ccab2d5a550bf1d62919251d0a6ea0b2b1fba1109d8a5ea2ca9499f86d9\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decimals()": "313ce567",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\nlibrary Address {\\n\\n  function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ninterface IOwnable {\\n  function manager() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\\n\\ncontract Ownable is IOwnable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function manager() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyManager() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\ninterface IERC20Mintable {\\n  function mint( uint256 amount_ ) external;\\n\\n  function mint( address account_, uint256 ammount_ ) external;\\n}\\n\\ninterface IOHMERC20 {\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ninterface IBondCalculator {\\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\n}\\n\\ncontract ApeTreasury is Ownable {\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit( address indexed token, uint amount, uint value );\\n    event Withdrawal( address indexed token, uint amount, uint value );\\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event ReservesManaged( address indexed token, uint amount );\\n    event ReservesUpdated( uint indexed totalReserves );\\n    event ReservesAudited( uint indexed totalReserves );\\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\\n    event ChangeQueued( MANAGING indexed managing, address queued );\\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\\n\\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SOHM }\\n\\n    address public immutable OHM;\\n    uint public immutable blocksNeededForQueue;\\n\\n    address[] public reserveTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isReserveToken;\\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\\n\\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveDepositor;\\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\\n\\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveSpender;\\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isLiquidityToken;\\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityDepositor;\\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\\n\\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\\n\\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveManager;\\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityManager;\\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\\n\\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isDebtor;\\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\\n    mapping( address => uint ) public debtorBalance;\\n\\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isRewardManager;\\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\\n\\n    address public sOHM;\\n    uint public sOHMQueue; // Delays change to sOHM address\\n    \\n    uint public totalReserves; // Risk-free value of all assets\\n    uint public totalDebt;\\n\\n    constructor (\\n        address _OHM,\\n        address _DAI,\\n        address _Frax,\\n        address _OHMDAI,\\n        uint _blocksNeededForQueue\\n    ) {\\n        require( _OHM != address(0) );\\n        OHM = _OHM;\\n\\n        isReserveToken[ _DAI ] = true;\\n        reserveTokens.push( _DAI );\\n\\n        isReserveToken[ _Frax] = true;\\n        reserveTokens.push( _Frax );\\n\\n       isLiquidityToken[ _OHMDAI ] = true;\\n       liquidityTokens.push( _OHMDAI );\\n\\n        blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for OHM\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \\\"Not accepted\\\" );\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        if ( isReserveToken[ _token ] ) {\\n            require( isReserveDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isLiquidityDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        // mint OHM needed and store amount of rewards for distribution\\n        send_ = value.sub( _profit );\\n        IERC20Mintable( OHM ).mint( msg.sender, send_ );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit Deposit( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to burn OHM for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw( uint _amount, address _token ) external {\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" ); // Only reserves can be used for redemptions\\n        require( isReserveSpender[ msg.sender ] == true, \\\"Not approved\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n        IOHMERC20( OHM ).burnFrom( msg.sender, value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit Withdrawal( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n\\n        uint maximumDebt = IERC20( sOHM ).balanceOf( msg.sender ); // Can only borrow against sOHM held\\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\\n        require( value <= availableDebt, \\\"Exceeds debt limit\\\" );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\\n        totalDebt = totalDebt.add( value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).transfer( msg.sender, _amount );\\n        \\n        emit CreateDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        uint value = valueOf( _token, _amount );\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\\n        totalDebt = totalDebt.sub( value );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit RepayDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with OHM\\n        @param _amount uint\\n     */\\n    function repayDebtWithOHM( uint _amount ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n\\n        IOHMERC20( OHM ).burnFrom( msg.sender, _amount );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\\n        totalDebt = totalDebt.sub( _amount );\\n\\n        emit RepayDebt( msg.sender, OHM, _amount, _amount );\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage( address _token, uint _amount ) external {\\n        if( isLiquidityToken[ _token ] ) {\\n            require( isLiquidityManager[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isReserveManager[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        require( value <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit ReservesManaged( _token, _amount );\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards( address _recipient, uint _amount ) external {\\n        require( isRewardManager[ msg.sender ], \\\"Not approved\\\" );\\n        require( _amount <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        IERC20Mintable( OHM ).mint( _recipient, _amount );\\n\\n        emit RewardsMinted( msg.sender, _recipient, _amount );\\n    } \\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns ( uint ) {\\n        return totalReserves.sub( IERC20( OHM ).totalSupply().sub( totalDebt ) );\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external onlyManager() {\\n        uint reserves;\\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\\n            reserves = reserves.add ( \\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\\n            reserves = reserves.add (\\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        totalReserves = reserves;\\n        emit ReservesUpdated( reserves );\\n        emit ReservesAudited( reserves );\\n    }\\n\\n    /**\\n        @notice returns OHM valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return value_ uint\\n     */\\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\\n        if ( isReserveToken[ _token ] ) {\\n            // convert amount to match OHM decimals\\n            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\\n        } else if ( isLiquidityToken[ _token ] ) {\\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = block.number.add( blocksNeededForQueue );\\n        } else return false;\\n\\n        emit ChangeQueued( _managing, _address );\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @param _calculator address\\n        @return bool\\n     */\\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        bool result;\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\\n                reserveDepositorQueue[ _address ] = 0;\\n                if( !listContains( reserveDepositors, _address ) ) {\\n                    reserveDepositors.push( _address );\\n                }\\n            }\\n            result = !isReserveDepositor[ _address ];\\n            isReserveDepositor[ _address ] = result;\\n            \\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\\n                reserveSpenderQueue[ _address ] = 0;\\n                if( !listContains( reserveSpenders, _address ) ) {\\n                    reserveSpenders.push( _address );\\n                }\\n            }\\n            result = !isReserveSpender[ _address ];\\n            isReserveSpender[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\\n                reserveTokenQueue[ _address ] = 0;\\n                if( !listContains( reserveTokens, _address ) ) {\\n                    reserveTokens.push( _address );\\n                }\\n            }\\n            result = !isReserveToken[ _address ];\\n            isReserveToken[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\\n                reserveManagers.push( _address );\\n                ReserveManagerQueue[ _address ] = 0;\\n                if( !listContains( reserveManagers, _address ) ) {\\n                    reserveManagers.push( _address );\\n                }\\n            }\\n            result = !isReserveManager[ _address ];\\n            isReserveManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\\n                liquidityDepositors.push( _address );\\n                LiquidityDepositorQueue[ _address ] = 0;\\n                if( !listContains( liquidityDepositors, _address ) ) {\\n                    liquidityDepositors.push( _address );\\n                }\\n            }\\n            result = !isLiquidityDepositor[ _address ];\\n            isLiquidityDepositor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\\n                LiquidityTokenQueue[ _address ] = 0;\\n                if( !listContains( liquidityTokens, _address ) ) {\\n                    liquidityTokens.push( _address );\\n                }\\n            }\\n            result = !isLiquidityToken[ _address ];\\n            isLiquidityToken[ _address ] = result;\\n            bondCalculator[ _address ] = _calculator;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\\n                LiquidityManagerQueue[ _address ] = 0;\\n                if( !listContains( liquidityManagers, _address ) ) {\\n                    liquidityManagers.push( _address );\\n                }\\n            }\\n            result = !isLiquidityManager[ _address ];\\n            isLiquidityManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\\n                debtorQueue[ _address ] = 0;\\n                if( !listContains( debtors, _address ) ) {\\n                    debtors.push( _address );\\n                }\\n            }\\n            result = !isDebtor[ _address ];\\n            isDebtor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\\n                rewardManagerQueue[ _address ] = 0;\\n                if( !listContains( rewardManagers, _address ) ) {\\n                    rewardManagers.push( _address );\\n                }\\n            }\\n            result = !isRewardManager[ _address ];\\n            isRewardManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = 0;\\n            sOHM = _address;\\n            result = true;\\n\\n        } else return false;\\n\\n        emit ChangeActivated( _managing, _address, result );\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements( \\n        mapping( address => uint ) storage queue_, \\n        mapping( address => bool ) storage status_, \\n        address _address \\n    ) internal view returns ( bool ) {\\n        if ( !status_[ _address ] ) {\\n            require( queue_[ _address ] != 0, \\\"Must queue\\\" );\\n            require( queue_[ _address ] <= block.number, \\\"Queue not expired\\\" );\\n            return true;\\n        } return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\\n        for( uint i = 0; i < _list.length; i++ ) {\\n            if( _list[ i ] == _token ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x7c766ccab2d5a550bf1d62919251d0a6ea0b2b1fba1109d8a5ea2ca9499f86d9\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IERC20Mintable": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account_",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "ammount_",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount_",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "mint(address,uint256)": "40c10f19",
              "mint(uint256)": "a0712d68"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ammount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"IERC20Mintable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\nlibrary Address {\\n\\n  function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ninterface IOwnable {\\n  function manager() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\\n\\ncontract Ownable is IOwnable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function manager() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyManager() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\ninterface IERC20Mintable {\\n  function mint( uint256 amount_ ) external;\\n\\n  function mint( address account_, uint256 ammount_ ) external;\\n}\\n\\ninterface IOHMERC20 {\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ninterface IBondCalculator {\\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\n}\\n\\ncontract ApeTreasury is Ownable {\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit( address indexed token, uint amount, uint value );\\n    event Withdrawal( address indexed token, uint amount, uint value );\\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event ReservesManaged( address indexed token, uint amount );\\n    event ReservesUpdated( uint indexed totalReserves );\\n    event ReservesAudited( uint indexed totalReserves );\\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\\n    event ChangeQueued( MANAGING indexed managing, address queued );\\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\\n\\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SOHM }\\n\\n    address public immutable OHM;\\n    uint public immutable blocksNeededForQueue;\\n\\n    address[] public reserveTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isReserveToken;\\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\\n\\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveDepositor;\\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\\n\\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveSpender;\\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isLiquidityToken;\\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityDepositor;\\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\\n\\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\\n\\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveManager;\\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityManager;\\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\\n\\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isDebtor;\\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\\n    mapping( address => uint ) public debtorBalance;\\n\\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isRewardManager;\\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\\n\\n    address public sOHM;\\n    uint public sOHMQueue; // Delays change to sOHM address\\n    \\n    uint public totalReserves; // Risk-free value of all assets\\n    uint public totalDebt;\\n\\n    constructor (\\n        address _OHM,\\n        address _DAI,\\n        address _Frax,\\n        address _OHMDAI,\\n        uint _blocksNeededForQueue\\n    ) {\\n        require( _OHM != address(0) );\\n        OHM = _OHM;\\n\\n        isReserveToken[ _DAI ] = true;\\n        reserveTokens.push( _DAI );\\n\\n        isReserveToken[ _Frax] = true;\\n        reserveTokens.push( _Frax );\\n\\n       isLiquidityToken[ _OHMDAI ] = true;\\n       liquidityTokens.push( _OHMDAI );\\n\\n        blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for OHM\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \\\"Not accepted\\\" );\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        if ( isReserveToken[ _token ] ) {\\n            require( isReserveDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isLiquidityDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        // mint OHM needed and store amount of rewards for distribution\\n        send_ = value.sub( _profit );\\n        IERC20Mintable( OHM ).mint( msg.sender, send_ );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit Deposit( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to burn OHM for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw( uint _amount, address _token ) external {\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" ); // Only reserves can be used for redemptions\\n        require( isReserveSpender[ msg.sender ] == true, \\\"Not approved\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n        IOHMERC20( OHM ).burnFrom( msg.sender, value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit Withdrawal( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n\\n        uint maximumDebt = IERC20( sOHM ).balanceOf( msg.sender ); // Can only borrow against sOHM held\\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\\n        require( value <= availableDebt, \\\"Exceeds debt limit\\\" );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\\n        totalDebt = totalDebt.add( value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).transfer( msg.sender, _amount );\\n        \\n        emit CreateDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        uint value = valueOf( _token, _amount );\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\\n        totalDebt = totalDebt.sub( value );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit RepayDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with OHM\\n        @param _amount uint\\n     */\\n    function repayDebtWithOHM( uint _amount ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n\\n        IOHMERC20( OHM ).burnFrom( msg.sender, _amount );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\\n        totalDebt = totalDebt.sub( _amount );\\n\\n        emit RepayDebt( msg.sender, OHM, _amount, _amount );\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage( address _token, uint _amount ) external {\\n        if( isLiquidityToken[ _token ] ) {\\n            require( isLiquidityManager[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isReserveManager[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        require( value <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit ReservesManaged( _token, _amount );\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards( address _recipient, uint _amount ) external {\\n        require( isRewardManager[ msg.sender ], \\\"Not approved\\\" );\\n        require( _amount <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        IERC20Mintable( OHM ).mint( _recipient, _amount );\\n\\n        emit RewardsMinted( msg.sender, _recipient, _amount );\\n    } \\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns ( uint ) {\\n        return totalReserves.sub( IERC20( OHM ).totalSupply().sub( totalDebt ) );\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external onlyManager() {\\n        uint reserves;\\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\\n            reserves = reserves.add ( \\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\\n            reserves = reserves.add (\\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        totalReserves = reserves;\\n        emit ReservesUpdated( reserves );\\n        emit ReservesAudited( reserves );\\n    }\\n\\n    /**\\n        @notice returns OHM valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return value_ uint\\n     */\\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\\n        if ( isReserveToken[ _token ] ) {\\n            // convert amount to match OHM decimals\\n            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\\n        } else if ( isLiquidityToken[ _token ] ) {\\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = block.number.add( blocksNeededForQueue );\\n        } else return false;\\n\\n        emit ChangeQueued( _managing, _address );\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @param _calculator address\\n        @return bool\\n     */\\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        bool result;\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\\n                reserveDepositorQueue[ _address ] = 0;\\n                if( !listContains( reserveDepositors, _address ) ) {\\n                    reserveDepositors.push( _address );\\n                }\\n            }\\n            result = !isReserveDepositor[ _address ];\\n            isReserveDepositor[ _address ] = result;\\n            \\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\\n                reserveSpenderQueue[ _address ] = 0;\\n                if( !listContains( reserveSpenders, _address ) ) {\\n                    reserveSpenders.push( _address );\\n                }\\n            }\\n            result = !isReserveSpender[ _address ];\\n            isReserveSpender[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\\n                reserveTokenQueue[ _address ] = 0;\\n                if( !listContains( reserveTokens, _address ) ) {\\n                    reserveTokens.push( _address );\\n                }\\n            }\\n            result = !isReserveToken[ _address ];\\n            isReserveToken[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\\n                reserveManagers.push( _address );\\n                ReserveManagerQueue[ _address ] = 0;\\n                if( !listContains( reserveManagers, _address ) ) {\\n                    reserveManagers.push( _address );\\n                }\\n            }\\n            result = !isReserveManager[ _address ];\\n            isReserveManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\\n                liquidityDepositors.push( _address );\\n                LiquidityDepositorQueue[ _address ] = 0;\\n                if( !listContains( liquidityDepositors, _address ) ) {\\n                    liquidityDepositors.push( _address );\\n                }\\n            }\\n            result = !isLiquidityDepositor[ _address ];\\n            isLiquidityDepositor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\\n                LiquidityTokenQueue[ _address ] = 0;\\n                if( !listContains( liquidityTokens, _address ) ) {\\n                    liquidityTokens.push( _address );\\n                }\\n            }\\n            result = !isLiquidityToken[ _address ];\\n            isLiquidityToken[ _address ] = result;\\n            bondCalculator[ _address ] = _calculator;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\\n                LiquidityManagerQueue[ _address ] = 0;\\n                if( !listContains( liquidityManagers, _address ) ) {\\n                    liquidityManagers.push( _address );\\n                }\\n            }\\n            result = !isLiquidityManager[ _address ];\\n            isLiquidityManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\\n                debtorQueue[ _address ] = 0;\\n                if( !listContains( debtors, _address ) ) {\\n                    debtors.push( _address );\\n                }\\n            }\\n            result = !isDebtor[ _address ];\\n            isDebtor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\\n                rewardManagerQueue[ _address ] = 0;\\n                if( !listContains( rewardManagers, _address ) ) {\\n                    rewardManagers.push( _address );\\n                }\\n            }\\n            result = !isRewardManager[ _address ];\\n            isRewardManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = 0;\\n            sOHM = _address;\\n            result = true;\\n\\n        } else return false;\\n\\n        emit ChangeActivated( _managing, _address, result );\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements( \\n        mapping( address => uint ) storage queue_, \\n        mapping( address => bool ) storage status_, \\n        address _address \\n    ) internal view returns ( bool ) {\\n        if ( !status_[ _address ] ) {\\n            require( queue_[ _address ] != 0, \\\"Must queue\\\" );\\n            require( queue_[ _address ] <= block.number, \\\"Queue not expired\\\" );\\n            return true;\\n        } return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\\n        for( uint i = 0; i < _list.length; i++ ) {\\n            if( _list[ i ] == _token ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x7c766ccab2d5a550bf1d62919251d0a6ea0b2b1fba1109d8a5ea2ca9499f86d9\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IOHMERC20": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account_",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount_",
                  "type": "uint256"
                }
              ],
              "name": "burnFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "burnFrom(address,uint256)": "79cc6790"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"IOHMERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\nlibrary Address {\\n\\n  function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ninterface IOwnable {\\n  function manager() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\\n\\ncontract Ownable is IOwnable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function manager() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyManager() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\ninterface IERC20Mintable {\\n  function mint( uint256 amount_ ) external;\\n\\n  function mint( address account_, uint256 ammount_ ) external;\\n}\\n\\ninterface IOHMERC20 {\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ninterface IBondCalculator {\\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\n}\\n\\ncontract ApeTreasury is Ownable {\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit( address indexed token, uint amount, uint value );\\n    event Withdrawal( address indexed token, uint amount, uint value );\\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event ReservesManaged( address indexed token, uint amount );\\n    event ReservesUpdated( uint indexed totalReserves );\\n    event ReservesAudited( uint indexed totalReserves );\\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\\n    event ChangeQueued( MANAGING indexed managing, address queued );\\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\\n\\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SOHM }\\n\\n    address public immutable OHM;\\n    uint public immutable blocksNeededForQueue;\\n\\n    address[] public reserveTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isReserveToken;\\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\\n\\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveDepositor;\\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\\n\\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveSpender;\\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isLiquidityToken;\\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityDepositor;\\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\\n\\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\\n\\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveManager;\\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityManager;\\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\\n\\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isDebtor;\\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\\n    mapping( address => uint ) public debtorBalance;\\n\\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isRewardManager;\\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\\n\\n    address public sOHM;\\n    uint public sOHMQueue; // Delays change to sOHM address\\n    \\n    uint public totalReserves; // Risk-free value of all assets\\n    uint public totalDebt;\\n\\n    constructor (\\n        address _OHM,\\n        address _DAI,\\n        address _Frax,\\n        address _OHMDAI,\\n        uint _blocksNeededForQueue\\n    ) {\\n        require( _OHM != address(0) );\\n        OHM = _OHM;\\n\\n        isReserveToken[ _DAI ] = true;\\n        reserveTokens.push( _DAI );\\n\\n        isReserveToken[ _Frax] = true;\\n        reserveTokens.push( _Frax );\\n\\n       isLiquidityToken[ _OHMDAI ] = true;\\n       liquidityTokens.push( _OHMDAI );\\n\\n        blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for OHM\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \\\"Not accepted\\\" );\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        if ( isReserveToken[ _token ] ) {\\n            require( isReserveDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isLiquidityDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        // mint OHM needed and store amount of rewards for distribution\\n        send_ = value.sub( _profit );\\n        IERC20Mintable( OHM ).mint( msg.sender, send_ );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit Deposit( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to burn OHM for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw( uint _amount, address _token ) external {\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" ); // Only reserves can be used for redemptions\\n        require( isReserveSpender[ msg.sender ] == true, \\\"Not approved\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n        IOHMERC20( OHM ).burnFrom( msg.sender, value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit Withdrawal( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n\\n        uint maximumDebt = IERC20( sOHM ).balanceOf( msg.sender ); // Can only borrow against sOHM held\\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\\n        require( value <= availableDebt, \\\"Exceeds debt limit\\\" );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\\n        totalDebt = totalDebt.add( value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).transfer( msg.sender, _amount );\\n        \\n        emit CreateDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        uint value = valueOf( _token, _amount );\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\\n        totalDebt = totalDebt.sub( value );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit RepayDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with OHM\\n        @param _amount uint\\n     */\\n    function repayDebtWithOHM( uint _amount ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n\\n        IOHMERC20( OHM ).burnFrom( msg.sender, _amount );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\\n        totalDebt = totalDebt.sub( _amount );\\n\\n        emit RepayDebt( msg.sender, OHM, _amount, _amount );\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage( address _token, uint _amount ) external {\\n        if( isLiquidityToken[ _token ] ) {\\n            require( isLiquidityManager[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isReserveManager[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        require( value <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit ReservesManaged( _token, _amount );\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards( address _recipient, uint _amount ) external {\\n        require( isRewardManager[ msg.sender ], \\\"Not approved\\\" );\\n        require( _amount <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        IERC20Mintable( OHM ).mint( _recipient, _amount );\\n\\n        emit RewardsMinted( msg.sender, _recipient, _amount );\\n    } \\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns ( uint ) {\\n        return totalReserves.sub( IERC20( OHM ).totalSupply().sub( totalDebt ) );\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external onlyManager() {\\n        uint reserves;\\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\\n            reserves = reserves.add ( \\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\\n            reserves = reserves.add (\\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        totalReserves = reserves;\\n        emit ReservesUpdated( reserves );\\n        emit ReservesAudited( reserves );\\n    }\\n\\n    /**\\n        @notice returns OHM valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return value_ uint\\n     */\\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\\n        if ( isReserveToken[ _token ] ) {\\n            // convert amount to match OHM decimals\\n            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\\n        } else if ( isLiquidityToken[ _token ] ) {\\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = block.number.add( blocksNeededForQueue );\\n        } else return false;\\n\\n        emit ChangeQueued( _managing, _address );\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @param _calculator address\\n        @return bool\\n     */\\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        bool result;\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\\n                reserveDepositorQueue[ _address ] = 0;\\n                if( !listContains( reserveDepositors, _address ) ) {\\n                    reserveDepositors.push( _address );\\n                }\\n            }\\n            result = !isReserveDepositor[ _address ];\\n            isReserveDepositor[ _address ] = result;\\n            \\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\\n                reserveSpenderQueue[ _address ] = 0;\\n                if( !listContains( reserveSpenders, _address ) ) {\\n                    reserveSpenders.push( _address );\\n                }\\n            }\\n            result = !isReserveSpender[ _address ];\\n            isReserveSpender[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\\n                reserveTokenQueue[ _address ] = 0;\\n                if( !listContains( reserveTokens, _address ) ) {\\n                    reserveTokens.push( _address );\\n                }\\n            }\\n            result = !isReserveToken[ _address ];\\n            isReserveToken[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\\n                reserveManagers.push( _address );\\n                ReserveManagerQueue[ _address ] = 0;\\n                if( !listContains( reserveManagers, _address ) ) {\\n                    reserveManagers.push( _address );\\n                }\\n            }\\n            result = !isReserveManager[ _address ];\\n            isReserveManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\\n                liquidityDepositors.push( _address );\\n                LiquidityDepositorQueue[ _address ] = 0;\\n                if( !listContains( liquidityDepositors, _address ) ) {\\n                    liquidityDepositors.push( _address );\\n                }\\n            }\\n            result = !isLiquidityDepositor[ _address ];\\n            isLiquidityDepositor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\\n                LiquidityTokenQueue[ _address ] = 0;\\n                if( !listContains( liquidityTokens, _address ) ) {\\n                    liquidityTokens.push( _address );\\n                }\\n            }\\n            result = !isLiquidityToken[ _address ];\\n            isLiquidityToken[ _address ] = result;\\n            bondCalculator[ _address ] = _calculator;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\\n                LiquidityManagerQueue[ _address ] = 0;\\n                if( !listContains( liquidityManagers, _address ) ) {\\n                    liquidityManagers.push( _address );\\n                }\\n            }\\n            result = !isLiquidityManager[ _address ];\\n            isLiquidityManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\\n                debtorQueue[ _address ] = 0;\\n                if( !listContains( debtors, _address ) ) {\\n                    debtors.push( _address );\\n                }\\n            }\\n            result = !isDebtor[ _address ];\\n            isDebtor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\\n                rewardManagerQueue[ _address ] = 0;\\n                if( !listContains( rewardManagers, _address ) ) {\\n                    rewardManagers.push( _address );\\n                }\\n            }\\n            result = !isRewardManager[ _address ];\\n            isRewardManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = 0;\\n            sOHM = _address;\\n            result = true;\\n\\n        } else return false;\\n\\n        emit ChangeActivated( _managing, _address, result );\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements( \\n        mapping( address => uint ) storage queue_, \\n        mapping( address => bool ) storage status_, \\n        address _address \\n    ) internal view returns ( bool ) {\\n        if ( !status_[ _address ] ) {\\n            require( queue_[ _address ] != 0, \\\"Must queue\\\" );\\n            require( queue_[ _address ] <= block.number, \\\"Queue not expired\\\" );\\n            return true;\\n        } return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\\n        for( uint i = 0; i < _list.length; i++ ) {\\n            if( _list[ i ] == _token ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x7c766ccab2d5a550bf1d62919251d0a6ea0b2b1fba1109d8a5ea2ca9499f86d9\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IOwnable": {
          "abi": [
            {
              "inputs": [],
              "name": "manager",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "pullManagement",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner_",
                  "type": "address"
                }
              ],
              "name": "pushManagement",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceManagement",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "manager()": "481c6a75",
              "pullManagement()": "5a96ac0a",
              "pushManagement(address)": "46f68ee9",
              "renounceManagement()": "089208d8"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"IOwnable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\nlibrary Address {\\n\\n  function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ninterface IOwnable {\\n  function manager() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\\n\\ncontract Ownable is IOwnable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function manager() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyManager() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\ninterface IERC20Mintable {\\n  function mint( uint256 amount_ ) external;\\n\\n  function mint( address account_, uint256 ammount_ ) external;\\n}\\n\\ninterface IOHMERC20 {\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ninterface IBondCalculator {\\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\n}\\n\\ncontract ApeTreasury is Ownable {\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit( address indexed token, uint amount, uint value );\\n    event Withdrawal( address indexed token, uint amount, uint value );\\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event ReservesManaged( address indexed token, uint amount );\\n    event ReservesUpdated( uint indexed totalReserves );\\n    event ReservesAudited( uint indexed totalReserves );\\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\\n    event ChangeQueued( MANAGING indexed managing, address queued );\\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\\n\\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SOHM }\\n\\n    address public immutable OHM;\\n    uint public immutable blocksNeededForQueue;\\n\\n    address[] public reserveTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isReserveToken;\\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\\n\\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveDepositor;\\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\\n\\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveSpender;\\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isLiquidityToken;\\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityDepositor;\\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\\n\\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\\n\\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveManager;\\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityManager;\\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\\n\\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isDebtor;\\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\\n    mapping( address => uint ) public debtorBalance;\\n\\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isRewardManager;\\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\\n\\n    address public sOHM;\\n    uint public sOHMQueue; // Delays change to sOHM address\\n    \\n    uint public totalReserves; // Risk-free value of all assets\\n    uint public totalDebt;\\n\\n    constructor (\\n        address _OHM,\\n        address _DAI,\\n        address _Frax,\\n        address _OHMDAI,\\n        uint _blocksNeededForQueue\\n    ) {\\n        require( _OHM != address(0) );\\n        OHM = _OHM;\\n\\n        isReserveToken[ _DAI ] = true;\\n        reserveTokens.push( _DAI );\\n\\n        isReserveToken[ _Frax] = true;\\n        reserveTokens.push( _Frax );\\n\\n       isLiquidityToken[ _OHMDAI ] = true;\\n       liquidityTokens.push( _OHMDAI );\\n\\n        blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for OHM\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \\\"Not accepted\\\" );\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        if ( isReserveToken[ _token ] ) {\\n            require( isReserveDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isLiquidityDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        // mint OHM needed and store amount of rewards for distribution\\n        send_ = value.sub( _profit );\\n        IERC20Mintable( OHM ).mint( msg.sender, send_ );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit Deposit( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to burn OHM for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw( uint _amount, address _token ) external {\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" ); // Only reserves can be used for redemptions\\n        require( isReserveSpender[ msg.sender ] == true, \\\"Not approved\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n        IOHMERC20( OHM ).burnFrom( msg.sender, value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit Withdrawal( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n\\n        uint maximumDebt = IERC20( sOHM ).balanceOf( msg.sender ); // Can only borrow against sOHM held\\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\\n        require( value <= availableDebt, \\\"Exceeds debt limit\\\" );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\\n        totalDebt = totalDebt.add( value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).transfer( msg.sender, _amount );\\n        \\n        emit CreateDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        uint value = valueOf( _token, _amount );\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\\n        totalDebt = totalDebt.sub( value );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit RepayDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with OHM\\n        @param _amount uint\\n     */\\n    function repayDebtWithOHM( uint _amount ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n\\n        IOHMERC20( OHM ).burnFrom( msg.sender, _amount );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\\n        totalDebt = totalDebt.sub( _amount );\\n\\n        emit RepayDebt( msg.sender, OHM, _amount, _amount );\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage( address _token, uint _amount ) external {\\n        if( isLiquidityToken[ _token ] ) {\\n            require( isLiquidityManager[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isReserveManager[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        require( value <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit ReservesManaged( _token, _amount );\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards( address _recipient, uint _amount ) external {\\n        require( isRewardManager[ msg.sender ], \\\"Not approved\\\" );\\n        require( _amount <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        IERC20Mintable( OHM ).mint( _recipient, _amount );\\n\\n        emit RewardsMinted( msg.sender, _recipient, _amount );\\n    } \\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns ( uint ) {\\n        return totalReserves.sub( IERC20( OHM ).totalSupply().sub( totalDebt ) );\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external onlyManager() {\\n        uint reserves;\\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\\n            reserves = reserves.add ( \\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\\n            reserves = reserves.add (\\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        totalReserves = reserves;\\n        emit ReservesUpdated( reserves );\\n        emit ReservesAudited( reserves );\\n    }\\n\\n    /**\\n        @notice returns OHM valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return value_ uint\\n     */\\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\\n        if ( isReserveToken[ _token ] ) {\\n            // convert amount to match OHM decimals\\n            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\\n        } else if ( isLiquidityToken[ _token ] ) {\\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = block.number.add( blocksNeededForQueue );\\n        } else return false;\\n\\n        emit ChangeQueued( _managing, _address );\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @param _calculator address\\n        @return bool\\n     */\\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        bool result;\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\\n                reserveDepositorQueue[ _address ] = 0;\\n                if( !listContains( reserveDepositors, _address ) ) {\\n                    reserveDepositors.push( _address );\\n                }\\n            }\\n            result = !isReserveDepositor[ _address ];\\n            isReserveDepositor[ _address ] = result;\\n            \\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\\n                reserveSpenderQueue[ _address ] = 0;\\n                if( !listContains( reserveSpenders, _address ) ) {\\n                    reserveSpenders.push( _address );\\n                }\\n            }\\n            result = !isReserveSpender[ _address ];\\n            isReserveSpender[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\\n                reserveTokenQueue[ _address ] = 0;\\n                if( !listContains( reserveTokens, _address ) ) {\\n                    reserveTokens.push( _address );\\n                }\\n            }\\n            result = !isReserveToken[ _address ];\\n            isReserveToken[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\\n                reserveManagers.push( _address );\\n                ReserveManagerQueue[ _address ] = 0;\\n                if( !listContains( reserveManagers, _address ) ) {\\n                    reserveManagers.push( _address );\\n                }\\n            }\\n            result = !isReserveManager[ _address ];\\n            isReserveManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\\n                liquidityDepositors.push( _address );\\n                LiquidityDepositorQueue[ _address ] = 0;\\n                if( !listContains( liquidityDepositors, _address ) ) {\\n                    liquidityDepositors.push( _address );\\n                }\\n            }\\n            result = !isLiquidityDepositor[ _address ];\\n            isLiquidityDepositor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\\n                LiquidityTokenQueue[ _address ] = 0;\\n                if( !listContains( liquidityTokens, _address ) ) {\\n                    liquidityTokens.push( _address );\\n                }\\n            }\\n            result = !isLiquidityToken[ _address ];\\n            isLiquidityToken[ _address ] = result;\\n            bondCalculator[ _address ] = _calculator;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\\n                LiquidityManagerQueue[ _address ] = 0;\\n                if( !listContains( liquidityManagers, _address ) ) {\\n                    liquidityManagers.push( _address );\\n                }\\n            }\\n            result = !isLiquidityManager[ _address ];\\n            isLiquidityManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\\n                debtorQueue[ _address ] = 0;\\n                if( !listContains( debtors, _address ) ) {\\n                    debtors.push( _address );\\n                }\\n            }\\n            result = !isDebtor[ _address ];\\n            isDebtor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\\n                rewardManagerQueue[ _address ] = 0;\\n                if( !listContains( rewardManagers, _address ) ) {\\n                    rewardManagers.push( _address );\\n                }\\n            }\\n            result = !isRewardManager[ _address ];\\n            isRewardManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = 0;\\n            sOHM = _address;\\n            result = true;\\n\\n        } else return false;\\n\\n        emit ChangeActivated( _managing, _address, result );\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements( \\n        mapping( address => uint ) storage queue_, \\n        mapping( address => bool ) storage status_, \\n        address _address \\n    ) internal view returns ( bool ) {\\n        if ( !status_[ _address ] ) {\\n            require( queue_[ _address ] != 0, \\\"Must queue\\\" );\\n            require( queue_[ _address ] <= block.number, \\\"Queue not expired\\\" );\\n            return true;\\n        } return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\\n        for( uint i = 0; i < _list.length; i++ ) {\\n            if( _list[ i ] == _token ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x7c766ccab2d5a550bf1d62919251d0a6ea0b2b1fba1109d8a5ea2ca9499f86d9\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "Ownable": {
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipPulled",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipPushed",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "manager",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "pullManagement",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner_",
                  "type": "address"
                }
              ],
              "name": "pushManagement",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceManagement",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600080546001600160a01b03191633178082556040516001600160a01b039190911691907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908290a36104af806100696000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063089208d81461005157806346f68ee91461005b578063481c6a751461008e5780635a96ac0a146100bf575b600080fd5b6100596100c7565b005b6100596004803603602081101561007157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101bc565b61009661033b565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610059610357565b60005473ffffffffffffffffffffffffffffffffffffffff16331461014d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461024257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166102ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061045b6026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60015473ffffffffffffffffffffffffffffffffffffffff1633146103c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806104816022913960400191505060405180910390fd5b6001546000805460405173ffffffffffffffffffffffffffffffffffffffff93841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a3600154600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a206d757374206265206e6577206f776e657220746f2070756c6ca164736f6c6343000705000a",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR DUP1 DUP3 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP2 SWAP1 PUSH32 0xEA8258F2D9DDB679928CF34B78CF645B7FEDA9ACC828E4DD82D014EAAE270EBA SWAP1 DUP3 SWAP1 LOG3 PUSH2 0x4AF DUP1 PUSH2 0x69 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x89208D8 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x46F68EE9 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x481C6A75 EQ PUSH2 0x8E JUMPI DUP1 PUSH4 0x5A96AC0A EQ PUSH2 0xBF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0xC7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BC JUMP JUMPDEST PUSH2 0x96 PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x59 PUSH2 0x357 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x14D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH32 0xEA8258F2D9DDB679928CF34B78CF645B7FEDA9ACC828E4DD82D014EAAE270EBA SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x242 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x2AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x45B PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0xEA8258F2D9DDB679928CF34B78CF645B7FEDA9ACC828E4DD82D014EAAE270EBA SWAP2 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x3C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x481 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND SWAP4 SWAP1 SWAP2 AND SWAP2 PUSH32 0xAA151555690C956FC3EA32F106BB9F119B5237A061EAA8557CFF3E51E3792C8D SWAP2 LOG3 PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F20616464726573734F776E61626C653A206D757374206265 KECCAK256 PUSH15 0x6577206F776E657220746F2070756C PUSH13 0xA164736F6C6343000705000A00 ",
              "sourceMap": "3418:1242:0:-:0;;;3685:103;;;;;;;;;-1:-1:-1;3710:6:0;:19;;-1:-1:-1;;;;;;3710:19:0;3719:10;3710:19;;;;3744:37;;-1:-1:-1;;;;;3773:6:0;;;;;3710;3744:37;;3710:6;;3744:37;3418:1242;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506004361061004c5760003560e01c8063089208d81461005157806346f68ee91461005b578063481c6a751461008e5780635a96ac0a146100bf575b600080fd5b6100596100c7565b005b6100596004803603602081101561007157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101bc565b61009661033b565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610059610357565b60005473ffffffffffffffffffffffffffffffffffffffff16331461014d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461024257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166102ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061045b6026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60015473ffffffffffffffffffffffffffffffffffffffff1633146103c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806104816022913960400191505060405180910390fd5b6001546000805460405173ffffffffffffffffffffffffffffffffffffffff93841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a3600154600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a206d757374206265206e6577206f776e657220746f2070756c6ca164736f6c6343000705000a",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x89208D8 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x46F68EE9 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x481C6A75 EQ PUSH2 0x8E JUMPI DUP1 PUSH4 0x5A96AC0A EQ PUSH2 0xBF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0xC7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BC JUMP JUMPDEST PUSH2 0x96 PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x59 PUSH2 0x357 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x14D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH32 0xEA8258F2D9DDB679928CF34B78CF645B7FEDA9ACC828E4DD82D014EAAE270EBA SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x242 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x2AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x45B PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0xEA8258F2D9DDB679928CF34B78CF645B7FEDA9ACC828E4DD82D014EAAE270EBA SWAP2 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x3C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x481 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND SWAP4 SWAP1 SWAP2 AND SWAP2 PUSH32 0xAA151555690C956FC3EA32F106BB9F119B5237A061EAA8557CFF3E51E3792C8D SWAP2 LOG3 PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F20616464726573734F776E61626C653A206D757374206265 KECCAK256 PUSH15 0x6577206F776E657220746F2070756C PUSH13 0xA164736F6C6343000705000A00 ",
              "sourceMap": "3418:1242:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4012:156;;;:::i;:::-;;4174:257;;;;;;;;;;;;;;;;-1:-1:-1;4174:257:0;;;;:::i;3794:88::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4441:217;;;:::i;4012:156::-;3930:6;;:20;:6;3940:10;3930:20;3921:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4128:1:::1;4112:6:::0;;4095:37:::1;::::0;::::1;4112:6:::0;;::::1;::::0;4095:37:::1;::::0;4128:1;;4095:37:::1;4159:1;4142:19:::0;;;::::1;::::0;;4012:156::o;4174:257::-;3930:6;;:20;:6;3940:10;3930:20;3921:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4276:23:::1;::::0;::::1;4267:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4374:6;::::0;;4357:36:::1;::::0;::::1;::::0;;::::1;::::0;4374:6;::::1;::::0;4357:36:::1;::::0;::::1;4403:9;:21:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;4174:257::o;3794:88::-;3843:7;3869:6;;;3794:88;:::o;4441:217::-;4524:9;;;;4510:10;:23;4501:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4612:9;;;4604:6;;4587:36;;4612:9;;;;;4604:6;;;;4587:36;;;4642:9;;;4633:18;;;;4642:9;;;;4633:18;;;;;;4441:217::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "239800",
                "executionCost": "22670",
                "totalCost": "262470"
              },
              "external": {
                "manager()": "1035",
                "pullManagement()": "infinite",
                "pushManagement(address)": "infinite",
                "renounceManagement()": "24104"
              }
            },
            "methodIdentifiers": {
              "manager()": "481c6a75",
              "pullManagement()": "5a96ac0a",
              "pushManagement(address)": "46f68ee9",
              "renounceManagement()": "089208d8"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\nlibrary Address {\\n\\n  function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ninterface IOwnable {\\n  function manager() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\\n\\ncontract Ownable is IOwnable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function manager() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyManager() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\ninterface IERC20Mintable {\\n  function mint( uint256 amount_ ) external;\\n\\n  function mint( address account_, uint256 ammount_ ) external;\\n}\\n\\ninterface IOHMERC20 {\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ninterface IBondCalculator {\\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\n}\\n\\ncontract ApeTreasury is Ownable {\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit( address indexed token, uint amount, uint value );\\n    event Withdrawal( address indexed token, uint amount, uint value );\\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event ReservesManaged( address indexed token, uint amount );\\n    event ReservesUpdated( uint indexed totalReserves );\\n    event ReservesAudited( uint indexed totalReserves );\\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\\n    event ChangeQueued( MANAGING indexed managing, address queued );\\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\\n\\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SOHM }\\n\\n    address public immutable OHM;\\n    uint public immutable blocksNeededForQueue;\\n\\n    address[] public reserveTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isReserveToken;\\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\\n\\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveDepositor;\\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\\n\\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveSpender;\\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isLiquidityToken;\\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityDepositor;\\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\\n\\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\\n\\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveManager;\\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityManager;\\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\\n\\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isDebtor;\\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\\n    mapping( address => uint ) public debtorBalance;\\n\\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isRewardManager;\\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\\n\\n    address public sOHM;\\n    uint public sOHMQueue; // Delays change to sOHM address\\n    \\n    uint public totalReserves; // Risk-free value of all assets\\n    uint public totalDebt;\\n\\n    constructor (\\n        address _OHM,\\n        address _DAI,\\n        address _Frax,\\n        address _OHMDAI,\\n        uint _blocksNeededForQueue\\n    ) {\\n        require( _OHM != address(0) );\\n        OHM = _OHM;\\n\\n        isReserveToken[ _DAI ] = true;\\n        reserveTokens.push( _DAI );\\n\\n        isReserveToken[ _Frax] = true;\\n        reserveTokens.push( _Frax );\\n\\n       isLiquidityToken[ _OHMDAI ] = true;\\n       liquidityTokens.push( _OHMDAI );\\n\\n        blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for OHM\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \\\"Not accepted\\\" );\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        if ( isReserveToken[ _token ] ) {\\n            require( isReserveDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isLiquidityDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        // mint OHM needed and store amount of rewards for distribution\\n        send_ = value.sub( _profit );\\n        IERC20Mintable( OHM ).mint( msg.sender, send_ );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit Deposit( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to burn OHM for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw( uint _amount, address _token ) external {\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" ); // Only reserves can be used for redemptions\\n        require( isReserveSpender[ msg.sender ] == true, \\\"Not approved\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n        IOHMERC20( OHM ).burnFrom( msg.sender, value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit Withdrawal( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n\\n        uint maximumDebt = IERC20( sOHM ).balanceOf( msg.sender ); // Can only borrow against sOHM held\\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\\n        require( value <= availableDebt, \\\"Exceeds debt limit\\\" );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\\n        totalDebt = totalDebt.add( value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).transfer( msg.sender, _amount );\\n        \\n        emit CreateDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        uint value = valueOf( _token, _amount );\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\\n        totalDebt = totalDebt.sub( value );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit RepayDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with OHM\\n        @param _amount uint\\n     */\\n    function repayDebtWithOHM( uint _amount ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n\\n        IOHMERC20( OHM ).burnFrom( msg.sender, _amount );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\\n        totalDebt = totalDebt.sub( _amount );\\n\\n        emit RepayDebt( msg.sender, OHM, _amount, _amount );\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage( address _token, uint _amount ) external {\\n        if( isLiquidityToken[ _token ] ) {\\n            require( isLiquidityManager[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isReserveManager[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        require( value <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit ReservesManaged( _token, _amount );\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards( address _recipient, uint _amount ) external {\\n        require( isRewardManager[ msg.sender ], \\\"Not approved\\\" );\\n        require( _amount <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        IERC20Mintable( OHM ).mint( _recipient, _amount );\\n\\n        emit RewardsMinted( msg.sender, _recipient, _amount );\\n    } \\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns ( uint ) {\\n        return totalReserves.sub( IERC20( OHM ).totalSupply().sub( totalDebt ) );\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external onlyManager() {\\n        uint reserves;\\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\\n            reserves = reserves.add ( \\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\\n            reserves = reserves.add (\\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        totalReserves = reserves;\\n        emit ReservesUpdated( reserves );\\n        emit ReservesAudited( reserves );\\n    }\\n\\n    /**\\n        @notice returns OHM valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return value_ uint\\n     */\\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\\n        if ( isReserveToken[ _token ] ) {\\n            // convert amount to match OHM decimals\\n            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\\n        } else if ( isLiquidityToken[ _token ] ) {\\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = block.number.add( blocksNeededForQueue );\\n        } else return false;\\n\\n        emit ChangeQueued( _managing, _address );\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @param _calculator address\\n        @return bool\\n     */\\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        bool result;\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\\n                reserveDepositorQueue[ _address ] = 0;\\n                if( !listContains( reserveDepositors, _address ) ) {\\n                    reserveDepositors.push( _address );\\n                }\\n            }\\n            result = !isReserveDepositor[ _address ];\\n            isReserveDepositor[ _address ] = result;\\n            \\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\\n                reserveSpenderQueue[ _address ] = 0;\\n                if( !listContains( reserveSpenders, _address ) ) {\\n                    reserveSpenders.push( _address );\\n                }\\n            }\\n            result = !isReserveSpender[ _address ];\\n            isReserveSpender[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\\n                reserveTokenQueue[ _address ] = 0;\\n                if( !listContains( reserveTokens, _address ) ) {\\n                    reserveTokens.push( _address );\\n                }\\n            }\\n            result = !isReserveToken[ _address ];\\n            isReserveToken[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\\n                reserveManagers.push( _address );\\n                ReserveManagerQueue[ _address ] = 0;\\n                if( !listContains( reserveManagers, _address ) ) {\\n                    reserveManagers.push( _address );\\n                }\\n            }\\n            result = !isReserveManager[ _address ];\\n            isReserveManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\\n                liquidityDepositors.push( _address );\\n                LiquidityDepositorQueue[ _address ] = 0;\\n                if( !listContains( liquidityDepositors, _address ) ) {\\n                    liquidityDepositors.push( _address );\\n                }\\n            }\\n            result = !isLiquidityDepositor[ _address ];\\n            isLiquidityDepositor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\\n                LiquidityTokenQueue[ _address ] = 0;\\n                if( !listContains( liquidityTokens, _address ) ) {\\n                    liquidityTokens.push( _address );\\n                }\\n            }\\n            result = !isLiquidityToken[ _address ];\\n            isLiquidityToken[ _address ] = result;\\n            bondCalculator[ _address ] = _calculator;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\\n                LiquidityManagerQueue[ _address ] = 0;\\n                if( !listContains( liquidityManagers, _address ) ) {\\n                    liquidityManagers.push( _address );\\n                }\\n            }\\n            result = !isLiquidityManager[ _address ];\\n            isLiquidityManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\\n                debtorQueue[ _address ] = 0;\\n                if( !listContains( debtors, _address ) ) {\\n                    debtors.push( _address );\\n                }\\n            }\\n            result = !isDebtor[ _address ];\\n            isDebtor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\\n                rewardManagerQueue[ _address ] = 0;\\n                if( !listContains( rewardManagers, _address ) ) {\\n                    rewardManagers.push( _address );\\n                }\\n            }\\n            result = !isRewardManager[ _address ];\\n            isRewardManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = 0;\\n            sOHM = _address;\\n            result = true;\\n\\n        } else return false;\\n\\n        emit ChangeActivated( _managing, _address, result );\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements( \\n        mapping( address => uint ) storage queue_, \\n        mapping( address => bool ) storage status_, \\n        address _address \\n    ) internal view returns ( bool ) {\\n        if ( !status_[ _address ] ) {\\n            require( queue_[ _address ] != 0, \\\"Must queue\\\" );\\n            require( queue_[ _address ] <= block.number, \\\"Queue not expired\\\" );\\n            return true;\\n        } return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\\n        for( uint i = 0; i < _list.length; i++ ) {\\n            if( _list[ i ] == _token ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x7c766ccab2d5a550bf1d62919251d0a6ea0b2b1fba1109d8a5ea2ca9499f86d9\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 284,
                "contract": "contracts/Treasury.sol:Ownable",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 286,
                "contract": "contracts/Treasury.sol:Ownable",
                "label": "_newOwner",
                "offset": 0,
                "slot": "1",
                "type": "t_address"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "SafeERC20": {
          "abi": [],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "602d6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000705000a",
              "opcodes": "PUSH1 0x2D PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP SMOD SDIV STOP EXP ",
              "sourceMap": "5302:892:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000705000a",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP SMOD SDIV STOP EXP ",
              "sourceMap": "5302:892:0:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "9000",
                "executionCost": "88",
                "totalCost": "9088"
              },
              "internal": {
                "_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
                "safeTransfer(contract IERC20,address,uint256)": "infinite",
                "safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\nlibrary Address {\\n\\n  function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ninterface IOwnable {\\n  function manager() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\\n\\ncontract Ownable is IOwnable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function manager() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyManager() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\ninterface IERC20Mintable {\\n  function mint( uint256 amount_ ) external;\\n\\n  function mint( address account_, uint256 ammount_ ) external;\\n}\\n\\ninterface IOHMERC20 {\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ninterface IBondCalculator {\\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\n}\\n\\ncontract ApeTreasury is Ownable {\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit( address indexed token, uint amount, uint value );\\n    event Withdrawal( address indexed token, uint amount, uint value );\\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event ReservesManaged( address indexed token, uint amount );\\n    event ReservesUpdated( uint indexed totalReserves );\\n    event ReservesAudited( uint indexed totalReserves );\\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\\n    event ChangeQueued( MANAGING indexed managing, address queued );\\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\\n\\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SOHM }\\n\\n    address public immutable OHM;\\n    uint public immutable blocksNeededForQueue;\\n\\n    address[] public reserveTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isReserveToken;\\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\\n\\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveDepositor;\\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\\n\\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveSpender;\\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isLiquidityToken;\\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityDepositor;\\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\\n\\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\\n\\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveManager;\\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityManager;\\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\\n\\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isDebtor;\\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\\n    mapping( address => uint ) public debtorBalance;\\n\\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isRewardManager;\\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\\n\\n    address public sOHM;\\n    uint public sOHMQueue; // Delays change to sOHM address\\n    \\n    uint public totalReserves; // Risk-free value of all assets\\n    uint public totalDebt;\\n\\n    constructor (\\n        address _OHM,\\n        address _DAI,\\n        address _Frax,\\n        address _OHMDAI,\\n        uint _blocksNeededForQueue\\n    ) {\\n        require( _OHM != address(0) );\\n        OHM = _OHM;\\n\\n        isReserveToken[ _DAI ] = true;\\n        reserveTokens.push( _DAI );\\n\\n        isReserveToken[ _Frax] = true;\\n        reserveTokens.push( _Frax );\\n\\n       isLiquidityToken[ _OHMDAI ] = true;\\n       liquidityTokens.push( _OHMDAI );\\n\\n        blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for OHM\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \\\"Not accepted\\\" );\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        if ( isReserveToken[ _token ] ) {\\n            require( isReserveDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isLiquidityDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        // mint OHM needed and store amount of rewards for distribution\\n        send_ = value.sub( _profit );\\n        IERC20Mintable( OHM ).mint( msg.sender, send_ );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit Deposit( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to burn OHM for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw( uint _amount, address _token ) external {\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" ); // Only reserves can be used for redemptions\\n        require( isReserveSpender[ msg.sender ] == true, \\\"Not approved\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n        IOHMERC20( OHM ).burnFrom( msg.sender, value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit Withdrawal( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n\\n        uint maximumDebt = IERC20( sOHM ).balanceOf( msg.sender ); // Can only borrow against sOHM held\\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\\n        require( value <= availableDebt, \\\"Exceeds debt limit\\\" );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\\n        totalDebt = totalDebt.add( value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).transfer( msg.sender, _amount );\\n        \\n        emit CreateDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        uint value = valueOf( _token, _amount );\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\\n        totalDebt = totalDebt.sub( value );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit RepayDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with OHM\\n        @param _amount uint\\n     */\\n    function repayDebtWithOHM( uint _amount ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n\\n        IOHMERC20( OHM ).burnFrom( msg.sender, _amount );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\\n        totalDebt = totalDebt.sub( _amount );\\n\\n        emit RepayDebt( msg.sender, OHM, _amount, _amount );\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage( address _token, uint _amount ) external {\\n        if( isLiquidityToken[ _token ] ) {\\n            require( isLiquidityManager[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isReserveManager[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        require( value <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit ReservesManaged( _token, _amount );\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards( address _recipient, uint _amount ) external {\\n        require( isRewardManager[ msg.sender ], \\\"Not approved\\\" );\\n        require( _amount <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        IERC20Mintable( OHM ).mint( _recipient, _amount );\\n\\n        emit RewardsMinted( msg.sender, _recipient, _amount );\\n    } \\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns ( uint ) {\\n        return totalReserves.sub( IERC20( OHM ).totalSupply().sub( totalDebt ) );\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external onlyManager() {\\n        uint reserves;\\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\\n            reserves = reserves.add ( \\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\\n            reserves = reserves.add (\\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        totalReserves = reserves;\\n        emit ReservesUpdated( reserves );\\n        emit ReservesAudited( reserves );\\n    }\\n\\n    /**\\n        @notice returns OHM valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return value_ uint\\n     */\\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\\n        if ( isReserveToken[ _token ] ) {\\n            // convert amount to match OHM decimals\\n            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\\n        } else if ( isLiquidityToken[ _token ] ) {\\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = block.number.add( blocksNeededForQueue );\\n        } else return false;\\n\\n        emit ChangeQueued( _managing, _address );\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @param _calculator address\\n        @return bool\\n     */\\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        bool result;\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\\n                reserveDepositorQueue[ _address ] = 0;\\n                if( !listContains( reserveDepositors, _address ) ) {\\n                    reserveDepositors.push( _address );\\n                }\\n            }\\n            result = !isReserveDepositor[ _address ];\\n            isReserveDepositor[ _address ] = result;\\n            \\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\\n                reserveSpenderQueue[ _address ] = 0;\\n                if( !listContains( reserveSpenders, _address ) ) {\\n                    reserveSpenders.push( _address );\\n                }\\n            }\\n            result = !isReserveSpender[ _address ];\\n            isReserveSpender[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\\n                reserveTokenQueue[ _address ] = 0;\\n                if( !listContains( reserveTokens, _address ) ) {\\n                    reserveTokens.push( _address );\\n                }\\n            }\\n            result = !isReserveToken[ _address ];\\n            isReserveToken[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\\n                reserveManagers.push( _address );\\n                ReserveManagerQueue[ _address ] = 0;\\n                if( !listContains( reserveManagers, _address ) ) {\\n                    reserveManagers.push( _address );\\n                }\\n            }\\n            result = !isReserveManager[ _address ];\\n            isReserveManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\\n                liquidityDepositors.push( _address );\\n                LiquidityDepositorQueue[ _address ] = 0;\\n                if( !listContains( liquidityDepositors, _address ) ) {\\n                    liquidityDepositors.push( _address );\\n                }\\n            }\\n            result = !isLiquidityDepositor[ _address ];\\n            isLiquidityDepositor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\\n                LiquidityTokenQueue[ _address ] = 0;\\n                if( !listContains( liquidityTokens, _address ) ) {\\n                    liquidityTokens.push( _address );\\n                }\\n            }\\n            result = !isLiquidityToken[ _address ];\\n            isLiquidityToken[ _address ] = result;\\n            bondCalculator[ _address ] = _calculator;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\\n                LiquidityManagerQueue[ _address ] = 0;\\n                if( !listContains( liquidityManagers, _address ) ) {\\n                    liquidityManagers.push( _address );\\n                }\\n            }\\n            result = !isLiquidityManager[ _address ];\\n            isLiquidityManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\\n                debtorQueue[ _address ] = 0;\\n                if( !listContains( debtors, _address ) ) {\\n                    debtors.push( _address );\\n                }\\n            }\\n            result = !isDebtor[ _address ];\\n            isDebtor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\\n                rewardManagerQueue[ _address ] = 0;\\n                if( !listContains( rewardManagers, _address ) ) {\\n                    rewardManagers.push( _address );\\n                }\\n            }\\n            result = !isRewardManager[ _address ];\\n            isRewardManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = 0;\\n            sOHM = _address;\\n            result = true;\\n\\n        } else return false;\\n\\n        emit ChangeActivated( _managing, _address, result );\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements( \\n        mapping( address => uint ) storage queue_, \\n        mapping( address => bool ) storage status_, \\n        address _address \\n    ) internal view returns ( bool ) {\\n        if ( !status_[ _address ] ) {\\n            require( queue_[ _address ] != 0, \\\"Must queue\\\" );\\n            require( queue_[ _address ] <= block.number, \\\"Queue not expired\\\" );\\n            return true;\\n        } return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\\n        for( uint i = 0; i < _list.length; i++ ) {\\n            if( _list[ i ] == _token ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x7c766ccab2d5a550bf1d62919251d0a6ea0b2b1fba1109d8a5ea2ca9499f86d9\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "SafeMath": {
          "abi": [],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "602d6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000705000a",
              "opcodes": "PUSH1 0x2D PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP SMOD SDIV STOP EXP ",
              "sourceMap": "70:1109:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000705000a",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP SMOD SDIV STOP EXP ",
              "sourceMap": "70:1109:0:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "9000",
                "executionCost": "88",
                "totalCost": "9088"
              },
              "internal": {
                "add(uint256,uint256)": "infinite",
                "div(uint256,uint256)": "infinite",
                "div(uint256,uint256,string memory)": "infinite",
                "mul(uint256,uint256)": "infinite",
                "sub(uint256,uint256)": "infinite",
                "sub(uint256,uint256,string memory)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\nlibrary Address {\\n\\n  function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ninterface IOwnable {\\n  function manager() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\\n\\ncontract Ownable is IOwnable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function manager() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyManager() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyManager() {\\n        emit OwnershipPushed( _owner, address(0) );\\n        _owner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\ninterface IERC20Mintable {\\n  function mint( uint256 amount_ ) external;\\n\\n  function mint( address account_, uint256 ammount_ ) external;\\n}\\n\\ninterface IOHMERC20 {\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ninterface IBondCalculator {\\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\n}\\n\\ncontract ApeTreasury is Ownable {\\n\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit( address indexed token, uint amount, uint value );\\n    event Withdrawal( address indexed token, uint amount, uint value );\\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\\n    event ReservesManaged( address indexed token, uint amount );\\n    event ReservesUpdated( uint indexed totalReserves );\\n    event ReservesAudited( uint indexed totalReserves );\\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\\n    event ChangeQueued( MANAGING indexed managing, address queued );\\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\\n\\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SOHM }\\n\\n    address public immutable OHM;\\n    uint public immutable blocksNeededForQueue;\\n\\n    address[] public reserveTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isReserveToken;\\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\\n\\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveDepositor;\\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\\n\\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveSpender;\\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityTokens; // Push only, beware false-positives.\\n    mapping( address => bool ) public isLiquidityToken;\\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityDepositor;\\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\\n\\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\\n\\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isReserveManager;\\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\\n\\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isLiquidityManager;\\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\\n\\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isDebtor;\\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\\n    mapping( address => uint ) public debtorBalance;\\n\\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\\n    mapping( address => bool ) public isRewardManager;\\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\\n\\n    address public sOHM;\\n    uint public sOHMQueue; // Delays change to sOHM address\\n    \\n    uint public totalReserves; // Risk-free value of all assets\\n    uint public totalDebt;\\n\\n    constructor (\\n        address _OHM,\\n        address _DAI,\\n        address _Frax,\\n        address _OHMDAI,\\n        uint _blocksNeededForQueue\\n    ) {\\n        require( _OHM != address(0) );\\n        OHM = _OHM;\\n\\n        isReserveToken[ _DAI ] = true;\\n        reserveTokens.push( _DAI );\\n\\n        isReserveToken[ _Frax] = true;\\n        reserveTokens.push( _Frax );\\n\\n       isLiquidityToken[ _OHMDAI ] = true;\\n       liquidityTokens.push( _OHMDAI );\\n\\n        blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for OHM\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \\\"Not accepted\\\" );\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        if ( isReserveToken[ _token ] ) {\\n            require( isReserveDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isLiquidityDepositor[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        // mint OHM needed and store amount of rewards for distribution\\n        send_ = value.sub( _profit );\\n        IERC20Mintable( OHM ).mint( msg.sender, send_ );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit Deposit( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to burn OHM for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw( uint _amount, address _token ) external {\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" ); // Only reserves can be used for redemptions\\n        require( isReserveSpender[ msg.sender ] == true, \\\"Not approved\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n        IOHMERC20( OHM ).burnFrom( msg.sender, value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit Withdrawal( _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        uint value = valueOf( _token, _amount );\\n\\n        uint maximumDebt = IERC20( sOHM ).balanceOf( msg.sender ); // Can only borrow against sOHM held\\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\\n        require( value <= availableDebt, \\\"Exceeds debt limit\\\" );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\\n        totalDebt = totalDebt.add( value );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).transfer( msg.sender, _amount );\\n        \\n        emit CreateDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve( uint _amount, address _token ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n        require( isReserveToken[ _token ], \\\"Not accepted\\\" );\\n\\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        uint value = valueOf( _token, _amount );\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\\n        totalDebt = totalDebt.sub( value );\\n\\n        totalReserves = totalReserves.add( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        emit RepayDebt( msg.sender, _token, _amount, value );\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with OHM\\n        @param _amount uint\\n     */\\n    function repayDebtWithOHM( uint _amount ) external {\\n        require( isDebtor[ msg.sender ], \\\"Not approved\\\" );\\n\\n        IOHMERC20( OHM ).burnFrom( msg.sender, _amount );\\n\\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\\n        totalDebt = totalDebt.sub( _amount );\\n\\n        emit RepayDebt( msg.sender, OHM, _amount, _amount );\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage( address _token, uint _amount ) external {\\n        if( isLiquidityToken[ _token ] ) {\\n            require( isLiquidityManager[ msg.sender ], \\\"Not approved\\\" );\\n        } else {\\n            require( isReserveManager[ msg.sender ], \\\"Not approved\\\" );\\n        }\\n\\n        uint value = valueOf(_token, _amount);\\n        require( value <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        totalReserves = totalReserves.sub( value );\\n        emit ReservesUpdated( totalReserves );\\n\\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\\n\\n        emit ReservesManaged( _token, _amount );\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards( address _recipient, uint _amount ) external {\\n        require( isRewardManager[ msg.sender ], \\\"Not approved\\\" );\\n        require( _amount <= excessReserves(), \\\"Insufficient reserves\\\" );\\n\\n        IERC20Mintable( OHM ).mint( _recipient, _amount );\\n\\n        emit RewardsMinted( msg.sender, _recipient, _amount );\\n    } \\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns ( uint ) {\\n        return totalReserves.sub( IERC20( OHM ).totalSupply().sub( totalDebt ) );\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external onlyManager() {\\n        uint reserves;\\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\\n            reserves = reserves.add ( \\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\\n            reserves = reserves.add (\\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\\n            );\\n        }\\n        totalReserves = reserves;\\n        emit ReservesUpdated( reserves );\\n        emit ReservesAudited( reserves );\\n    }\\n\\n    /**\\n        @notice returns OHM valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return value_ uint\\n     */\\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\\n        if ( isReserveToken[ _token ] ) {\\n            // convert amount to match OHM decimals\\n            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\\n        } else if ( isLiquidityToken[ _token ] ) {\\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = block.number.add( blocksNeededForQueue );\\n        } else return false;\\n\\n        emit ChangeQueued( _managing, _address );\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @param _calculator address\\n        @return bool\\n     */\\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\\n        require( _address != address(0) );\\n        bool result;\\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\\n                reserveDepositorQueue[ _address ] = 0;\\n                if( !listContains( reserveDepositors, _address ) ) {\\n                    reserveDepositors.push( _address );\\n                }\\n            }\\n            result = !isReserveDepositor[ _address ];\\n            isReserveDepositor[ _address ] = result;\\n            \\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\\n                reserveSpenderQueue[ _address ] = 0;\\n                if( !listContains( reserveSpenders, _address ) ) {\\n                    reserveSpenders.push( _address );\\n                }\\n            }\\n            result = !isReserveSpender[ _address ];\\n            isReserveSpender[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\\n                reserveTokenQueue[ _address ] = 0;\\n                if( !listContains( reserveTokens, _address ) ) {\\n                    reserveTokens.push( _address );\\n                }\\n            }\\n            result = !isReserveToken[ _address ];\\n            isReserveToken[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\\n                reserveManagers.push( _address );\\n                ReserveManagerQueue[ _address ] = 0;\\n                if( !listContains( reserveManagers, _address ) ) {\\n                    reserveManagers.push( _address );\\n                }\\n            }\\n            result = !isReserveManager[ _address ];\\n            isReserveManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\\n                liquidityDepositors.push( _address );\\n                LiquidityDepositorQueue[ _address ] = 0;\\n                if( !listContains( liquidityDepositors, _address ) ) {\\n                    liquidityDepositors.push( _address );\\n                }\\n            }\\n            result = !isLiquidityDepositor[ _address ];\\n            isLiquidityDepositor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\\n                LiquidityTokenQueue[ _address ] = 0;\\n                if( !listContains( liquidityTokens, _address ) ) {\\n                    liquidityTokens.push( _address );\\n                }\\n            }\\n            result = !isLiquidityToken[ _address ];\\n            isLiquidityToken[ _address ] = result;\\n            bondCalculator[ _address ] = _calculator;\\n\\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\\n                LiquidityManagerQueue[ _address ] = 0;\\n                if( !listContains( liquidityManagers, _address ) ) {\\n                    liquidityManagers.push( _address );\\n                }\\n            }\\n            result = !isLiquidityManager[ _address ];\\n            isLiquidityManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\\n                debtorQueue[ _address ] = 0;\\n                if( !listContains( debtors, _address ) ) {\\n                    debtors.push( _address );\\n                }\\n            }\\n            result = !isDebtor[ _address ];\\n            isDebtor[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\\n                rewardManagerQueue[ _address ] = 0;\\n                if( !listContains( rewardManagers, _address ) ) {\\n                    rewardManagers.push( _address );\\n                }\\n            }\\n            result = !isRewardManager[ _address ];\\n            isRewardManager[ _address ] = result;\\n\\n        } else if ( _managing == MANAGING.SOHM ) { // 9\\n            sOHMQueue = 0;\\n            sOHM = _address;\\n            result = true;\\n\\n        } else return false;\\n\\n        emit ChangeActivated( _managing, _address, result );\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements( \\n        mapping( address => uint ) storage queue_, \\n        mapping( address => bool ) storage status_, \\n        address _address \\n    ) internal view returns ( bool ) {\\n        if ( !status_[ _address ] ) {\\n            require( queue_[ _address ] != 0, \\\"Must queue\\\" );\\n            require( queue_[ _address ] <= block.number, \\\"Queue not expired\\\" );\\n            return true;\\n        } return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\\n        for( uint i = 0; i < _list.length; i++ ) {\\n            if( _list[ i ] == _token ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x7c766ccab2d5a550bf1d62919251d0a6ea0b2b1fba1109d8a5ea2ca9499f86d9\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      }
    },
    "sources": {
      "contracts/Treasury.sol": {
        "ast": {
          "absolutePath": "contracts/Treasury.sol",
          "exportedSymbols": {
            "Address": [
              263
            ],
            "ApeTreasury": [
              2311
            ],
            "IBondCalculator": [
              593
            ],
            "IERC20": [
              472
            ],
            "IERC20Mintable": [
              575
            ],
            "IOHMERC20": [
              583
            ],
            "IOwnable": [
              280
            ],
            "Ownable": [
              409
            ],
            "SafeERC20": [
              562
            ],
            "SafeMath": [
              147
            ]
          },
          "id": 2312,
          "license": "AGPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "0.7",
                ".5"
              ],
              "nodeType": "PragmaDirective",
              "src": "46:22:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 147,
              "linearizedBaseContracts": [
                147
              ],
              "name": "SafeMath",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 25,
                    "nodeType": "Block",
                    "src": "161:109:0",
                    "statements": [
                      {
                        "assignments": [
                          11
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 11,
                            "mutability": "mutable",
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 25,
                            "src": "171:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 10,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "171:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 15,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 14,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 12,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3,
                            "src": "183:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 13,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "187:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "183:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "171:17:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 19,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 17,
                                "name": "c",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11,
                                "src": "206:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 18,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3,
                                "src": "211:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "206:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
                              "id": 20,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "214:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
                                "typeString": "literal_string \"SafeMath: addition overflow\""
                              },
                              "value": "SafeMath: addition overflow"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
                                "typeString": "literal_string \"SafeMath: addition overflow\""
                              }
                            ],
                            "id": 16,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "198:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 21,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "198:46:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 22,
                        "nodeType": "ExpressionStatement",
                        "src": "198:46:0"
                      },
                      {
                        "expression": {
                          "id": 23,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11,
                          "src": "262:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 9,
                        "id": 24,
                        "nodeType": "Return",
                        "src": "255:8:0"
                      }
                    ]
                  },
                  "id": 26,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "add",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 6,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3,
                        "mutability": "mutable",
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 26,
                        "src": "107:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "107:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 5,
                        "mutability": "mutable",
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 26,
                        "src": "118:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "118:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "106:22:0"
                  },
                  "returnParameters": {
                    "id": 9,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 8,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 26,
                        "src": "152:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 7,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "152:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "151:9:0"
                  },
                  "scope": 147,
                  "src": "94:176:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 41,
                    "nodeType": "Block",
                    "src": "343:67:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 36,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 28,
                              "src": "364:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 37,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 30,
                              "src": "367:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
                              "id": 38,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "370:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
                                "typeString": "literal_string \"SafeMath: subtraction overflow\""
                              },
                              "value": "SafeMath: subtraction overflow"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
                                "typeString": "literal_string \"SafeMath: subtraction overflow\""
                              }
                            ],
                            "id": 35,
                            "name": "sub",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              42,
                              69
                            ],
                            "referencedDeclaration": 69,
                            "src": "360:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
                            }
                          },
                          "id": 39,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "360:43:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 34,
                        "id": 40,
                        "nodeType": "Return",
                        "src": "353:50:0"
                      }
                    ]
                  },
                  "id": 42,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sub",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 31,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 28,
                        "mutability": "mutable",
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 42,
                        "src": "289:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 27,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "289:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 30,
                        "mutability": "mutable",
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 42,
                        "src": "300:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 29,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "300:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "288:22:0"
                  },
                  "returnParameters": {
                    "id": 34,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 33,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 42,
                        "src": "334:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 32,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "334:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "333:9:0"
                  },
                  "scope": 147,
                  "src": "276:134:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 68,
                    "nodeType": "Block",
                    "src": "511:92:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 56,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 54,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 46,
                                "src": "529:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "id": 55,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 44,
                                "src": "534:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "529:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 57,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 48,
                              "src": "537:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 53,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "521:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 58,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "521:29:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 59,
                        "nodeType": "ExpressionStatement",
                        "src": "521:29:0"
                      },
                      {
                        "assignments": [
                          61
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 61,
                            "mutability": "mutable",
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 68,
                            "src": "560:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 60,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "560:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 65,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 64,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 62,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 44,
                            "src": "572:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 63,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46,
                            "src": "576:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "572:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "560:17:0"
                      },
                      {
                        "expression": {
                          "id": 66,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 61,
                          "src": "595:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 52,
                        "id": 67,
                        "nodeType": "Return",
                        "src": "588:8:0"
                      }
                    ]
                  },
                  "id": 69,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sub",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 49,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 44,
                        "mutability": "mutable",
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 69,
                        "src": "429:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 43,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "429:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 46,
                        "mutability": "mutable",
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 69,
                        "src": "440:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 45,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "440:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 48,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nodeType": "VariableDeclaration",
                        "scope": 69,
                        "src": "451:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 47,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "451:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "428:50:0"
                  },
                  "returnParameters": {
                    "id": 52,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 51,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 69,
                        "src": "502:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 50,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "502:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "501:9:0"
                  },
                  "scope": 147,
                  "src": "416:187:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 102,
                    "nodeType": "Block",
                    "src": "676:174:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 80,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 78,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 71,
                            "src": "690:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 79,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "695:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "690:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 84,
                        "nodeType": "IfStatement",
                        "src": "686:45:0",
                        "trueBody": {
                          "id": 83,
                          "nodeType": "Block",
                          "src": "698:33:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "30",
                                "id": 81,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "719:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 77,
                              "id": 82,
                              "nodeType": "Return",
                              "src": "712:8:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          86
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 86,
                            "mutability": "mutable",
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 102,
                            "src": "741:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 85,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "741:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 90,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 89,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 87,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 71,
                            "src": "753:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "id": 88,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 73,
                            "src": "757:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "753:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "741:17:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 96,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 94,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 92,
                                  "name": "c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 86,
                                  "src": "776:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "id": 93,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 71,
                                  "src": "780:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "776:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 95,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 73,
                                "src": "785:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "776:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
                              "id": 97,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "788:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
                                "typeString": "literal_string \"SafeMath: multiplication overflow\""
                              },
                              "value": "SafeMath: multiplication overflow"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
                                "typeString": "literal_string \"SafeMath: multiplication overflow\""
                              }
                            ],
                            "id": 91,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "768:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 98,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "768:56:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 99,
                        "nodeType": "ExpressionStatement",
                        "src": "768:56:0"
                      },
                      {
                        "expression": {
                          "id": 100,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 86,
                          "src": "842:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 77,
                        "id": 101,
                        "nodeType": "Return",
                        "src": "835:8:0"
                      }
                    ]
                  },
                  "id": 103,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mul",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 74,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 71,
                        "mutability": "mutable",
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 103,
                        "src": "622:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 70,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "622:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 73,
                        "mutability": "mutable",
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 103,
                        "src": "633:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 72,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "633:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "621:22:0"
                  },
                  "returnParameters": {
                    "id": 77,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 76,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 103,
                        "src": "667:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 75,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "667:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "666:9:0"
                  },
                  "scope": 147,
                  "src": "609:241:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 118,
                    "nodeType": "Block",
                    "src": "923:63:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 113,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 105,
                              "src": "944:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 114,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 107,
                              "src": "947:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
                              "id": 115,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "950:28:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
                                "typeString": "literal_string \"SafeMath: division by zero\""
                              },
                              "value": "SafeMath: division by zero"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
                                "typeString": "literal_string \"SafeMath: division by zero\""
                              }
                            ],
                            "id": 112,
                            "name": "div",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              119,
                              146
                            ],
                            "referencedDeclaration": 146,
                            "src": "940:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
                            }
                          },
                          "id": 116,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "940:39:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 111,
                        "id": 117,
                        "nodeType": "Return",
                        "src": "933:46:0"
                      }
                    ]
                  },
                  "id": 119,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "div",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 108,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 105,
                        "mutability": "mutable",
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 119,
                        "src": "869:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 104,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "869:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 107,
                        "mutability": "mutable",
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 119,
                        "src": "880:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 106,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "880:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "868:22:0"
                  },
                  "returnParameters": {
                    "id": 111,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 110,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 119,
                        "src": "914:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 109,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "914:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "913:9:0"
                  },
                  "scope": 147,
                  "src": "856:130:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 145,
                    "nodeType": "Block",
                    "src": "1087:90:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 133,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 131,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 123,
                                "src": "1105:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 132,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1109:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "1105:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 134,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 125,
                              "src": "1112:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 130,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1097:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 135,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1097:28:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 136,
                        "nodeType": "ExpressionStatement",
                        "src": "1097:28:0"
                      },
                      {
                        "assignments": [
                          138
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 138,
                            "mutability": "mutable",
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 145,
                            "src": "1135:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 137,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1135:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 142,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 141,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 139,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 121,
                            "src": "1147:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 140,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 123,
                            "src": "1151:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1147:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1135:17:0"
                      },
                      {
                        "expression": {
                          "id": 143,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 138,
                          "src": "1169:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 129,
                        "id": 144,
                        "nodeType": "Return",
                        "src": "1162:8:0"
                      }
                    ]
                  },
                  "id": 146,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "div",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 126,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 121,
                        "mutability": "mutable",
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 146,
                        "src": "1005:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 120,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1005:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 123,
                        "mutability": "mutable",
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 146,
                        "src": "1016:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 122,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1016:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 125,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nodeType": "VariableDeclaration",
                        "scope": 146,
                        "src": "1027:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 124,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1027:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1004:50:0"
                  },
                  "returnParameters": {
                    "id": 129,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 128,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 146,
                        "src": "1078:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 127,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1078:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1077:9:0"
                  },
                  "scope": 147,
                  "src": "992:185:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 2312,
              "src": "70:1109:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 263,
              "linearizedBaseContracts": [
                263
              ],
              "name": "Address",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 162,
                    "nodeType": "Block",
                    "src": "1268:347:0",
                    "statements": [
                      {
                        "assignments": [
                          155
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 155,
                            "mutability": "mutable",
                            "name": "size",
                            "nodeType": "VariableDeclaration",
                            "scope": 162,
                            "src": "1465:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 154,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1465:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 156,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1465:12:0"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "1552:32:0",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1554:28:0",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "account",
                                    "nodeType": "YulIdentifier",
                                    "src": "1574:7:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "extcodesize",
                                  "nodeType": "YulIdentifier",
                                  "src": "1562:11:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1562:20:0"
                              },
                              "variableNames": [
                                {
                                  "name": "size",
                                  "nodeType": "YulIdentifier",
                                  "src": "1554:4:0"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 149,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1574:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 155,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1554:4:0",
                            "valueSize": 1
                          }
                        ],
                        "id": 157,
                        "nodeType": "InlineAssembly",
                        "src": "1543:41:0"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 160,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 158,
                            "name": "size",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 155,
                            "src": "1600:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 159,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1607:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1600:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 153,
                        "id": 161,
                        "nodeType": "Return",
                        "src": "1593:15:0"
                      }
                    ]
                  },
                  "id": 163,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isContract",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 150,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 149,
                        "mutability": "mutable",
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "scope": 163,
                        "src": "1222:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 148,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1222:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1221:17:0"
                  },
                  "returnParameters": {
                    "id": 153,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 152,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 163,
                        "src": "1262:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 151,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1262:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1261:6:0"
                  },
                  "scope": 263,
                  "src": "1202:413:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 181,
                    "nodeType": "Block",
                    "src": "1738:77:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 175,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 165,
                              "src": "1778:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 176,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 167,
                              "src": "1786:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "30",
                              "id": 177,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1792:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "id": 178,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 169,
                              "src": "1795:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 174,
                            "name": "_functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 232,
                            "src": "1755:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 179,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1755:53:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 173,
                        "id": 180,
                        "nodeType": "Return",
                        "src": "1748:60:0"
                      }
                    ]
                  },
                  "id": 182,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 170,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 165,
                        "mutability": "mutable",
                        "name": "target",
                        "nodeType": "VariableDeclaration",
                        "scope": 182,
                        "src": "1643:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 164,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1643:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 167,
                        "mutability": "mutable",
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 182,
                        "src": "1659:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 166,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1659:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 169,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nodeType": "VariableDeclaration",
                        "scope": 182,
                        "src": "1678:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 168,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1678:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1642:63:0"
                  },
                  "returnParameters": {
                    "id": 173,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 172,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 182,
                        "src": "1724:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 171,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1724:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1723:14:0"
                  },
                  "scope": 263,
                  "src": "1621:194:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 231,
                    "nodeType": "Block",
                    "src": "1965:655:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 197,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 184,
                                  "src": "1994:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 196,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 163,
                                "src": "1983:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 198,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1983:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 199,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2003:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                "typeString": "literal_string \"Address: call to non-contract\""
                              },
                              "value": "Address: call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                "typeString": "literal_string \"Address: call to non-contract\""
                              }
                            ],
                            "id": 195,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1975:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 200,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1975:60:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 201,
                        "nodeType": "ExpressionStatement",
                        "src": "1975:60:0"
                      },
                      {
                        "assignments": [
                          203,
                          205
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 203,
                            "mutability": "mutable",
                            "name": "success",
                            "nodeType": "VariableDeclaration",
                            "scope": 231,
                            "src": "2106:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 202,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "2106:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 205,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nodeType": "VariableDeclaration",
                            "scope": 231,
                            "src": "2120:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 204,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "2120:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 212,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 210,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 186,
                              "src": "2178:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "expression": {
                                "id": 206,
                                "name": "target",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 184,
                                "src": "2147:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 207,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "2147:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 209,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 208,
                                "name": "weiValue",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 188,
                                "src": "2167:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "2147:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 211,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2147:36:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2105:78:0"
                      },
                      {
                        "condition": {
                          "id": 213,
                          "name": "success",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 203,
                          "src": "2197:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 229,
                          "nodeType": "Block",
                          "src": "2254:360:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 220,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 217,
                                    "name": "returndata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 205,
                                    "src": "2272:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 218,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "2272:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 219,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2292:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "2272:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 227,
                                "nodeType": "Block",
                                "src": "2551:53:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 224,
                                          "name": "errorMessage",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 190,
                                          "src": "2576:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_string_memory_ptr",
                                            "typeString": "string memory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_string_memory_ptr",
                                            "typeString": "string memory"
                                          }
                                        ],
                                        "id": 223,
                                        "name": "revert",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [
                                          -19,
                                          -19
                                        ],
                                        "referencedDeclaration": -19,
                                        "src": "2569:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                          "typeString": "function (string memory) pure"
                                        }
                                      },
                                      "id": 225,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2569:20:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 226,
                                    "nodeType": "ExpressionStatement",
                                    "src": "2569:20:0"
                                  }
                                ]
                              },
                              "id": 228,
                              "nodeType": "IfStatement",
                              "src": "2268:336:0",
                              "trueBody": {
                                "id": 222,
                                "nodeType": "Block",
                                "src": "2295:250:0",
                                "statements": [
                                  {
                                    "AST": {
                                      "nodeType": "YulBlock",
                                      "src": "2386:145:0",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "2408:40:0",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "returndata",
                                                "nodeType": "YulIdentifier",
                                                "src": "2437:10:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "2431:5:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2431:17:0"
                                          },
                                          "variables": [
                                            {
                                              "name": "returndata_size",
                                              "nodeType": "YulTypedName",
                                              "src": "2412:15:0",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2480:2:0",
                                                    "type": "",
                                                    "value": "32"
                                                  },
                                                  {
                                                    "name": "returndata",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2484:10:0"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2476:3:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2476:19:0"
                                              },
                                              {
                                                "name": "returndata_size",
                                                "nodeType": "YulIdentifier",
                                                "src": "2497:15:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "revert",
                                              "nodeType": "YulIdentifier",
                                              "src": "2469:6:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2469:44:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2469:44:0"
                                        }
                                      ]
                                    },
                                    "evmVersion": "istanbul",
                                    "externalReferences": [
                                      {
                                        "declaration": 205,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "2437:10:0",
                                        "valueSize": 1
                                      },
                                      {
                                        "declaration": 205,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "2484:10:0",
                                        "valueSize": 1
                                      }
                                    ],
                                    "id": 221,
                                    "nodeType": "InlineAssembly",
                                    "src": "2377:154:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "id": 230,
                        "nodeType": "IfStatement",
                        "src": "2193:421:0",
                        "trueBody": {
                          "id": 216,
                          "nodeType": "Block",
                          "src": "2206:42:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 214,
                                "name": "returndata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 205,
                                "src": "2227:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "functionReturnParameters": 194,
                              "id": 215,
                              "nodeType": "Return",
                              "src": "2220:17:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 232,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_functionCallWithValue",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 191,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 184,
                        "mutability": "mutable",
                        "name": "target",
                        "nodeType": "VariableDeclaration",
                        "scope": 232,
                        "src": "1853:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 183,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1853:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 186,
                        "mutability": "mutable",
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 232,
                        "src": "1869:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 185,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1869:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 188,
                        "mutability": "mutable",
                        "name": "weiValue",
                        "nodeType": "VariableDeclaration",
                        "scope": 232,
                        "src": "1888:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 187,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1888:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 190,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nodeType": "VariableDeclaration",
                        "scope": 232,
                        "src": "1906:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 189,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1906:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1852:81:0"
                  },
                  "returnParameters": {
                    "id": 194,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 193,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 232,
                        "src": "1951:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 192,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1951:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1950:14:0"
                  },
                  "scope": 263,
                  "src": "1821:799:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 261,
                    "nodeType": "Block",
                    "src": "2755:437:0",
                    "statements": [
                      {
                        "condition": {
                          "id": 243,
                          "name": "success",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 234,
                          "src": "2769:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 259,
                          "nodeType": "Block",
                          "src": "2826:360:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 250,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 247,
                                    "name": "returndata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 236,
                                    "src": "2844:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 248,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "2844:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 249,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2864:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "2844:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 257,
                                "nodeType": "Block",
                                "src": "3123:53:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 254,
                                          "name": "errorMessage",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 238,
                                          "src": "3148:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_string_memory_ptr",
                                            "typeString": "string memory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_string_memory_ptr",
                                            "typeString": "string memory"
                                          }
                                        ],
                                        "id": 253,
                                        "name": "revert",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [
                                          -19,
                                          -19
                                        ],
                                        "referencedDeclaration": -19,
                                        "src": "3141:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                          "typeString": "function (string memory) pure"
                                        }
                                      },
                                      "id": 255,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "3141:20:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 256,
                                    "nodeType": "ExpressionStatement",
                                    "src": "3141:20:0"
                                  }
                                ]
                              },
                              "id": 258,
                              "nodeType": "IfStatement",
                              "src": "2840:336:0",
                              "trueBody": {
                                "id": 252,
                                "nodeType": "Block",
                                "src": "2867:250:0",
                                "statements": [
                                  {
                                    "AST": {
                                      "nodeType": "YulBlock",
                                      "src": "2958:145:0",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "2980:40:0",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "returndata",
                                                "nodeType": "YulIdentifier",
                                                "src": "3009:10:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "3003:5:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3003:17:0"
                                          },
                                          "variables": [
                                            {
                                              "name": "returndata_size",
                                              "nodeType": "YulTypedName",
                                              "src": "2984:15:0",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "3052:2:0",
                                                    "type": "",
                                                    "value": "32"
                                                  },
                                                  {
                                                    "name": "returndata",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3056:10:0"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3048:3:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "3048:19:0"
                                              },
                                              {
                                                "name": "returndata_size",
                                                "nodeType": "YulIdentifier",
                                                "src": "3069:15:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "revert",
                                              "nodeType": "YulIdentifier",
                                              "src": "3041:6:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3041:44:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "3041:44:0"
                                        }
                                      ]
                                    },
                                    "evmVersion": "istanbul",
                                    "externalReferences": [
                                      {
                                        "declaration": 236,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "3009:10:0",
                                        "valueSize": 1
                                      },
                                      {
                                        "declaration": 236,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "3056:10:0",
                                        "valueSize": 1
                                      }
                                    ],
                                    "id": 251,
                                    "nodeType": "InlineAssembly",
                                    "src": "2949:154:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "id": 260,
                        "nodeType": "IfStatement",
                        "src": "2765:421:0",
                        "trueBody": {
                          "id": 246,
                          "nodeType": "Block",
                          "src": "2778:42:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 244,
                                "name": "returndata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 236,
                                "src": "2799:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "functionReturnParameters": 242,
                              "id": 245,
                              "nodeType": "Return",
                              "src": "2792:17:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 262,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_verifyCallResult",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 239,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 234,
                        "mutability": "mutable",
                        "name": "success",
                        "nodeType": "VariableDeclaration",
                        "scope": 262,
                        "src": "2653:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 233,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2653:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 236,
                        "mutability": "mutable",
                        "name": "returndata",
                        "nodeType": "VariableDeclaration",
                        "scope": 262,
                        "src": "2667:23:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 235,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "2667:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 238,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nodeType": "VariableDeclaration",
                        "scope": 262,
                        "src": "2692:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 237,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2692:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2652:67:0"
                  },
                  "returnParameters": {
                    "id": 242,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 241,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 262,
                        "src": "2741:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 240,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "2741:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2740:14:0"
                  },
                  "scope": 263,
                  "src": "2626:566:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 2312,
              "src": "1181:2013:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 280,
              "linearizedBaseContracts": [
                280
              ],
              "name": "IOwnable",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "481c6a75",
                  "id": 268,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "manager",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 264,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3235:2:0"
                  },
                  "returnParameters": {
                    "id": 267,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 266,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 268,
                        "src": "3261:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 265,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3261:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3260:9:0"
                  },
                  "scope": 280,
                  "src": "3219:51:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "089208d8",
                  "id": 271,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "renounceManagement",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 269,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3301:2:0"
                  },
                  "returnParameters": {
                    "id": 270,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3312:0:0"
                  },
                  "scope": 280,
                  "src": "3274:39:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "46f68ee9",
                  "id": 276,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "pushManagement",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 274,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 273,
                        "mutability": "mutable",
                        "name": "newOwner_",
                        "nodeType": "VariableDeclaration",
                        "scope": 276,
                        "src": "3344:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 272,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3344:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3342:21:0"
                  },
                  "returnParameters": {
                    "id": 275,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3372:0:0"
                  },
                  "scope": 280,
                  "src": "3319:54:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "5a96ac0a",
                  "id": 279,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "pullManagement",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 277,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3402:2:0"
                  },
                  "returnParameters": {
                    "id": 278,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3413:0:0"
                  },
                  "scope": 280,
                  "src": "3379:35:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 2312,
              "src": "3196:220:0"
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 281,
                    "name": "IOwnable",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 280,
                    "src": "3438:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IOwnable_$280",
                      "typeString": "contract IOwnable"
                    }
                  },
                  "id": 282,
                  "nodeType": "InheritanceSpecifier",
                  "src": "3438:8:0"
                }
              ],
              "contractDependencies": [
                280
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 409,
              "linearizedBaseContracts": [
                409,
                280
              ],
              "name": "Ownable",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 284,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 409,
                  "src": "3454:23:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 283,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3454:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 286,
                  "mutability": "mutable",
                  "name": "_newOwner",
                  "nodeType": "VariableDeclaration",
                  "scope": 409,
                  "src": "3483:26:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 285,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3483:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "anonymous": false,
                  "id": 292,
                  "name": "OwnershipPushed",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 291,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 288,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 292,
                        "src": "3538:29:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 287,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3538:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 290,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 292,
                        "src": "3569:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 289,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3569:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3537:57:0"
                  },
                  "src": "3516:79:0"
                },
                {
                  "anonymous": false,
                  "id": 298,
                  "name": "OwnershipPulled",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 297,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 294,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 298,
                        "src": "3622:29:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 293,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3622:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 296,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 298,
                        "src": "3653:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 295,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3653:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3621:57:0"
                  },
                  "src": "3600:79:0"
                },
                {
                  "body": {
                    "id": 314,
                    "nodeType": "Block",
                    "src": "3700:88:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 304,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 301,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 284,
                            "src": "3710:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 302,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "3719:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 303,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3719:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "3710:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 305,
                        "nodeType": "ExpressionStatement",
                        "src": "3710:19:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 309,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3769:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 308,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3761:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 307,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3761:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 310,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3761:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 311,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 284,
                              "src": "3773:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 306,
                            "name": "OwnershipPushed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 292,
                            "src": "3744:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3744:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 313,
                        "nodeType": "EmitStatement",
                        "src": "3739:42:0"
                      }
                    ]
                  },
                  "id": 315,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 299,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3697:2:0"
                  },
                  "returnParameters": {
                    "id": 300,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3700:0:0"
                  },
                  "scope": 409,
                  "src": "3685:103:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    268
                  ],
                  "body": {
                    "id": 323,
                    "nodeType": "Block",
                    "src": "3852:30:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 321,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 284,
                          "src": "3869:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 320,
                        "id": 322,
                        "nodeType": "Return",
                        "src": "3862:13:0"
                      }
                    ]
                  },
                  "functionSelector": "481c6a75",
                  "id": 324,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "manager",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 317,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "3825:8:0"
                  },
                  "parameters": {
                    "id": 316,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3810:2:0"
                  },
                  "returnParameters": {
                    "id": 320,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 319,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 324,
                        "src": "3843:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 318,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3843:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3842:9:0"
                  },
                  "scope": 409,
                  "src": "3794:88:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 335,
                    "nodeType": "Block",
                    "src": "3911:95:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 330,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 327,
                                "name": "_owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 284,
                                "src": "3930:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 328,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "3940:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 329,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3940:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "3930:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                              "id": 331,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3952:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                                "typeString": "literal_string \"Ownable: caller is not the owner\""
                              },
                              "value": "Ownable: caller is not the owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                                "typeString": "literal_string \"Ownable: caller is not the owner\""
                              }
                            ],
                            "id": 326,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3921:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 332,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3921:67:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 333,
                        "nodeType": "ExpressionStatement",
                        "src": "3921:67:0"
                      },
                      {
                        "id": 334,
                        "nodeType": "PlaceholderStatement",
                        "src": "3998:1:0"
                      }
                    ]
                  },
                  "id": 336,
                  "name": "onlyManager",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 325,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3908:2:0"
                  },
                  "src": "3888:118:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "baseFunctions": [
                    271
                  ],
                  "body": {
                    "id": 357,
                    "nodeType": "Block",
                    "src": "4080:88:0",
                    "statements": [
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 343,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 284,
                              "src": "4112:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 346,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4128:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 345,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4120:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 344,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4120:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 347,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4120:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "id": 342,
                            "name": "OwnershipPushed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 292,
                            "src": "4095:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 348,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4095:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 349,
                        "nodeType": "EmitStatement",
                        "src": "4090:42:0"
                      },
                      {
                        "expression": {
                          "id": 355,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 350,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 284,
                            "src": "4142:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 353,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4159:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 352,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4151:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 351,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4151:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 354,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4151:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "4142:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 356,
                        "nodeType": "ExpressionStatement",
                        "src": "4142:19:0"
                      }
                    ]
                  },
                  "functionSelector": "089208d8",
                  "id": 358,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [],
                      "id": 340,
                      "modifierName": {
                        "id": 339,
                        "name": "onlyManager",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 336,
                        "src": "4066:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4066:13:0"
                    }
                  ],
                  "name": "renounceManagement",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 338,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4057:8:0"
                  },
                  "parameters": {
                    "id": 337,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4039:2:0"
                  },
                  "returnParameters": {
                    "id": 341,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4080:0:0"
                  },
                  "scope": 409,
                  "src": "4012:156:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    276
                  ],
                  "body": {
                    "id": 385,
                    "nodeType": "Block",
                    "src": "4257:174:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 372,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 367,
                                "name": "newOwner_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 360,
                                "src": "4276:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 370,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4297:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 369,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "4289:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 368,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "4289:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 371,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4289:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "4276:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
                              "id": 373,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4301:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                                "typeString": "literal_string \"Ownable: new owner is the zero address\""
                              },
                              "value": "Ownable: new owner is the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                                "typeString": "literal_string \"Ownable: new owner is the zero address\""
                              }
                            ],
                            "id": 366,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4267:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 374,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4267:75:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 375,
                        "nodeType": "ExpressionStatement",
                        "src": "4267:75:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 377,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 284,
                              "src": "4374:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 378,
                              "name": "newOwner_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 360,
                              "src": "4382:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 376,
                            "name": "OwnershipPushed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 292,
                            "src": "4357:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 379,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4357:36:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 380,
                        "nodeType": "EmitStatement",
                        "src": "4352:41:0"
                      },
                      {
                        "expression": {
                          "id": 383,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 381,
                            "name": "_newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 286,
                            "src": "4403:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 382,
                            "name": "newOwner_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 360,
                            "src": "4415:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4403:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 384,
                        "nodeType": "ExpressionStatement",
                        "src": "4403:21:0"
                      }
                    ]
                  },
                  "functionSelector": "46f68ee9",
                  "id": 386,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [],
                      "id": 364,
                      "modifierName": {
                        "id": 363,
                        "name": "onlyManager",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 336,
                        "src": "4243:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4243:13:0"
                    }
                  ],
                  "name": "pushManagement",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 362,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4234:8:0"
                  },
                  "parameters": {
                    "id": 361,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 360,
                        "mutability": "mutable",
                        "name": "newOwner_",
                        "nodeType": "VariableDeclaration",
                        "scope": 386,
                        "src": "4199:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 359,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4199:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4197:21:0"
                  },
                  "returnParameters": {
                    "id": 365,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4257:0:0"
                  },
                  "scope": 409,
                  "src": "4174:257:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    279
                  ],
                  "body": {
                    "id": 407,
                    "nodeType": "Block",
                    "src": "4491:167:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 394,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 391,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "4510:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 392,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "4510:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 393,
                                "name": "_newOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 286,
                                "src": "4524:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "4510:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a206d757374206265206e6577206f776e657220746f2070756c6c",
                              "id": 395,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4535:36:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_4de71fbd3469e1b7fc89a70805ae86972c680281e629f271ab7471fd6321445c",
                                "typeString": "literal_string \"Ownable: must be new owner to pull\""
                              },
                              "value": "Ownable: must be new owner to pull"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_4de71fbd3469e1b7fc89a70805ae86972c680281e629f271ab7471fd6321445c",
                                "typeString": "literal_string \"Ownable: must be new owner to pull\""
                              }
                            ],
                            "id": 390,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4501:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4501:71:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 397,
                        "nodeType": "ExpressionStatement",
                        "src": "4501:71:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 399,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 284,
                              "src": "4604:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 400,
                              "name": "_newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 286,
                              "src": "4612:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 398,
                            "name": "OwnershipPulled",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 298,
                            "src": "4587:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 401,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4587:36:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 402,
                        "nodeType": "EmitStatement",
                        "src": "4582:41:0"
                      },
                      {
                        "expression": {
                          "id": 405,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 403,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 284,
                            "src": "4633:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 404,
                            "name": "_newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 286,
                            "src": "4642:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4633:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 406,
                        "nodeType": "ExpressionStatement",
                        "src": "4633:18:0"
                      }
                    ]
                  },
                  "functionSelector": "5a96ac0a",
                  "id": 408,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "pullManagement",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 388,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4482:8:0"
                  },
                  "parameters": {
                    "id": 387,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4464:2:0"
                  },
                  "returnParameters": {
                    "id": 389,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4491:0:0"
                  },
                  "scope": 409,
                  "src": "4441:217:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                }
              ],
              "scope": 2312,
              "src": "3418:1242:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 472,
              "linearizedBaseContracts": [
                472
              ],
              "name": "IERC20",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "313ce567",
                  "id": 414,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "decimals",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 410,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4702:2:0"
                  },
                  "returnParameters": {
                    "id": 413,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 412,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 414,
                        "src": "4728:5:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 411,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "4728:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4727:7:0"
                  },
                  "scope": 472,
                  "src": "4685:50:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "70a08231",
                  "id": 421,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 417,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 416,
                        "mutability": "mutable",
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "scope": 421,
                        "src": "4760:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 415,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4760:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4759:17:0"
                  },
                  "returnParameters": {
                    "id": 420,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 419,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 421,
                        "src": "4800:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 418,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4800:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4799:9:0"
                  },
                  "scope": 472,
                  "src": "4741:68:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "a9059cbb",
                  "id": 430,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 426,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 423,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 430,
                        "src": "4833:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 422,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4833:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 425,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 430,
                        "src": "4852:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 424,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4852:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4832:35:0"
                  },
                  "returnParameters": {
                    "id": 429,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 428,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 430,
                        "src": "4886:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 427,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4886:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4885:6:0"
                  },
                  "scope": 472,
                  "src": "4815:77:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "095ea7b3",
                  "id": 439,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 435,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 432,
                        "mutability": "mutable",
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 439,
                        "src": "4915:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 431,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4915:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 434,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 439,
                        "src": "4932:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 433,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4932:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4914:33:0"
                  },
                  "returnParameters": {
                    "id": 438,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 437,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 439,
                        "src": "4966:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 436,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4966:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4965:6:0"
                  },
                  "scope": 472,
                  "src": "4898:74:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "18160ddd",
                  "id": 444,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 440,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4998:2:0"
                  },
                  "returnParameters": {
                    "id": 443,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 442,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 444,
                        "src": "5024:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 441,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5024:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5023:9:0"
                  },
                  "scope": 472,
                  "src": "4978:55:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "23b872dd",
                  "id": 455,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 451,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 446,
                        "mutability": "mutable",
                        "name": "sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 455,
                        "src": "5061:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 445,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5061:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 448,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 455,
                        "src": "5077:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 447,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5077:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 450,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 455,
                        "src": "5096:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 449,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5096:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5060:51:0"
                  },
                  "returnParameters": {
                    "id": 454,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 453,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 455,
                        "src": "5130:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 452,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "5130:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5129:6:0"
                  },
                  "scope": 472,
                  "src": "5039:97:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "id": 463,
                  "name": "Transfer",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 462,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 457,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nodeType": "VariableDeclaration",
                        "scope": 463,
                        "src": "5157:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 456,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5157:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 459,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 463,
                        "src": "5179:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 458,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5179:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 461,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 463,
                        "src": "5199:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 460,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5199:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5156:57:0"
                  },
                  "src": "5142:72:0"
                },
                {
                  "anonymous": false,
                  "id": 471,
                  "name": "Approval",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 470,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 465,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 471,
                        "src": "5235:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 464,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5235:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 467,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 471,
                        "src": "5258:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 466,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5258:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 469,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 471,
                        "src": "5283:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 468,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5283:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5234:63:0"
                  },
                  "src": "5220:78:0"
                }
              ],
              "scope": 2312,
              "src": "4662:638:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 562,
              "linearizedBaseContracts": [
                562
              ],
              "name": "SafeERC20",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 475,
                  "libraryName": {
                    "id": 473,
                    "name": "SafeMath",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 147,
                    "src": "5332:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SafeMath_$147",
                      "typeString": "library SafeMath"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "5326:27:0",
                  "typeName": {
                    "id": 474,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5345:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "id": 478,
                  "libraryName": {
                    "id": 476,
                    "name": "Address",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 263,
                    "src": "5364:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Address_$263",
                      "typeString": "library Address"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "5358:26:0",
                  "typeName": {
                    "id": 477,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5376:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                },
                {
                  "body": {
                    "id": 499,
                    "nodeType": "Block",
                    "src": "5462:103:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 488,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 480,
                              "src": "5492:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$472",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "expression": {
                                      "id": 491,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 480,
                                      "src": "5522:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$472",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 492,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "transfer",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 430,
                                    "src": "5522:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 493,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "src": "5522:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "id": 494,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 482,
                                  "src": "5547:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 495,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 484,
                                  "src": "5551:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 489,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "5499:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 490,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "5499:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 496,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5499:58:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IERC20_$472",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 487,
                            "name": "_callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 561,
                            "src": "5472:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$472_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 497,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5472:86:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 498,
                        "nodeType": "ExpressionStatement",
                        "src": "5472:86:0"
                      }
                    ]
                  },
                  "id": 500,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransfer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 485,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 480,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 500,
                        "src": "5412:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$472",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 479,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 472,
                          "src": "5412:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$472",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 482,
                        "mutability": "mutable",
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 500,
                        "src": "5426:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 481,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5426:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 484,
                        "mutability": "mutable",
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 500,
                        "src": "5438:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 483,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5438:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5411:41:0"
                  },
                  "returnParameters": {
                    "id": 486,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5462:0:0"
                  },
                  "scope": 562,
                  "src": "5390:175:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 524,
                    "nodeType": "Block",
                    "src": "5661:113:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 512,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 502,
                              "src": "5691:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$472",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "expression": {
                                      "id": 515,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 502,
                                      "src": "5721:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$472",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 516,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "transferFrom",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 455,
                                    "src": "5721:18:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 517,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "src": "5721:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "id": 518,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 504,
                                  "src": "5750:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 519,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 506,
                                  "src": "5756:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 520,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 508,
                                  "src": "5760:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 513,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "5698:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 514,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "5698:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 521,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5698:68:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IERC20_$472",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 511,
                            "name": "_callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 561,
                            "src": "5671:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$472_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 522,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5671:96:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 523,
                        "nodeType": "ExpressionStatement",
                        "src": "5671:96:0"
                      }
                    ]
                  },
                  "id": 525,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 509,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 502,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 525,
                        "src": "5597:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$472",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 501,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 472,
                          "src": "5597:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$472",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 504,
                        "mutability": "mutable",
                        "name": "from",
                        "nodeType": "VariableDeclaration",
                        "scope": 525,
                        "src": "5611:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 503,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5611:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 506,
                        "mutability": "mutable",
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 525,
                        "src": "5625:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 505,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5625:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 508,
                        "mutability": "mutable",
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 525,
                        "src": "5637:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 507,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5637:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5596:55:0"
                  },
                  "returnParameters": {
                    "id": 510,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5661:0:0"
                  },
                  "scope": 562,
                  "src": "5571:203:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 560,
                    "nodeType": "Block",
                    "src": "5850:342:0",
                    "statements": [
                      {
                        "assignments": [
                          533
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 533,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nodeType": "VariableDeclaration",
                            "scope": 560,
                            "src": "5860:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 532,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "5860:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 542,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 539,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "5914:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
                              "id": 540,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5920:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
                                "typeString": "literal_string \"SafeERC20: low-level call failed\""
                              },
                              "value": "SafeERC20: low-level call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
                                "typeString": "literal_string \"SafeERC20: low-level call failed\""
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 536,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 527,
                                  "src": "5894:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$472",
                                    "typeString": "contract IERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IERC20_$472",
                                    "typeString": "contract IERC20"
                                  }
                                ],
                                "id": 535,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "5886:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 534,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "5886:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 537,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5886:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 538,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "functionCall",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 182,
                            "src": "5886:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 541,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5886:69:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5860:95:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 546,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 543,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 533,
                              "src": "5969:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 544,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "5969:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 545,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5989:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5969:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 559,
                        "nodeType": "IfStatement",
                        "src": "5965:221:0",
                        "trueBody": {
                          "id": 558,
                          "nodeType": "Block",
                          "src": "5992:194:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "id": 550,
                                        "name": "returndata",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 533,
                                        "src": "6109:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      {
                                        "components": [
                                          {
                                            "id": 552,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "6122:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_bool_$",
                                              "typeString": "type(bool)"
                                            },
                                            "typeName": {
                                              "id": 551,
                                              "name": "bool",
                                              "nodeType": "ElementaryTypeName",
                                              "src": "6122:4:0",
                                              "typeDescriptions": {}
                                            }
                                          }
                                        ],
                                        "id": 553,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "6121:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        },
                                        {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      ],
                                      "expression": {
                                        "id": 548,
                                        "name": "abi",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -1,
                                        "src": "6098:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_abi",
                                          "typeString": "abi"
                                        }
                                      },
                                      "id": 549,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "decode",
                                      "nodeType": "MemberAccess",
                                      "src": "6098:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                        "typeString": "function () pure"
                                      }
                                    },
                                    "id": 554,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "6098:30:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
                                    "id": 555,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "6130:44:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                                      "typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
                                    },
                                    "value": "SafeERC20: ERC20 operation did not succeed"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                                      "typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
                                    }
                                  ],
                                  "id": 547,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "6090:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 556,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6090:85:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 557,
                              "nodeType": "ExpressionStatement",
                              "src": "6090:85:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 561,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_callOptionalReturn",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 530,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 527,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 561,
                        "src": "5809:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$472",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 526,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 472,
                          "src": "5809:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$472",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 529,
                        "mutability": "mutable",
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 561,
                        "src": "5823:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 528,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5823:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5808:33:0"
                  },
                  "returnParameters": {
                    "id": 531,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5850:0:0"
                  },
                  "scope": 562,
                  "src": "5780:412:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 2312,
              "src": "5302:892:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 575,
              "linearizedBaseContracts": [
                575
              ],
              "name": "IERC20Mintable",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "a0712d68",
                  "id": 567,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mint",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 565,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 564,
                        "mutability": "mutable",
                        "name": "amount_",
                        "nodeType": "VariableDeclaration",
                        "scope": 567,
                        "src": "6240:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 563,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6240:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6238:19:0"
                  },
                  "returnParameters": {
                    "id": 566,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6266:0:0"
                  },
                  "scope": 575,
                  "src": "6225:42:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "40c10f19",
                  "id": 574,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mint",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 572,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 569,
                        "mutability": "mutable",
                        "name": "account_",
                        "nodeType": "VariableDeclaration",
                        "scope": 574,
                        "src": "6286:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 568,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6286:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 571,
                        "mutability": "mutable",
                        "name": "ammount_",
                        "nodeType": "VariableDeclaration",
                        "scope": 574,
                        "src": "6304:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 570,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6304:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6284:38:0"
                  },
                  "returnParameters": {
                    "id": 573,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6331:0:0"
                  },
                  "scope": 575,
                  "src": "6271:61:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 2312,
              "src": "6196:138:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 583,
              "linearizedBaseContracts": [
                583
              ],
              "name": "IOHMERC20",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "79cc6790",
                  "id": 582,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "burnFrom",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 580,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 577,
                        "mutability": "mutable",
                        "name": "account_",
                        "nodeType": "VariableDeclaration",
                        "scope": 582,
                        "src": "6380:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 576,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6380:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 579,
                        "mutability": "mutable",
                        "name": "amount_",
                        "nodeType": "VariableDeclaration",
                        "scope": 582,
                        "src": "6398:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 578,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6398:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6379:35:0"
                  },
                  "returnParameters": {
                    "id": 581,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6423:0:0"
                  },
                  "scope": 583,
                  "src": "6362:62:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 2312,
              "src": "6336:90:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 593,
              "linearizedBaseContracts": [
                593
              ],
              "name": "IBondCalculator",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "4249719f",
                  "id": 592,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "valuation",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 588,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 585,
                        "mutability": "mutable",
                        "name": "pair_",
                        "nodeType": "VariableDeclaration",
                        "scope": 592,
                        "src": "6478:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 584,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6478:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 587,
                        "mutability": "mutable",
                        "name": "amount_",
                        "nodeType": "VariableDeclaration",
                        "scope": 592,
                        "src": "6493:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 586,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6493:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6476:31:0"
                  },
                  "returnParameters": {
                    "id": 591,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 590,
                        "mutability": "mutable",
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 592,
                        "src": "6532:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 589,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6532:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6530:15:0"
                  },
                  "scope": 593,
                  "src": "6458:88:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 2312,
              "src": "6428:120:0"
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 594,
                    "name": "Ownable",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 409,
                    "src": "6574:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Ownable_$409",
                      "typeString": "contract Ownable"
                    }
                  },
                  "id": 595,
                  "nodeType": "InheritanceSpecifier",
                  "src": "6574:7:0"
                }
              ],
              "contractDependencies": [
                280,
                409
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 2311,
              "linearizedBaseContracts": [
                2311,
                409,
                280
              ],
              "name": "ApeTreasury",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 598,
                  "libraryName": {
                    "id": 596,
                    "name": "SafeMath",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 147,
                    "src": "6595:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SafeMath_$147",
                      "typeString": "library SafeMath"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "6589:24:0",
                  "typeName": {
                    "id": 597,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6608:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "id": 601,
                  "libraryName": {
                    "id": 599,
                    "name": "SafeERC20",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 562,
                    "src": "6624:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SafeERC20_$562",
                      "typeString": "library SafeERC20"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "6618:27:0",
                  "typeName": {
                    "id": 600,
                    "name": "IERC20",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 472,
                    "src": "6638:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$472",
                      "typeString": "contract IERC20"
                    }
                  }
                },
                {
                  "anonymous": false,
                  "id": 609,
                  "name": "Deposit",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 608,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 603,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 609,
                        "src": "6666:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 602,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6666:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 605,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 609,
                        "src": "6689:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 604,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6689:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 607,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 609,
                        "src": "6702:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 606,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6702:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6664:50:0"
                  },
                  "src": "6651:64:0"
                },
                {
                  "anonymous": false,
                  "id": 617,
                  "name": "Withdrawal",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 616,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 611,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 617,
                        "src": "6738:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 610,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6738:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 613,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 617,
                        "src": "6761:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 612,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6761:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 615,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 617,
                        "src": "6774:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 614,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6774:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6736:50:0"
                  },
                  "src": "6720:67:0"
                },
                {
                  "anonymous": false,
                  "id": 627,
                  "name": "CreateDebt",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 626,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 619,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "debtor",
                        "nodeType": "VariableDeclaration",
                        "scope": 627,
                        "src": "6810:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 618,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6810:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 621,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 627,
                        "src": "6834:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 620,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6834:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 623,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 627,
                        "src": "6857:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 622,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6857:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 625,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 627,
                        "src": "6870:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 624,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6870:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6808:74:0"
                  },
                  "src": "6792:91:0"
                },
                {
                  "anonymous": false,
                  "id": 637,
                  "name": "RepayDebt",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 636,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 629,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "debtor",
                        "nodeType": "VariableDeclaration",
                        "scope": 637,
                        "src": "6905:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 628,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6905:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 631,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 637,
                        "src": "6929:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 630,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6929:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 633,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 637,
                        "src": "6952:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 632,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6952:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 635,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 637,
                        "src": "6965:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 634,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6965:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6903:74:0"
                  },
                  "src": "6888:90:0"
                },
                {
                  "anonymous": false,
                  "id": 643,
                  "name": "ReservesManaged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 642,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 639,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 643,
                        "src": "7006:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 638,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7006:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 641,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 643,
                        "src": "7029:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 640,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7029:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7004:38:0"
                  },
                  "src": "6983:60:0"
                },
                {
                  "anonymous": false,
                  "id": 647,
                  "name": "ReservesUpdated",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 646,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 645,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "totalReserves",
                        "nodeType": "VariableDeclaration",
                        "scope": 647,
                        "src": "7071:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 644,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7071:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7069:30:0"
                  },
                  "src": "7048:52:0"
                },
                {
                  "anonymous": false,
                  "id": 651,
                  "name": "ReservesAudited",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 650,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 649,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "totalReserves",
                        "nodeType": "VariableDeclaration",
                        "scope": 651,
                        "src": "7128:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 648,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7128:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7126:30:0"
                  },
                  "src": "7105:52:0"
                },
                {
                  "anonymous": false,
                  "id": 659,
                  "name": "RewardsMinted",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 658,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 653,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "caller",
                        "nodeType": "VariableDeclaration",
                        "scope": 659,
                        "src": "7183:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 652,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7183:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 655,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 659,
                        "src": "7207:25:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 654,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7207:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 657,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 659,
                        "src": "7234:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 656,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7234:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7181:66:0"
                  },
                  "src": "7162:86:0"
                },
                {
                  "anonymous": false,
                  "id": 665,
                  "name": "ChangeQueued",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 664,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 661,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "managing",
                        "nodeType": "VariableDeclaration",
                        "scope": 665,
                        "src": "7273:25:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_MANAGING_$684",
                          "typeString": "enum ApeTreasury.MANAGING"
                        },
                        "typeName": {
                          "id": 660,
                          "name": "MANAGING",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 684,
                          "src": "7273:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_MANAGING_$684",
                            "typeString": "enum ApeTreasury.MANAGING"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 663,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "queued",
                        "nodeType": "VariableDeclaration",
                        "scope": 665,
                        "src": "7300:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 662,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7300:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7271:45:0"
                  },
                  "src": "7253:64:0"
                },
                {
                  "anonymous": false,
                  "id": 673,
                  "name": "ChangeActivated",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 672,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 667,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "managing",
                        "nodeType": "VariableDeclaration",
                        "scope": 673,
                        "src": "7345:25:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_MANAGING_$684",
                          "typeString": "enum ApeTreasury.MANAGING"
                        },
                        "typeName": {
                          "id": 666,
                          "name": "MANAGING",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 684,
                          "src": "7345:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_MANAGING_$684",
                            "typeString": "enum ApeTreasury.MANAGING"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 669,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "activated",
                        "nodeType": "VariableDeclaration",
                        "scope": 673,
                        "src": "7372:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 668,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7372:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 671,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "result",
                        "nodeType": "VariableDeclaration",
                        "scope": 673,
                        "src": "7391:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 670,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7391:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7343:61:0"
                  },
                  "src": "7322:83:0"
                },
                {
                  "canonicalName": "ApeTreasury.MANAGING",
                  "id": 684,
                  "members": [
                    {
                      "id": 674,
                      "name": "RESERVEDEPOSITOR",
                      "nodeType": "EnumValue",
                      "src": "7427:16:0"
                    },
                    {
                      "id": 675,
                      "name": "RESERVESPENDER",
                      "nodeType": "EnumValue",
                      "src": "7445:14:0"
                    },
                    {
                      "id": 676,
                      "name": "RESERVETOKEN",
                      "nodeType": "EnumValue",
                      "src": "7461:12:0"
                    },
                    {
                      "id": 677,
                      "name": "RESERVEMANAGER",
                      "nodeType": "EnumValue",
                      "src": "7475:14:0"
                    },
                    {
                      "id": 678,
                      "name": "LIQUIDITYDEPOSITOR",
                      "nodeType": "EnumValue",
                      "src": "7491:18:0"
                    },
                    {
                      "id": 679,
                      "name": "LIQUIDITYTOKEN",
                      "nodeType": "EnumValue",
                      "src": "7511:14:0"
                    },
                    {
                      "id": 680,
                      "name": "LIQUIDITYMANAGER",
                      "nodeType": "EnumValue",
                      "src": "7527:16:0"
                    },
                    {
                      "id": 681,
                      "name": "DEBTOR",
                      "nodeType": "EnumValue",
                      "src": "7545:6:0"
                    },
                    {
                      "id": 682,
                      "name": "REWARDMANAGER",
                      "nodeType": "EnumValue",
                      "src": "7553:13:0"
                    },
                    {
                      "id": 683,
                      "name": "SOHM",
                      "nodeType": "EnumValue",
                      "src": "7568:4:0"
                    }
                  ],
                  "name": "MANAGING",
                  "nodeType": "EnumDefinition",
                  "src": "7411:163:0"
                },
                {
                  "constant": false,
                  "functionSelector": "a6c41fec",
                  "id": 686,
                  "mutability": "immutable",
                  "name": "OHM",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "7580:28:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 685,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7580:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "d07f390f",
                  "id": 688,
                  "mutability": "immutable",
                  "name": "blocksNeededForQueue",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "7614:42:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 687,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7614:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "d031370b",
                  "id": 691,
                  "mutability": "mutable",
                  "name": "reserveTokens",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "7663:30:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 689,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "7663:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 690,
                    "nodeType": "ArrayTypeName",
                    "src": "7663:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "68c31dd5",
                  "id": 695,
                  "mutability": "mutable",
                  "name": "isReserveToken",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "7737:48:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "typeName": {
                    "id": 694,
                    "keyType": {
                      "id": 692,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "7746:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "7737:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                      "typeString": "mapping(address => bool)"
                    },
                    "valueType": {
                      "id": 693,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "7757:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "788c6c01",
                  "id": 699,
                  "mutability": "mutable",
                  "name": "reserveTokenQueue",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "7791:51:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 698,
                    "keyType": {
                      "id": 696,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "7800:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "7791:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 697,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "7811:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "6b5e40a7",
                  "id": 702,
                  "mutability": "mutable",
                  "name": "reserveDepositors",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "7879:34:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 700,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "7879:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 701,
                    "nodeType": "ArrayTypeName",
                    "src": "7879:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "124154ca",
                  "id": 706,
                  "mutability": "mutable",
                  "name": "isReserveDepositor",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "7975:52:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "typeName": {
                    "id": 705,
                    "keyType": {
                      "id": 703,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "7984:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "7975:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                      "typeString": "mapping(address => bool)"
                    },
                    "valueType": {
                      "id": 704,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "7995:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "932cc8c3",
                  "id": 710,
                  "mutability": "mutable",
                  "name": "reserveDepositorQueue",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "8033:55:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 709,
                    "keyType": {
                      "id": 707,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8042:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "8033:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 708,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "8053:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "437f7912",
                  "id": 713,
                  "mutability": "mutable",
                  "name": "reserveSpenders",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "8125:32:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 711,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8125:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 712,
                    "nodeType": "ArrayTypeName",
                    "src": "8125:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "87d67dff",
                  "id": 717,
                  "mutability": "mutable",
                  "name": "isReserveSpender",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "8219:50:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "typeName": {
                    "id": 716,
                    "keyType": {
                      "id": 714,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8228:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "8219:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                      "typeString": "mapping(address => bool)"
                    },
                    "valueType": {
                      "id": 715,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "8239:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "c24ad43e",
                  "id": 721,
                  "mutability": "mutable",
                  "name": "reserveSpenderQueue",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "8275:53:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 720,
                    "keyType": {
                      "id": 718,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8284:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "8275:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 719,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "8295:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "fd1ec010",
                  "id": 724,
                  "mutability": "mutable",
                  "name": "liquidityTokens",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "8365:32:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 722,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8365:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 723,
                    "nodeType": "ArrayTypeName",
                    "src": "8365:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "a569e571",
                  "id": 728,
                  "mutability": "mutable",
                  "name": "isLiquidityToken",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "8441:50:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "typeName": {
                    "id": 727,
                    "keyType": {
                      "id": 725,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8450:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "8441:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                      "typeString": "mapping(address => bool)"
                    },
                    "valueType": {
                      "id": 726,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "8461:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "8f59c727",
                  "id": 732,
                  "mutability": "mutable",
                  "name": "LiquidityTokenQueue",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "8497:53:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 731,
                    "keyType": {
                      "id": 729,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8506:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "8497:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 730,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "8517:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "8f6a7b57",
                  "id": 735,
                  "mutability": "mutable",
                  "name": "liquidityDepositors",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "8587:36:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 733,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8587:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 734,
                    "nodeType": "ArrayTypeName",
                    "src": "8587:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "a1210a2d",
                  "id": 739,
                  "mutability": "mutable",
                  "name": "isLiquidityDepositor",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "8685:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "typeName": {
                    "id": 738,
                    "keyType": {
                      "id": 736,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8694:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "8685:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                      "typeString": "mapping(address => bool)"
                    },
                    "valueType": {
                      "id": 737,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "8705:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "fff9ee87",
                  "id": 743,
                  "mutability": "mutable",
                  "name": "LiquidityDepositorQueue",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "8745:57:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 742,
                    "keyType": {
                      "id": 740,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8754:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "8745:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 741,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "8765:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "1af4da70",
                  "id": 747,
                  "mutability": "mutable",
                  "name": "bondCalculator",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "8839:51:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                    "typeString": "mapping(address => address)"
                  },
                  "typeName": {
                    "id": 746,
                    "keyType": {
                      "id": 744,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8848:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "8839:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                      "typeString": "mapping(address => address)"
                    },
                    "valueType": {
                      "id": 745,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8859:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "0619aff1",
                  "id": 750,
                  "mutability": "mutable",
                  "name": "reserveManagers",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "8936:32:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 748,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8936:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 749,
                    "nodeType": "ArrayTypeName",
                    "src": "8936:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "ebd83cd8",
                  "id": 754,
                  "mutability": "mutable",
                  "name": "isReserveManager",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9030:50:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "typeName": {
                    "id": 753,
                    "keyType": {
                      "id": 751,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9039:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "9030:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                      "typeString": "mapping(address => bool)"
                    },
                    "valueType": {
                      "id": 752,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "9050:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "b1bd38b0",
                  "id": 758,
                  "mutability": "mutable",
                  "name": "ReserveManagerQueue",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9086:53:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 757,
                    "keyType": {
                      "id": 755,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9095:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "9086:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 756,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "9106:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "70a0502a",
                  "id": 761,
                  "mutability": "mutable",
                  "name": "liquidityManagers",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9176:34:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 759,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9176:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 760,
                    "nodeType": "ArrayTypeName",
                    "src": "9176:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "df89b344",
                  "id": 765,
                  "mutability": "mutable",
                  "name": "isLiquidityManager",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9272:52:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "typeName": {
                    "id": 764,
                    "keyType": {
                      "id": 762,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9281:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "9272:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                      "typeString": "mapping(address => bool)"
                    },
                    "valueType": {
                      "id": 763,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "9292:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "ab319c9a",
                  "id": 769,
                  "mutability": "mutable",
                  "name": "LiquidityManagerQueue",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9330:55:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 768,
                    "keyType": {
                      "id": 766,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9339:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "9330:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 767,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "9350:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "869871bf",
                  "id": 772,
                  "mutability": "mutable",
                  "name": "debtors",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9422:24:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 770,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9422:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 771,
                    "nodeType": "ArrayTypeName",
                    "src": "9422:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "ee4e19a1",
                  "id": 776,
                  "mutability": "mutable",
                  "name": "isDebtor",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9508:42:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "typeName": {
                    "id": 775,
                    "keyType": {
                      "id": 773,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9517:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "9508:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                      "typeString": "mapping(address => bool)"
                    },
                    "valueType": {
                      "id": 774,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "9528:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "cd85641a",
                  "id": 780,
                  "mutability": "mutable",
                  "name": "debtorQueue",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9556:45:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 779,
                    "keyType": {
                      "id": 777,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9565:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "9556:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 778,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "9576:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "094a8651",
                  "id": 784,
                  "mutability": "mutable",
                  "name": "debtorBalance",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9637:47:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 783,
                    "keyType": {
                      "id": 781,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9646:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "9637:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 782,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "9657:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "b5b1d560",
                  "id": 787,
                  "mutability": "mutable",
                  "name": "rewardManagers",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9691:31:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 785,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9691:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 786,
                    "nodeType": "ArrayTypeName",
                    "src": "9691:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "4e83423c",
                  "id": 791,
                  "mutability": "mutable",
                  "name": "isRewardManager",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9784:49:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "typeName": {
                    "id": 790,
                    "keyType": {
                      "id": 788,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9793:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "9784:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                      "typeString": "mapping(address => bool)"
                    },
                    "valueType": {
                      "id": 789,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "9804:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "fb939588",
                  "id": 795,
                  "mutability": "mutable",
                  "name": "rewardManagerQueue",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9839:52:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 794,
                    "keyType": {
                      "id": 792,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9848:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "9839:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 793,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "9859:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "15079925",
                  "id": 797,
                  "mutability": "mutable",
                  "name": "sOHM",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9928:19:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 796,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9928:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "2789de37",
                  "id": 799,
                  "mutability": "mutable",
                  "name": "sOHMQueue",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "9953:21:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 798,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9953:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "8f840ddd",
                  "id": 801,
                  "mutability": "mutable",
                  "name": "totalReserves",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "10018:25:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 800,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "10018:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "fc7b9c18",
                  "id": 803,
                  "mutability": "mutable",
                  "name": "totalDebt",
                  "nodeType": "VariableDeclaration",
                  "scope": 2311,
                  "src": "10082:21:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 802,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "10082:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 869,
                    "nodeType": "Block",
                    "src": "10257:358:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 822,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 817,
                                "name": "_OHM",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 805,
                                "src": "10276:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 820,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "10292:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 819,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "10284:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 818,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "10284:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 821,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "10284:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "10276:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 816,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "10267:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 823,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10267:29:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 824,
                        "nodeType": "ExpressionStatement",
                        "src": "10267:29:0"
                      },
                      {
                        "expression": {
                          "id": 827,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 825,
                            "name": "OHM",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 686,
                            "src": "10306:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 826,
                            "name": "_OHM",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 805,
                            "src": "10312:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "10306:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 828,
                        "nodeType": "ExpressionStatement",
                        "src": "10306:10:0"
                      },
                      {
                        "expression": {
                          "id": 833,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 829,
                              "name": "isReserveToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 695,
                              "src": "10327:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 831,
                            "indexExpression": {
                              "id": 830,
                              "name": "_DAI",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 807,
                              "src": "10343:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10327:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 832,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10352:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "10327:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 834,
                        "nodeType": "ExpressionStatement",
                        "src": "10327:29:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 838,
                              "name": "_DAI",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 807,
                              "src": "10386:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 835,
                              "name": "reserveTokens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "10366:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 837,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "10366:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 839,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10366:26:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 840,
                        "nodeType": "ExpressionStatement",
                        "src": "10366:26:0"
                      },
                      {
                        "expression": {
                          "id": 845,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 841,
                              "name": "isReserveToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 695,
                              "src": "10403:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 843,
                            "indexExpression": {
                              "id": 842,
                              "name": "_Frax",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 809,
                              "src": "10419:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10403:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 844,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10428:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "10403:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 846,
                        "nodeType": "ExpressionStatement",
                        "src": "10403:29:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 850,
                              "name": "_Frax",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 809,
                              "src": "10462:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 847,
                              "name": "reserveTokens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "10442:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 849,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "10442:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 851,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10442:27:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 852,
                        "nodeType": "ExpressionStatement",
                        "src": "10442:27:0"
                      },
                      {
                        "expression": {
                          "id": 857,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 853,
                              "name": "isLiquidityToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 728,
                              "src": "10479:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 855,
                            "indexExpression": {
                              "id": 854,
                              "name": "_OHMDAI",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 811,
                              "src": "10497:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10479:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 856,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10509:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "10479:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 858,
                        "nodeType": "ExpressionStatement",
                        "src": "10479:34:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 862,
                              "name": "_OHMDAI",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 811,
                              "src": "10544:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 859,
                              "name": "liquidityTokens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 724,
                              "src": "10522:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 861,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "10522:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 863,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10522:31:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 864,
                        "nodeType": "ExpressionStatement",
                        "src": "10522:31:0"
                      },
                      {
                        "expression": {
                          "id": 867,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 865,
                            "name": "blocksNeededForQueue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 688,
                            "src": "10564:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 866,
                            "name": "_blocksNeededForQueue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 813,
                            "src": "10587:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10564:44:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 868,
                        "nodeType": "ExpressionStatement",
                        "src": "10564:44:0"
                      }
                    ]
                  },
                  "id": 870,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 814,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 805,
                        "mutability": "mutable",
                        "name": "_OHM",
                        "nodeType": "VariableDeclaration",
                        "scope": 870,
                        "src": "10132:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 804,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10132:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 807,
                        "mutability": "mutable",
                        "name": "_DAI",
                        "nodeType": "VariableDeclaration",
                        "scope": 870,
                        "src": "10154:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 806,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10154:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 809,
                        "mutability": "mutable",
                        "name": "_Frax",
                        "nodeType": "VariableDeclaration",
                        "scope": 870,
                        "src": "10176:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 808,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10176:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 811,
                        "mutability": "mutable",
                        "name": "_OHMDAI",
                        "nodeType": "VariableDeclaration",
                        "scope": 870,
                        "src": "10199:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 810,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10199:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 813,
                        "mutability": "mutable",
                        "name": "_blocksNeededForQueue",
                        "nodeType": "VariableDeclaration",
                        "scope": 870,
                        "src": "10224:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 812,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "10224:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10122:134:0"
                  },
                  "returnParameters": {
                    "id": 815,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10257:0:0"
                  },
                  "scope": 2311,
                  "src": "10110:505:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 968,
                    "nodeType": "Block",
                    "src": "10912:761:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 889,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 883,
                                  "name": "isReserveToken",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 695,
                                  "src": "10931:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                    "typeString": "mapping(address => bool)"
                                  }
                                },
                                "id": 885,
                                "indexExpression": {
                                  "id": 884,
                                  "name": "_token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 875,
                                  "src": "10947:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "10931:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "baseExpression": {
                                  "id": 886,
                                  "name": "isLiquidityToken",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 728,
                                  "src": "10959:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                    "typeString": "mapping(address => bool)"
                                  }
                                },
                                "id": 888,
                                "indexExpression": {
                                  "id": 887,
                                  "name": "_token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 875,
                                  "src": "10977:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "10959:26:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "10931:54:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f74206163636570746564",
                              "id": 890,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10987:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_fadc5f22060668047a4e911336f5d0734fc86647a30251cd7b6b0511b7c2b797",
                                "typeString": "literal_string \"Not accepted\""
                              },
                              "value": "Not accepted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_fadc5f22060668047a4e911336f5d0734fc86647a30251cd7b6b0511b7c2b797",
                                "typeString": "literal_string \"Not accepted\""
                              }
                            ],
                            "id": 882,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "10922:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 891,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10922:81:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 892,
                        "nodeType": "ExpressionStatement",
                        "src": "10922:81:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 897,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "11048:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 898,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "11048:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 901,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "11068:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ApeTreasury_$2311",
                                    "typeString": "contract ApeTreasury"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ApeTreasury_$2311",
                                    "typeString": "contract ApeTreasury"
                                  }
                                ],
                                "id": 900,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "11060:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 899,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "11060:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 902,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11060:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 903,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 873,
                              "src": "11075:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 894,
                                  "name": "_token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 875,
                                  "src": "11021:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 893,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 472,
                                "src": "11013:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$472_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 895,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11013:16:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$472",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 896,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "safeTransferFrom",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 525,
                            "src": "11013:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$472_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$472_$",
                              "typeString": "function (contract IERC20,address,address,uint256)"
                            }
                          },
                          "id": 904,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11013:71:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 905,
                        "nodeType": "ExpressionStatement",
                        "src": "11013:71:0"
                      },
                      {
                        "condition": {
                          "baseExpression": {
                            "id": 906,
                            "name": "isReserveToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 695,
                            "src": "11100:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 908,
                          "indexExpression": {
                            "id": 907,
                            "name": "_token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 875,
                            "src": "11116:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "11100:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 926,
                          "nodeType": "Block",
                          "src": "11217:86:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 919,
                                      "name": "isLiquidityDepositor",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 739,
                                      "src": "11240:20:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                        "typeString": "mapping(address => bool)"
                                      }
                                    },
                                    "id": 922,
                                    "indexExpression": {
                                      "expression": {
                                        "id": 920,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -15,
                                        "src": "11262:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 921,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "11262:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "11240:34:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "4e6f7420617070726f766564",
                                    "id": 923,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "11276:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                      "typeString": "literal_string \"Not approved\""
                                    },
                                    "value": "Not approved"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                      "typeString": "literal_string \"Not approved\""
                                    }
                                  ],
                                  "id": 918,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "11231:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 924,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "11231:61:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 925,
                              "nodeType": "ExpressionStatement",
                              "src": "11231:61:0"
                            }
                          ]
                        },
                        "id": 927,
                        "nodeType": "IfStatement",
                        "src": "11095:208:0",
                        "trueBody": {
                          "id": 917,
                          "nodeType": "Block",
                          "src": "11127:84:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 910,
                                      "name": "isReserveDepositor",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 706,
                                      "src": "11150:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                        "typeString": "mapping(address => bool)"
                                      }
                                    },
                                    "id": 913,
                                    "indexExpression": {
                                      "expression": {
                                        "id": 911,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -15,
                                        "src": "11170:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 912,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "11170:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "11150:32:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "4e6f7420617070726f766564",
                                    "id": 914,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "11184:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                      "typeString": "literal_string \"Not approved\""
                                    },
                                    "value": "Not approved"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                      "typeString": "literal_string \"Not approved\""
                                    }
                                  ],
                                  "id": 909,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "11141:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 915,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "11141:59:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 916,
                              "nodeType": "ExpressionStatement",
                              "src": "11141:59:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          929
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 929,
                            "mutability": "mutable",
                            "name": "value",
                            "nodeType": "VariableDeclaration",
                            "scope": 968,
                            "src": "11313:10:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 928,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "11313:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 934,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 931,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 875,
                              "src": "11334:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 932,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 873,
                              "src": "11342:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 930,
                            "name": "valueOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1555,
                            "src": "11326:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (address,uint256) view returns (uint256)"
                            }
                          },
                          "id": 933,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11326:24:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "11313:37:0"
                      },
                      {
                        "expression": {
                          "id": 940,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 935,
                            "name": "send_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 880,
                            "src": "11432:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 938,
                                "name": "_profit",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 877,
                                "src": "11451:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 936,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 929,
                                "src": "11440:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 937,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sub",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 42,
                              "src": "11440:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 939,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11440:20:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11432:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 941,
                        "nodeType": "ExpressionStatement",
                        "src": "11432:28:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 946,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "11498:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 947,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "11498:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 948,
                              "name": "send_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 880,
                              "src": "11510:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 943,
                                  "name": "OHM",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 686,
                                  "src": "11486:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 942,
                                "name": "IERC20Mintable",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 575,
                                "src": "11470:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20Mintable_$575_$",
                                  "typeString": "type(contract IERC20Mintable)"
                                }
                              },
                              "id": 944,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11470:21:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20Mintable_$575",
                                "typeString": "contract IERC20Mintable"
                              }
                            },
                            "id": 945,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 574,
                            "src": "11470:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 949,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11470:47:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 950,
                        "nodeType": "ExpressionStatement",
                        "src": "11470:47:0"
                      },
                      {
                        "expression": {
                          "id": 956,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 951,
                            "name": "totalReserves",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 801,
                            "src": "11528:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 954,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 929,
                                "src": "11563:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 952,
                                "name": "totalReserves",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 801,
                                "src": "11544:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 953,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 26,
                              "src": "11544:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 955,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11544:26:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11528:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 957,
                        "nodeType": "ExpressionStatement",
                        "src": "11528:42:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 959,
                              "name": "totalReserves",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 801,
                              "src": "11602:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 958,
                            "name": "ReservesUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 647,
                            "src": "11585:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 960,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11585:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 961,
                        "nodeType": "EmitStatement",
                        "src": "11580:37:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 963,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 875,
                              "src": "11642:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 964,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 873,
                              "src": "11650:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 965,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 929,
                              "src": "11659:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 962,
                            "name": "Deposit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 609,
                            "src": "11633:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 966,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11633:33:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 967,
                        "nodeType": "EmitStatement",
                        "src": "11628:38:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 871,
                    "nodeType": "StructuredDocumentation",
                    "src": "10621:191:0",
                    "text": "@notice allow approved address to deposit an asset for OHM\n@param _amount uint\n@param _token address\n@param _profit uint\n@return send_ uint"
                  },
                  "functionSelector": "bc157ac1",
                  "id": 969,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "deposit",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 878,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 873,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 969,
                        "src": "10835:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 872,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "10835:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 875,
                        "mutability": "mutable",
                        "name": "_token",
                        "nodeType": "VariableDeclaration",
                        "scope": 969,
                        "src": "10849:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 874,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10849:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 877,
                        "mutability": "mutable",
                        "name": "_profit",
                        "nodeType": "VariableDeclaration",
                        "scope": 969,
                        "src": "10865:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 876,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "10865:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10833:46:0"
                  },
                  "returnParameters": {
                    "id": 881,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 880,
                        "mutability": "mutable",
                        "name": "send_",
                        "nodeType": "VariableDeclaration",
                        "scope": 969,
                        "src": "10899:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 879,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "10899:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10897:14:0"
                  },
                  "scope": 2311,
                  "src": "10817:856:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1036,
                    "nodeType": "Block",
                    "src": "11876:509:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 978,
                                "name": "isReserveToken",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 695,
                                "src": "11895:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 980,
                              "indexExpression": {
                                "id": 979,
                                "name": "_token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 974,
                                "src": "11911:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11895:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f74206163636570746564",
                              "id": 981,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11921:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_fadc5f22060668047a4e911336f5d0734fc86647a30251cd7b6b0511b7c2b797",
                                "typeString": "literal_string \"Not accepted\""
                              },
                              "value": "Not accepted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_fadc5f22060668047a4e911336f5d0734fc86647a30251cd7b6b0511b7c2b797",
                                "typeString": "literal_string \"Not accepted\""
                              }
                            ],
                            "id": 977,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "11886:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 982,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11886:51:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 983,
                        "nodeType": "ExpressionStatement",
                        "src": "11886:51:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 990,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 985,
                                  "name": "isReserveSpender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 717,
                                  "src": "12001:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                    "typeString": "mapping(address => bool)"
                                  }
                                },
                                "id": 988,
                                "indexExpression": {
                                  "expression": {
                                    "id": 986,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "12019:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 987,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "12019:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "12001:30:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "74727565",
                                "id": 989,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "12035:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              "src": "12001:38:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420617070726f766564",
                              "id": 991,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "12041:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                "typeString": "literal_string \"Not approved\""
                              },
                              "value": "Not approved"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                "typeString": "literal_string \"Not approved\""
                              }
                            ],
                            "id": 984,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "11992:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 992,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11992:65:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 993,
                        "nodeType": "ExpressionStatement",
                        "src": "11992:65:0"
                      },
                      {
                        "assignments": [
                          995
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 995,
                            "mutability": "mutable",
                            "name": "value",
                            "nodeType": "VariableDeclaration",
                            "scope": 1036,
                            "src": "12068:10:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 994,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "12068:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1000,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 997,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 974,
                              "src": "12090:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 998,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 972,
                              "src": "12098:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 996,
                            "name": "valueOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1555,
                            "src": "12081:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (address,uint256) view returns (uint256)"
                            }
                          },
                          "id": 999,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12081:26:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12068:39:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1005,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "12144:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1006,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "12144:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 1007,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 995,
                              "src": "12156:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1002,
                                  "name": "OHM",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 686,
                                  "src": "12128:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1001,
                                "name": "IOHMERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 583,
                                "src": "12117:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IOHMERC20_$583_$",
                                  "typeString": "type(contract IOHMERC20)"
                                }
                              },
                              "id": 1003,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12117:16:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IOHMERC20_$583",
                                "typeString": "contract IOHMERC20"
                              }
                            },
                            "id": 1004,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "burnFrom",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 582,
                            "src": "12117:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 1008,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12117:46:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1009,
                        "nodeType": "ExpressionStatement",
                        "src": "12117:46:0"
                      },
                      {
                        "expression": {
                          "id": 1015,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1010,
                            "name": "totalReserves",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 801,
                            "src": "12174:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1013,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 995,
                                "src": "12209:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 1011,
                                "name": "totalReserves",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 801,
                                "src": "12190:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1012,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sub",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 42,
                              "src": "12190:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1014,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "12190:26:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12174:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1016,
                        "nodeType": "ExpressionStatement",
                        "src": "12174:42:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1018,
                              "name": "totalReserves",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 801,
                              "src": "12248:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1017,
                            "name": "ReservesUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 647,
                            "src": "12231:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 1019,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12231:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1020,
                        "nodeType": "EmitStatement",
                        "src": "12226:37:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1025,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "12305:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1026,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "12305:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 1027,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 972,
                              "src": "12317:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1022,
                                  "name": "_token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 974,
                                  "src": "12282:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1021,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 472,
                                "src": "12274:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$472_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 1023,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12274:16:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$472",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 1024,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "safeTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 500,
                            "src": "12274:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$472_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$472_$",
                              "typeString": "function (contract IERC20,address,uint256)"
                            }
                          },
                          "id": 1028,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12274:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1029,
                        "nodeType": "ExpressionStatement",
                        "src": "12274:52:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1031,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 974,
                              "src": "12354:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1032,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 972,
                              "src": "12362:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1033,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 995,
                              "src": "12371:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1030,
                            "name": "Withdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 617,
                            "src": "12342:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 1034,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12342:36:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1035,
                        "nodeType": "EmitStatement",
                        "src": "12337:41:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 970,
                    "nodeType": "StructuredDocumentation",
                    "src": "11679:133:0",
                    "text": "@notice allow approved address to burn OHM for reserves\n@param _amount uint\n@param _token address"
                  },
                  "functionSelector": "00f714ce",
                  "id": 1037,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "withdraw",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 975,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 972,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1037,
                        "src": "11836:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 971,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "11836:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 974,
                        "mutability": "mutable",
                        "name": "_token",
                        "nodeType": "VariableDeclaration",
                        "scope": 1037,
                        "src": "11850:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 973,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11850:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11834:32:0"
                  },
                  "returnParameters": {
                    "id": 976,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11876:0:0"
                  },
                  "scope": 2311,
                  "src": "11817:568:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1142,
                    "nodeType": "Block",
                    "src": "12583:780:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 1046,
                                "name": "isDebtor",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 776,
                                "src": "12602:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 1049,
                              "indexExpression": {
                                "expression": {
                                  "id": 1047,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "12612:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1048,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "12612:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12602:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420617070726f766564",
                              "id": 1050,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "12626:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                "typeString": "literal_string \"Not approved\""
                              },
                              "value": "Not approved"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                "typeString": "literal_string \"Not approved\""
                              }
                            ],
                            "id": 1045,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "12593:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1051,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12593:49:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1052,
                        "nodeType": "ExpressionStatement",
                        "src": "12593:49:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 1054,
                                "name": "isReserveToken",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 695,
                                "src": "12661:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 1056,
                              "indexExpression": {
                                "id": 1055,
                                "name": "_token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1042,
                                "src": "12677:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12661:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f74206163636570746564",
                              "id": 1057,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "12687:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_fadc5f22060668047a4e911336f5d0734fc86647a30251cd7b6b0511b7c2b797",
                                "typeString": "literal_string \"Not accepted\""
                              },
                              "value": "Not accepted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_fadc5f22060668047a4e911336f5d0734fc86647a30251cd7b6b0511b7c2b797",
                                "typeString": "literal_string \"Not accepted\""
                              }
                            ],
                            "id": 1053,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "12652:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1058,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12652:51:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1059,
                        "nodeType": "ExpressionStatement",
                        "src": "12652:51:0"
                      },
                      {
                        "assignments": [
                          1061
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1061,
                            "mutability": "mutable",
                            "name": "value",
                            "nodeType": "VariableDeclaration",
                            "scope": 1142,
                            "src": "12714:10:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1060,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "12714:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1066,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1063,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1042,
                              "src": "12736:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1064,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1040,
                              "src": "12744:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1062,
                            "name": "valueOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1555,
                            "src": "12727:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (address,uint256) view returns (uint256)"
                            }
                          },
                          "id": 1065,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12727:26:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12714:39:0"
                      },
                      {
                        "assignments": [
                          1068
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1068,
                            "mutability": "mutable",
                            "name": "maximumDebt",
                            "nodeType": "VariableDeclaration",
                            "scope": 1142,
                            "src": "12764:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1067,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "12764:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1076,
                        "initialValue": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1073,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "12809:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1074,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "12809:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1070,
                                  "name": "sOHM",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 797,
                                  "src": "12791:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1069,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 472,
                                "src": "12783:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$472_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 1071,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12783:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$472",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 1072,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 421,
                            "src": "12783:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 1075,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12783:38:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12764:57:0"
                      },
                      {
                        "assignments": [
                          1078
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1078,
                            "mutability": "mutable",
                            "name": "availableDebt",
                            "nodeType": "VariableDeclaration",
                            "scope": 1142,
                            "src": "12868:18:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1077,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "12868:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1086,
                        "initialValue": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 1081,
                                "name": "debtorBalance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 784,
                                "src": "12906:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 1084,
                              "indexExpression": {
                                "expression": {
                                  "id": 1082,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "12921:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1083,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "12921:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12906:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1079,
                              "name": "maximumDebt",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1068,
                              "src": "12889:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1080,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 42,
                            "src": "12889:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1085,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12889:46:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12868:67:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1090,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1088,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1061,
                                "src": "12954:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "id": 1089,
                                "name": "availableDebt",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1078,
                                "src": "12963:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "12954:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "457863656564732064656274206c696d6974",
                              "id": 1091,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "12978:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_f193cc9709e57cd43c6930e1643edb6922168fe48dacb7425cd34c9438ee5b15",
                                "typeString": "literal_string \"Exceeds debt limit\""
                              },
                              "value": "Exceeds debt limit"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_f193cc9709e57cd43c6930e1643edb6922168fe48dacb7425cd34c9438ee5b15",
                                "typeString": "literal_string \"Exceeds debt limit\""
                              }
                            ],
                            "id": 1087,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "12945:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1092,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12945:55:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1093,
                        "nodeType": "ExpressionStatement",
                        "src": "12945:55:0"
                      },
                      {
                        "expression": {
                          "id": 1105,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1094,
                              "name": "debtorBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 784,
                              "src": "13011:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 1097,
                            "indexExpression": {
                              "expression": {
                                "id": 1095,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "13026:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1096,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "13026:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "13011:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1103,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1061,
                                "src": "13074:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "baseExpression": {
                                  "id": 1098,
                                  "name": "debtorBalance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 784,
                                  "src": "13041:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 1101,
                                "indexExpression": {
                                  "expression": {
                                    "id": 1099,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "13056:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1100,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "13056:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "13041:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1102,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 26,
                              "src": "13041:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1104,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13041:40:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "13011:70:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1106,
                        "nodeType": "ExpressionStatement",
                        "src": "13011:70:0"
                      },
                      {
                        "expression": {
                          "id": 1112,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1107,
                            "name": "totalDebt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 803,
                            "src": "13091:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1110,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1061,
                                "src": "13118:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 1108,
                                "name": "totalDebt",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 803,
                                "src": "13103:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1109,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 26,
                              "src": "13103:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1111,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13103:22:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "13091:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1113,
                        "nodeType": "ExpressionStatement",
                        "src": "13091:34:0"
                      },
                      {
                        "expression": {
                          "id": 1119,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1114,
                            "name": "totalReserves",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 801,
                            "src": "13136:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1117,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1061,
                                "src": "13171:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 1115,
                                "name": "totalReserves",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 801,
                                "src": "13152:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1116,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sub",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 42,
                              "src": "13152:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1118,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13152:26:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "13136:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1120,
                        "nodeType": "ExpressionStatement",
                        "src": "13136:42:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1122,
                              "name": "totalReserves",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 801,
                              "src": "13210:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1121,
                            "name": "ReservesUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 647,
                            "src": "13193:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 1123,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13193:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1124,
                        "nodeType": "EmitStatement",
                        "src": "13188:37:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1129,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "13263:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1130,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "13263:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 1131,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1040,
                              "src": "13275:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1126,
                                  "name": "_token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1042,
                                  "src": "13244:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1125,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 472,
                                "src": "13236:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$472_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 1127,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "13236:16:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$472",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 1128,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "transfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 430,
                            "src": "13236:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) external returns (bool)"
                            }
                          },
                          "id": 1132,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13236:48:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1133,
                        "nodeType": "ExpressionStatement",
                        "src": "13236:48:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1135,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "13320:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1136,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "13320:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 1137,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1042,
                              "src": "13332:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1138,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1040,
                              "src": "13340:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1139,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1061,
                              "src": "13349:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1134,
                            "name": "CreateDebt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 627,
                            "src": "13308:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256)"
                            }
                          },
                          "id": 1140,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13308:48:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1141,
                        "nodeType": "EmitStatement",
                        "src": "13303:53:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1038,
                    "nodeType": "StructuredDocumentation",
                    "src": "12391:127:0",
                    "text": "@notice allow approved address to borrow reserves\n@param _amount uint\n@param _token address"
                  },
                  "functionSelector": "12422d23",
                  "id": 1143,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "incurDebt",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1043,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1040,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1143,
                        "src": "12543:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1039,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "12543:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1042,
                        "mutability": "mutable",
                        "name": "_token",
                        "nodeType": "VariableDeclaration",
                        "scope": 1143,
                        "src": "12557:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1041,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "12557:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12541:32:0"
                  },
                  "returnParameters": {
                    "id": 1044,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "12583:0:0"
                  },
                  "scope": 2311,
                  "src": "12523:840:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1225,
                    "nodeType": "Block",
                    "src": "13594:546:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 1152,
                                "name": "isDebtor",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 776,
                                "src": "13613:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 1155,
                              "indexExpression": {
                                "expression": {
                                  "id": 1153,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "13623:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1154,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "13623:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "13613:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420617070726f766564",
                              "id": 1156,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "13637:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                "typeString": "literal_string \"Not approved\""
                              },
                              "value": "Not approved"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                "typeString": "literal_string \"Not approved\""
                              }
                            ],
                            "id": 1151,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "13604:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1157,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13604:49:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1158,
                        "nodeType": "ExpressionStatement",
                        "src": "13604:49:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 1160,
                                "name": "isReserveToken",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 695,
                                "src": "13672:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 1162,
                              "indexExpression": {
                                "id": 1161,
                                "name": "_token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1148,
                                "src": "13688:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "13672:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f74206163636570746564",
                              "id": 1163,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "13698:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_fadc5f22060668047a4e911336f5d0734fc86647a30251cd7b6b0511b7c2b797",
                                "typeString": "literal_string \"Not accepted\""
                              },
                              "value": "Not accepted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_fadc5f22060668047a4e911336f5d0734fc86647a30251cd7b6b0511b7c2b797",
                                "typeString": "literal_string \"Not accepted\""
                              }
                            ],
                            "id": 1159,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "13663:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1164,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13663:51:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1165,
                        "nodeType": "ExpressionStatement",
                        "src": "13663:51:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1170,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "13760:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1171,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "13760:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 1174,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "13780:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ApeTreasury_$2311",
                                    "typeString": "contract ApeTreasury"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ApeTreasury_$2311",
                                    "typeString": "contract ApeTreasury"
                                  }
                                ],
                                "id": 1173,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "13772:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1172,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "13772:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1175,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "13772:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1176,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1146,
                              "src": "13787:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1167,
                                  "name": "_token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1148,
                                  "src": "13733:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1166,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 472,
                                "src": "13725:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$472_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 1168,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "13725:16:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$472",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 1169,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "safeTransferFrom",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 525,
                            "src": "13725:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$472_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$472_$",
                              "typeString": "function (contract IERC20,address,address,uint256)"
                            }
                          },
                          "id": 1177,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13725:71:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1178,
                        "nodeType": "ExpressionStatement",
                        "src": "13725:71:0"
                      },
                      {
                        "assignments": [
                          1180
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1180,
                            "mutability": "mutable",
                            "name": "value",
                            "nodeType": "VariableDeclaration",
                            "scope": 1225,
                            "src": "13807:10:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1179,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "13807:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1185,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1182,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1148,
                              "src": "13829:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1183,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1146,
                              "src": "13837:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1181,
                            "name": "valueOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1555,
                            "src": "13820:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (address,uint256) view returns (uint256)"
                            }
                          },
                          "id": 1184,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13820:26:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "13807:39:0"
                      },
                      {
                        "expression": {
                          "id": 1197,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1186,
                              "name": "debtorBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 784,
                              "src": "13856:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 1189,
                            "indexExpression": {
                              "expression": {
                                "id": 1187,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "13871:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1188,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "13871:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "13856:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1195,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1180,
                                "src": "13919:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "baseExpression": {
                                  "id": 1190,
                                  "name": "debtorBalance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 784,
                                  "src": "13886:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 1193,
                                "indexExpression": {
                                  "expression": {
                                    "id": 1191,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "13901:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1192,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "13901:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "13886:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1194,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sub",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 42,
                              "src": "13886:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1196,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13886:40:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "13856:70:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1198,
                        "nodeType": "ExpressionStatement",
                        "src": "13856:70:0"
                      },
                      {
                        "expression": {
                          "id": 1204,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1199,
                            "name": "totalDebt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 803,
                            "src": "13936:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1202,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1180,
                                "src": "13963:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 1200,
                                "name": "totalDebt",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 803,
                                "src": "13948:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1201,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sub",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 42,
                              "src": "13948:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1203,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13948:22:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "13936:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1205,
                        "nodeType": "ExpressionStatement",
                        "src": "13936:34:0"
                      },
                      {
                        "expression": {
                          "id": 1211,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1206,
                            "name": "totalReserves",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 801,
                            "src": "13981:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1209,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1180,
                                "src": "14016:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 1207,
                                "name": "totalReserves",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 801,
                                "src": "13997:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1208,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 26,
                              "src": "13997:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1210,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13997:26:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "13981:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1212,
                        "nodeType": "ExpressionStatement",
                        "src": "13981:42:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1214,
                              "name": "totalReserves",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 801,
                              "src": "14055:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1213,
                            "name": "ReservesUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 647,
                            "src": "14038:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 1215,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14038:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1216,
                        "nodeType": "EmitStatement",
                        "src": "14033:37:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1218,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "14097:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1219,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "14097:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 1220,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1148,
                              "src": "14109:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1221,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1146,
                              "src": "14117:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1222,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1180,
                              "src": "14126:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1217,
                            "name": "RepayDebt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 637,
                            "src": "14086:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256)"
                            }
                          },
                          "id": 1223,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14086:47:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1224,
                        "nodeType": "EmitStatement",
                        "src": "14081:52:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1144,
                    "nodeType": "StructuredDocumentation",
                    "src": "13369:149:0",
                    "text": "@notice allow approved address to repay borrowed reserves with reserves\n@param _amount uint\n@param _token address"
                  },
                  "functionSelector": "d796ffb8",
                  "id": 1226,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "repayDebtWithReserve",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1149,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1146,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1226,
                        "src": "13554:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1145,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "13554:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1148,
                        "mutability": "mutable",
                        "name": "_token",
                        "nodeType": "VariableDeclaration",
                        "scope": 1226,
                        "src": "13568:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1147,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13568:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13552:32:0"
                  },
                  "returnParameters": {
                    "id": 1150,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13594:0:0"
                  },
                  "scope": 2311,
                  "src": "13523:617:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1277,
                    "nodeType": "Block",
                    "src": "14316:316:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 1233,
                                "name": "isDebtor",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 776,
                                "src": "14335:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 1236,
                              "indexExpression": {
                                "expression": {
                                  "id": 1234,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "14345:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1235,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "14345:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "14335:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420617070726f766564",
                              "id": 1237,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "14359:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                "typeString": "literal_string \"Not approved\""
                              },
                              "value": "Not approved"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                "typeString": "literal_string \"Not approved\""
                              }
                            ],
                            "id": 1232,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "14326:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1238,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14326:49:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1239,
                        "nodeType": "ExpressionStatement",
                        "src": "14326:49:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1244,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "14413:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1245,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "14413:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 1246,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1229,
                              "src": "14425:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1241,
                                  "name": "OHM",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 686,
                                  "src": "14397:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1240,
                                "name": "IOHMERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 583,
                                "src": "14386:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IOHMERC20_$583_$",
                                  "typeString": "type(contract IOHMERC20)"
                                }
                              },
                              "id": 1242,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "14386:16:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IOHMERC20_$583",
                                "typeString": "contract IOHMERC20"
                              }
                            },
                            "id": 1243,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "burnFrom",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 582,
                            "src": "14386:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 1247,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14386:48:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1248,
                        "nodeType": "ExpressionStatement",
                        "src": "14386:48:0"
                      },
                      {
                        "expression": {
                          "id": 1260,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1249,
                              "name": "debtorBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 784,
                              "src": "14445:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 1252,
                            "indexExpression": {
                              "expression": {
                                "id": 1250,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "14460:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1251,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "14460:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "14445:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1258,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1229,
                                "src": "14508:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "baseExpression": {
                                  "id": 1253,
                                  "name": "debtorBalance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 784,
                                  "src": "14475:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 1256,
                                "indexExpression": {
                                  "expression": {
                                    "id": 1254,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "14490:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1255,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "14490:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "14475:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1257,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sub",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 42,
                              "src": "14475:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1259,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14475:42:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "14445:72:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1261,
                        "nodeType": "ExpressionStatement",
                        "src": "14445:72:0"
                      },
                      {
                        "expression": {
                          "id": 1267,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1262,
                            "name": "totalDebt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 803,
                            "src": "14527:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1265,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1229,
                                "src": "14554:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 1263,
                                "name": "totalDebt",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 803,
                                "src": "14539:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1264,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sub",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 42,
                              "src": "14539:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1266,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14539:24:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "14527:36:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1268,
                        "nodeType": "ExpressionStatement",
                        "src": "14527:36:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1270,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "14590:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1271,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "14590:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 1272,
                              "name": "OHM",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 686,
                              "src": "14602:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1273,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1229,
                              "src": "14607:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1274,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1229,
                              "src": "14616:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1269,
                            "name": "RepayDebt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 637,
                            "src": "14579:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256)"
                            }
                          },
                          "id": 1275,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14579:46:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1276,
                        "nodeType": "EmitStatement",
                        "src": "14574:51:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1227,
                    "nodeType": "StructuredDocumentation",
                    "src": "14146:114:0",
                    "text": "@notice allow approved address to repay borrowed reserves with OHM\n@param _amount uint"
                  },
                  "functionSelector": "0f70431f",
                  "id": 1278,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "repayDebtWithOHM",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1230,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1229,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1278,
                        "src": "14292:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1228,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "14292:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14290:16:0"
                  },
                  "returnParameters": {
                    "id": 1231,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14316:0:0"
                  },
                  "scope": 2311,
                  "src": "14265:367:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1348,
                    "nodeType": "Block",
                    "src": "14827:553:0",
                    "statements": [
                      {
                        "condition": {
                          "baseExpression": {
                            "id": 1286,
                            "name": "isLiquidityToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 728,
                            "src": "14841:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 1288,
                          "indexExpression": {
                            "id": 1287,
                            "name": "_token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1281,
                            "src": "14859:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "14841:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1306,
                          "nodeType": "Block",
                          "src": "14960:82:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 1299,
                                      "name": "isReserveManager",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 754,
                                      "src": "14983:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                        "typeString": "mapping(address => bool)"
                                      }
                                    },
                                    "id": 1302,
                                    "indexExpression": {
                                      "expression": {
                                        "id": 1300,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -15,
                                        "src": "15001:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 1301,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "15001:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "14983:30:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "4e6f7420617070726f766564",
                                    "id": 1303,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "15015:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                      "typeString": "literal_string \"Not approved\""
                                    },
                                    "value": "Not approved"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                      "typeString": "literal_string \"Not approved\""
                                    }
                                  ],
                                  "id": 1298,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "14974:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 1304,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "14974:57:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1305,
                              "nodeType": "ExpressionStatement",
                              "src": "14974:57:0"
                            }
                          ]
                        },
                        "id": 1307,
                        "nodeType": "IfStatement",
                        "src": "14837:205:0",
                        "trueBody": {
                          "id": 1297,
                          "nodeType": "Block",
                          "src": "14870:84:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 1290,
                                      "name": "isLiquidityManager",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 765,
                                      "src": "14893:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                        "typeString": "mapping(address => bool)"
                                      }
                                    },
                                    "id": 1293,
                                    "indexExpression": {
                                      "expression": {
                                        "id": 1291,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -15,
                                        "src": "14913:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 1292,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "14913:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "14893:32:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "4e6f7420617070726f766564",
                                    "id": 1294,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "14927:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                      "typeString": "literal_string \"Not approved\""
                                    },
                                    "value": "Not approved"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                      "typeString": "literal_string \"Not approved\""
                                    }
                                  ],
                                  "id": 1289,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "14884:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 1295,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "14884:59:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1296,
                              "nodeType": "ExpressionStatement",
                              "src": "14884:59:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1309
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1309,
                            "mutability": "mutable",
                            "name": "value",
                            "nodeType": "VariableDeclaration",
                            "scope": 1348,
                            "src": "15052:10:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1308,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "15052:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1314,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1311,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1281,
                              "src": "15073:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1312,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1283,
                              "src": "15081:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1310,
                            "name": "valueOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1555,
                            "src": "15065:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (address,uint256) view returns (uint256)"
                            }
                          },
                          "id": 1313,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15065:24:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "15052:37:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1319,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1316,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1309,
                                "src": "15108:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 1317,
                                  "name": "excessReserves",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1408,
                                  "src": "15117:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                    "typeString": "function () view returns (uint256)"
                                  }
                                },
                                "id": 1318,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "15117:16:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "15108:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e73756666696369656e74207265736572766573",
                              "id": 1320,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15135:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6f055697f05542780f050f02e169b628baaede4365bd8f2e41b10829d224c674",
                                "typeString": "literal_string \"Insufficient reserves\""
                              },
                              "value": "Insufficient reserves"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_6f055697f05542780f050f02e169b628baaede4365bd8f2e41b10829d224c674",
                                "typeString": "literal_string \"Insufficient reserves\""
                              }
                            ],
                            "id": 1315,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "15099:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1321,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15099:61:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1322,
                        "nodeType": "ExpressionStatement",
                        "src": "15099:61:0"
                      },
                      {
                        "expression": {
                          "id": 1328,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1323,
                            "name": "totalReserves",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 801,
                            "src": "15171:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1326,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1309,
                                "src": "15206:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 1324,
                                "name": "totalReserves",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 801,
                                "src": "15187:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1325,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sub",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 42,
                              "src": "15187:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1327,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "15187:26:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "15171:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1329,
                        "nodeType": "ExpressionStatement",
                        "src": "15171:42:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1331,
                              "name": "totalReserves",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 801,
                              "src": "15245:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1330,
                            "name": "ReservesUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 647,
                            "src": "15228:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 1332,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15228:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1333,
                        "nodeType": "EmitStatement",
                        "src": "15223:37:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1338,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "15302:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1339,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "15302:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 1340,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1283,
                              "src": "15314:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1335,
                                  "name": "_token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1281,
                                  "src": "15279:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1334,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 472,
                                "src": "15271:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$472_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 1336,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "15271:16:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$472",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 1337,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "safeTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 500,
                            "src": "15271:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$472_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$472_$",
                              "typeString": "function (contract IERC20,address,uint256)"
                            }
                          },
                          "id": 1341,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15271:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1342,
                        "nodeType": "ExpressionStatement",
                        "src": "15271:52:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1344,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1281,
                              "src": "15356:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1345,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1283,
                              "src": "15364:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1343,
                            "name": "ReservesManaged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 643,
                            "src": "15339:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 1346,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15339:34:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1347,
                        "nodeType": "EmitStatement",
                        "src": "15334:39:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1279,
                    "nodeType": "StructuredDocumentation",
                    "src": "14638:127:0",
                    "text": "@notice allow approved address to withdraw assets\n@param _token address\n@param _amount uint"
                  },
                  "functionSelector": "0b0eee30",
                  "id": 1349,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "manage",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1284,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1281,
                        "mutability": "mutable",
                        "name": "_token",
                        "nodeType": "VariableDeclaration",
                        "scope": 1349,
                        "src": "14787:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1280,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14787:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1283,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1349,
                        "src": "14803:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1282,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "14803:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14785:32:0"
                  },
                  "returnParameters": {
                    "id": 1285,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14827:0:0"
                  },
                  "scope": 2311,
                  "src": "14770:610:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1388,
                    "nodeType": "Block",
                    "src": "15522:270:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 1358,
                                "name": "isRewardManager",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 791,
                                "src": "15541:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 1361,
                              "indexExpression": {
                                "expression": {
                                  "id": 1359,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "15558:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1360,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "15558:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "15541:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420617070726f766564",
                              "id": 1362,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15572:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                "typeString": "literal_string \"Not approved\""
                              },
                              "value": "Not approved"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361",
                                "typeString": "literal_string \"Not approved\""
                              }
                            ],
                            "id": 1357,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "15532:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1363,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15532:56:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1364,
                        "nodeType": "ExpressionStatement",
                        "src": "15532:56:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1369,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1366,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1354,
                                "src": "15607:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 1367,
                                  "name": "excessReserves",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1408,
                                  "src": "15618:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                    "typeString": "function () view returns (uint256)"
                                  }
                                },
                                "id": 1368,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "15618:16:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "15607:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e73756666696369656e74207265736572766573",
                              "id": 1370,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15636:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6f055697f05542780f050f02e169b628baaede4365bd8f2e41b10829d224c674",
                                "typeString": "literal_string \"Insufficient reserves\""
                              },
                              "value": "Insufficient reserves"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_6f055697f05542780f050f02e169b628baaede4365bd8f2e41b10829d224c674",
                                "typeString": "literal_string \"Insufficient reserves\""
                              }
                            ],
                            "id": 1365,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "15598:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15598:63:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1372,
                        "nodeType": "ExpressionStatement",
                        "src": "15598:63:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1377,
                              "name": "_recipient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1352,
                              "src": "15700:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1378,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1354,
                              "src": "15712:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1374,
                                  "name": "OHM",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 686,
                                  "src": "15688:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1373,
                                "name": "IERC20Mintable",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 575,
                                "src": "15672:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20Mintable_$575_$",
                                  "typeString": "type(contract IERC20Mintable)"
                                }
                              },
                              "id": 1375,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "15672:21:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20Mintable_$575",
                                "typeString": "contract IERC20Mintable"
                              }
                            },
                            "id": 1376,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 574,
                            "src": "15672:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 1379,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15672:49:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1380,
                        "nodeType": "ExpressionStatement",
                        "src": "15672:49:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1382,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "15752:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1383,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "15752:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 1384,
                              "name": "_recipient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1352,
                              "src": "15764:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1385,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1354,
                              "src": "15776:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1381,
                            "name": "RewardsMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 659,
                            "src": "15737:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 1386,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15737:48:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1387,
                        "nodeType": "EmitStatement",
                        "src": "15732:53:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1350,
                    "nodeType": "StructuredDocumentation",
                    "src": "15386:65:0",
                    "text": "@notice send epoch reward to staking contract"
                  },
                  "functionSelector": "6a20de92",
                  "id": 1389,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mintRewards",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1355,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1352,
                        "mutability": "mutable",
                        "name": "_recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 1389,
                        "src": "15478:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1351,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "15478:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1354,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1389,
                        "src": "15498:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1353,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "15498:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15476:36:0"
                  },
                  "returnParameters": {
                    "id": 1356,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "15522:0:0"
                  },
                  "scope": 2311,
                  "src": "15456:336:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1407,
                    "nodeType": "Block",
                    "src": "15950:89:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1403,
                                  "name": "totalDebt",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 803,
                                  "src": "16019:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 1398,
                                          "name": "OHM",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 686,
                                          "src": "15994:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "id": 1397,
                                        "name": "IERC20",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 472,
                                        "src": "15986:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_contract$_IERC20_$472_$",
                                          "typeString": "type(contract IERC20)"
                                        }
                                      },
                                      "id": 1399,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "15986:13:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$472",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 1400,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "totalSupply",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 444,
                                    "src": "15986:25:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                                      "typeString": "function () view external returns (uint256)"
                                    }
                                  },
                                  "id": 1401,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "15986:27:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1402,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sub",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 42,
                                "src": "15986:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 1404,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "15986:44:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1395,
                              "name": "totalReserves",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 801,
                              "src": "15967:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1396,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 42,
                            "src": "15967:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1405,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15967:65:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1394,
                        "id": 1406,
                        "nodeType": "Return",
                        "src": "15960:72:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1390,
                    "nodeType": "StructuredDocumentation",
                    "src": "15799:91:0",
                    "text": "@notice returns excess reserves not backing tokens\n@return uint"
                  },
                  "functionSelector": "0c3513a8",
                  "id": 1408,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "excessReserves",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1391,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "15918:2:0"
                  },
                  "returnParameters": {
                    "id": 1394,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1393,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1408,
                        "src": "15943:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1392,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "15943:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15941:8:0"
                  },
                  "scope": 2311,
                  "src": "15895:144:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1499,
                    "nodeType": "Block",
                    "src": "16234:605:0",
                    "statements": [
                      {
                        "assignments": [
                          1415
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1415,
                            "mutability": "mutable",
                            "name": "reserves",
                            "nodeType": "VariableDeclaration",
                            "scope": 1499,
                            "src": "16244:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1414,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "16244:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1416,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "16244:13:0"
                      },
                      {
                        "body": {
                          "id": 1450,
                          "nodeType": "Block",
                          "src": "16316:168:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 1448,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1428,
                                  "name": "reserves",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1415,
                                  "src": "16330:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "baseExpression": {
                                            "id": 1432,
                                            "name": "reserveTokens",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 691,
                                            "src": "16382:13:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                              "typeString": "address[] storage ref"
                                            }
                                          },
                                          "id": 1434,
                                          "indexExpression": {
                                            "id": 1433,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1418,
                                            "src": "16397:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "16382:18:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "id": 1443,
                                                  "name": "this",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": -28,
                                                  "src": "16450:4:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_contract$_ApeTreasury_$2311",
                                                    "typeString": "contract ApeTreasury"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_contract$_ApeTreasury_$2311",
                                                    "typeString": "contract ApeTreasury"
                                                  }
                                                ],
                                                "id": 1442,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "nodeType": "ElementaryTypeNameExpression",
                                                "src": "16442:7:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_address_$",
                                                  "typeString": "type(address)"
                                                },
                                                "typeName": {
                                                  "id": 1441,
                                                  "name": "address",
                                                  "nodeType": "ElementaryTypeName",
                                                  "src": "16442:7:0",
                                                  "typeDescriptions": {}
                                                }
                                              },
                                              "id": 1444,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "16442:13:0",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            ],
                                            "expression": {
                                              "arguments": [
                                                {
                                                  "baseExpression": {
                                                    "id": 1436,
                                                    "name": "reserveTokens",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 691,
                                                    "src": "16410:13:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                      "typeString": "address[] storage ref"
                                                    }
                                                  },
                                                  "id": 1438,
                                                  "indexExpression": {
                                                    "id": 1437,
                                                    "name": "i",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1418,
                                                    "src": "16425:1:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "IndexAccess",
                                                  "src": "16410:18:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                ],
                                                "id": 1435,
                                                "name": "IERC20",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 472,
                                                "src": "16402:6:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$472_$",
                                                  "typeString": "type(contract IERC20)"
                                                }
                                              },
                                              "id": 1439,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "16402:28:0",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_IERC20_$472",
                                                "typeString": "contract IERC20"
                                              }
                                            },
                                            "id": 1440,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "balanceOf",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 421,
                                            "src": "16402:38:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                              "typeString": "function (address) view external returns (uint256)"
                                            }
                                          },
                                          "id": 1445,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "16402:55:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 1431,
                                        "name": "valueOf",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1555,
                                        "src": "16373:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                                          "typeString": "function (address,uint256) view returns (uint256)"
                                        }
                                      },
                                      "id": 1446,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "16373:86:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 1429,
                                      "name": "reserves",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1415,
                                      "src": "16341:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1430,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 26,
                                    "src": "16341:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 1447,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "16341:132:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "16330:143:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1449,
                              "nodeType": "ExpressionStatement",
                              "src": "16330:143:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1424,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1421,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1418,
                            "src": "16284:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1422,
                              "name": "reserveTokens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "16288:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 1423,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "16288:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16284:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1451,
                        "initializationExpression": {
                          "assignments": [
                            1418
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1418,
                              "mutability": "mutable",
                              "name": "i",
                              "nodeType": "VariableDeclaration",
                              "scope": 1451,
                              "src": "16272:6:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1417,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "16272:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1420,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1419,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "16281:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "16272:10:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1426,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "16310:3:0",
                            "subExpression": {
                              "id": 1425,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1418,
                              "src": "16310:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1427,
                          "nodeType": "ExpressionStatement",
                          "src": "16310:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "16267:217:0"
                      },
                      {
                        "body": {
                          "id": 1485,
                          "nodeType": "Block",
                          "src": "16544:171:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 1483,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1463,
                                  "name": "reserves",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1415,
                                  "src": "16558:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "baseExpression": {
                                            "id": 1467,
                                            "name": "liquidityTokens",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 724,
                                            "src": "16609:15:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                              "typeString": "address[] storage ref"
                                            }
                                          },
                                          "id": 1469,
                                          "indexExpression": {
                                            "id": 1468,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1453,
                                            "src": "16626:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "16609:20:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "id": 1478,
                                                  "name": "this",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": -28,
                                                  "src": "16681:4:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_contract$_ApeTreasury_$2311",
                                                    "typeString": "contract ApeTreasury"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_contract$_ApeTreasury_$2311",
                                                    "typeString": "contract ApeTreasury"
                                                  }
                                                ],
                                                "id": 1477,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "nodeType": "ElementaryTypeNameExpression",
                                                "src": "16673:7:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_address_$",
                                                  "typeString": "type(address)"
                                                },
                                                "typeName": {
                                                  "id": 1476,
                                                  "name": "address",
                                                  "nodeType": "ElementaryTypeName",
                                                  "src": "16673:7:0",
                                                  "typeDescriptions": {}
                                                }
                                              },
                                              "id": 1479,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "16673:13:0",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            ],
                                            "expression": {
                                              "arguments": [
                                                {
                                                  "baseExpression": {
                                                    "id": 1471,
                                                    "name": "liquidityTokens",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 724,
                                                    "src": "16639:15:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                      "typeString": "address[] storage ref"
                                                    }
                                                  },
                                                  "id": 1473,
                                                  "indexExpression": {
                                                    "id": 1472,
                                                    "name": "i",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1453,
                                                    "src": "16656:1:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "IndexAccess",
                                                  "src": "16639:20:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                ],
                                                "id": 1470,
                                                "name": "IERC20",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 472,
                                                "src": "16631:6:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$472_$",
                                                  "typeString": "type(contract IERC20)"
                                                }
                                              },
                                              "id": 1474,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "16631:30:0",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_IERC20_$472",
                                                "typeString": "contract IERC20"
                                              }
                                            },
                                            "id": 1475,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "balanceOf",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 421,
                                            "src": "16631:40:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                              "typeString": "function (address) view external returns (uint256)"
                                            }
                                          },
                                          "id": 1480,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "16631:57:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 1466,
                                        "name": "valueOf",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1555,
                                        "src": "16600:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                                          "typeString": "function (address,uint256) view returns (uint256)"
                                        }
                                      },
                                      "id": 1481,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "16600:90:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 1464,
                                      "name": "reserves",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1415,
                                      "src": "16569:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1465,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 26,
                                    "src": "16569:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 1482,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "16569:135:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "16558:146:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1484,
                              "nodeType": "ExpressionStatement",
                              "src": "16558:146:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1459,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1456,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1453,
                            "src": "16510:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1457,
                              "name": "liquidityTokens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 724,
                              "src": "16514:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 1458,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "16514:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16510:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1486,
                        "initializationExpression": {
                          "assignments": [
                            1453
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1453,
                              "mutability": "mutable",
                              "name": "i",
                              "nodeType": "VariableDeclaration",
                              "scope": 1486,
                              "src": "16498:6:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1452,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "16498:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1455,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1454,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "16507:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "16498:10:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1461,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "16538:3:0",
                            "subExpression": {
                              "id": 1460,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1453,
                              "src": "16538:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1462,
                          "nodeType": "ExpressionStatement",
                          "src": "16538:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "16493:222:0"
                      },
                      {
                        "expression": {
                          "id": 1489,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1487,
                            "name": "totalReserves",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 801,
                            "src": "16724:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1488,
                            "name": "reserves",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1415,
                            "src": "16740:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16724:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1490,
                        "nodeType": "ExpressionStatement",
                        "src": "16724:24:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1492,
                              "name": "reserves",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1415,
                              "src": "16780:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1491,
                            "name": "ReservesUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 647,
                            "src": "16763:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 1493,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16763:27:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1494,
                        "nodeType": "EmitStatement",
                        "src": "16758:32:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1496,
                              "name": "reserves",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1415,
                              "src": "16822:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1495,
                            "name": "ReservesAudited",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 651,
                            "src": "16805:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 1497,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16805:27:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1498,
                        "nodeType": "EmitStatement",
                        "src": "16800:32:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1409,
                    "nodeType": "StructuredDocumentation",
                    "src": "16045:136:0",
                    "text": "@notice takes inventory of all tracked assets\n@notice always consolidate to recognized reserves before audit"
                  },
                  "functionSelector": "2b7ce500",
                  "id": 1500,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [],
                      "id": 1412,
                      "modifierName": {
                        "id": 1411,
                        "name": "onlyManager",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 336,
                        "src": "16220:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "16220:13:0"
                    }
                  ],
                  "name": "auditReserves",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1410,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "16208:2:0"
                  },
                  "returnParameters": {
                    "id": 1413,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "16234:0:0"
                  },
                  "scope": 2311,
                  "src": "16186:653:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1554,
                    "nodeType": "Block",
                    "src": "17079:366:0",
                    "statements": [
                      {
                        "condition": {
                          "baseExpression": {
                            "id": 1510,
                            "name": "isReserveToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 695,
                            "src": "17094:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 1512,
                          "indexExpression": {
                            "id": 1511,
                            "name": "_token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1503,
                            "src": "17110:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "17094:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "baseExpression": {
                              "id": 1536,
                              "name": "isLiquidityToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 728,
                              "src": "17304:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 1538,
                            "indexExpression": {
                              "id": 1537,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1503,
                              "src": "17322:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "17304:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 1552,
                          "nodeType": "IfStatement",
                          "src": "17299:140:0",
                          "trueBody": {
                            "id": 1551,
                            "nodeType": "Block",
                            "src": "17333:106:0",
                            "statements": [
                              {
                                "expression": {
                                  "id": 1549,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "id": 1539,
                                    "name": "value_",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1508,
                                    "src": "17347:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "arguments": [
                                      {
                                        "id": 1546,
                                        "name": "_token",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1503,
                                        "src": "17411:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "id": 1547,
                                        "name": "_amount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1505,
                                        "src": "17419:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "arguments": [
                                          {
                                            "baseExpression": {
                                              "id": 1541,
                                              "name": "bondCalculator",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 747,
                                              "src": "17373:14:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                                "typeString": "mapping(address => address)"
                                              }
                                            },
                                            "id": 1543,
                                            "indexExpression": {
                                              "id": 1542,
                                              "name": "_token",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1503,
                                              "src": "17389:6:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "17373:24:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          ],
                                          "id": 1540,
                                          "name": "IBondCalculator",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 593,
                                          "src": "17356:15:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_IBondCalculator_$593_$",
                                            "typeString": "type(contract IBondCalculator)"
                                          }
                                        },
                                        "id": 1544,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "17356:43:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_IBondCalculator_$593",
                                          "typeString": "contract IBondCalculator"
                                        }
                                      },
                                      "id": 1545,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "valuation",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 592,
                                      "src": "17356:53:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                                        "typeString": "function (address,uint256) view external returns (uint256)"
                                      }
                                    },
                                    "id": 1548,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "17356:72:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "17347:81:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1550,
                                "nodeType": "ExpressionStatement",
                                "src": "17347:81:0"
                              }
                            ]
                          }
                        },
                        "id": 1553,
                        "nodeType": "IfStatement",
                        "src": "17089:350:0",
                        "trueBody": {
                          "id": 1535,
                          "nodeType": "Block",
                          "src": "17121:172:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 1533,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1513,
                                  "name": "value_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1508,
                                  "src": "17187:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1531,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 1525,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "17247:2:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "arguments": [],
                                        "expression": {
                                          "argumentTypes": [],
                                          "expression": {
                                            "arguments": [
                                              {
                                                "id": 1527,
                                                "name": "_token",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1503,
                                                "src": "17261:6:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              ],
                                              "id": 1526,
                                              "name": "IERC20",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 472,
                                              "src": "17253:6:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_contract$_IERC20_$472_$",
                                                "typeString": "type(contract IERC20)"
                                              }
                                            },
                                            "id": 1528,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "typeConversion",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "17253:16:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_IERC20_$472",
                                              "typeString": "contract IERC20"
                                            }
                                          },
                                          "id": 1529,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "decimals",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 414,
                                          "src": "17253:25:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                            "typeString": "function () view external returns (uint8)"
                                          }
                                        },
                                        "id": 1530,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "17253:27:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        }
                                      },
                                      "src": "17247:33:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "arguments": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1522,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "hexValue": "3130",
                                            "id": 1516,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "17209:2:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_10_by_1",
                                              "typeString": "int_const 10"
                                            },
                                            "value": "10"
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "**",
                                          "rightExpression": {
                                            "arguments": [],
                                            "expression": {
                                              "argumentTypes": [],
                                              "expression": {
                                                "arguments": [
                                                  {
                                                    "id": 1518,
                                                    "name": "OHM",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 686,
                                                    "src": "17223:3:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  ],
                                                  "id": 1517,
                                                  "name": "IERC20",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 472,
                                                  "src": "17215:6:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_type$_t_contract$_IERC20_$472_$",
                                                    "typeString": "type(contract IERC20)"
                                                  }
                                                },
                                                "id": 1519,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "typeConversion",
                                                "lValueRequested": false,
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "17215:13:0",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_contract$_IERC20_$472",
                                                  "typeString": "contract IERC20"
                                                }
                                              },
                                              "id": 1520,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "decimals",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 414,
                                              "src": "17215:22:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                                "typeString": "function () view external returns (uint8)"
                                              }
                                            },
                                            "id": 1521,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "17215:24:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            }
                                          },
                                          "src": "17209:30:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "id": 1514,
                                          "name": "_amount",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1505,
                                          "src": "17196:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 1515,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "mul",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 103,
                                        "src": "17196:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                                        }
                                      },
                                      "id": 1523,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "17196:45:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1524,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "div",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 119,
                                    "src": "17196:49:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 1532,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "17196:86:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "17187:95:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1534,
                              "nodeType": "ExpressionStatement",
                              "src": "17187:95:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1501,
                    "nodeType": "StructuredDocumentation",
                    "src": "16845:144:0",
                    "text": "@notice returns OHM valuation of asset\n@param _token address\n@param _amount uint\n@return value_ uint"
                  },
                  "functionSelector": "1eec5a9a",
                  "id": 1555,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "valueOf",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1506,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1503,
                        "mutability": "mutable",
                        "name": "_token",
                        "nodeType": "VariableDeclaration",
                        "scope": 1555,
                        "src": "17012:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1502,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "17012:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1505,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1555,
                        "src": "17028:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1504,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "17028:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17010:32:0"
                  },
                  "returnParameters": {
                    "id": 1509,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1508,
                        "mutability": "mutable",
                        "name": "value_",
                        "nodeType": "VariableDeclaration",
                        "scope": 1555,
                        "src": "17065:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1507,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "17065:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17063:15:0"
                  },
                  "scope": 2311,
                  "src": "16994:451:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1749,
                    "nodeType": "Block",
                    "src": "17708:1664:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1573,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1568,
                                "name": "_address",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1560,
                                "src": "17727:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 1571,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "17747:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 1570,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "17739:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1569,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "17739:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1572,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "17739:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "17727:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1567,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "17718:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1574,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17718:33:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1575,
                        "nodeType": "ExpressionStatement",
                        "src": "17718:33:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_MANAGING_$684",
                            "typeString": "enum ApeTreasury.MANAGING"
                          },
                          "id": 1579,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1576,
                            "name": "_managing",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1558,
                            "src": "17766:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MANAGING_$684",
                              "typeString": "enum ApeTreasury.MANAGING"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 1577,
                              "name": "MANAGING",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 684,
                              "src": "17779:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                "typeString": "type(enum ApeTreasury.MANAGING)"
                              }
                            },
                            "id": 1578,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "RESERVEDEPOSITOR",
                            "nodeType": "MemberAccess",
                            "src": "17779:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MANAGING_$684",
                              "typeString": "enum ApeTreasury.MANAGING"
                            }
                          },
                          "src": "17766:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_enum$_MANAGING_$684",
                              "typeString": "enum ApeTreasury.MANAGING"
                            },
                            "id": 1594,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1591,
                              "name": "_managing",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1558,
                              "src": "17924:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                "typeString": "enum ApeTreasury.MANAGING"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "expression": {
                                "id": 1592,
                                "name": "MANAGING",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 684,
                                "src": "17937:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                  "typeString": "type(enum ApeTreasury.MANAGING)"
                                }
                              },
                              "id": 1593,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "RESERVESPENDER",
                              "nodeType": "MemberAccess",
                              "src": "17937:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                "typeString": "enum ApeTreasury.MANAGING"
                              }
                            },
                            "src": "17924:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                "typeString": "enum ApeTreasury.MANAGING"
                              },
                              "id": 1609,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1606,
                                "name": "_managing",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1558,
                                "src": "18078:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_MANAGING_$684",
                                  "typeString": "enum ApeTreasury.MANAGING"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 1607,
                                  "name": "MANAGING",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 684,
                                  "src": "18091:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                    "typeString": "type(enum ApeTreasury.MANAGING)"
                                  }
                                },
                                "id": 1608,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "RESERVETOKEN",
                                "nodeType": "MemberAccess",
                                "src": "18091:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_MANAGING_$684",
                                  "typeString": "enum ApeTreasury.MANAGING"
                                }
                              },
                              "src": "18078:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_enum$_MANAGING_$684",
                                  "typeString": "enum ApeTreasury.MANAGING"
                                },
                                "id": 1624,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1621,
                                  "name": "_managing",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1558,
                                  "src": "18228:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_MANAGING_$684",
                                    "typeString": "enum ApeTreasury.MANAGING"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1622,
                                    "name": "MANAGING",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 684,
                                    "src": "18241:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                      "typeString": "type(enum ApeTreasury.MANAGING)"
                                    }
                                  },
                                  "id": 1623,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "RESERVEMANAGER",
                                  "nodeType": "MemberAccess",
                                  "src": "18241:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_MANAGING_$684",
                                    "typeString": "enum ApeTreasury.MANAGING"
                                  }
                                },
                                "src": "18228:36:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "condition": {
                                  "commonType": {
                                    "typeIdentifier": "t_enum$_MANAGING_$684",
                                    "typeString": "enum ApeTreasury.MANAGING"
                                  },
                                  "id": 1642,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1639,
                                    "name": "_managing",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1558,
                                    "src": "18391:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_MANAGING_$684",
                                      "typeString": "enum ApeTreasury.MANAGING"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 1640,
                                      "name": "MANAGING",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 684,
                                      "src": "18404:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                        "typeString": "type(enum ApeTreasury.MANAGING)"
                                      }
                                    },
                                    "id": 1641,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "LIQUIDITYDEPOSITOR",
                                    "nodeType": "MemberAccess",
                                    "src": "18404:27:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_MANAGING_$684",
                                      "typeString": "enum ApeTreasury.MANAGING"
                                    }
                                  },
                                  "src": "18391:40:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "falseBody": {
                                  "condition": {
                                    "commonType": {
                                      "typeIdentifier": "t_enum$_MANAGING_$684",
                                      "typeString": "enum ApeTreasury.MANAGING"
                                    },
                                    "id": 1657,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1654,
                                      "name": "_managing",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1558,
                                      "src": "18553:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_MANAGING_$684",
                                        "typeString": "enum ApeTreasury.MANAGING"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "expression": {
                                        "id": 1655,
                                        "name": "MANAGING",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 684,
                                        "src": "18566:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                          "typeString": "type(enum ApeTreasury.MANAGING)"
                                        }
                                      },
                                      "id": 1656,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "LIQUIDITYTOKEN",
                                      "nodeType": "MemberAccess",
                                      "src": "18566:23:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_MANAGING_$684",
                                        "typeString": "enum ApeTreasury.MANAGING"
                                      }
                                    },
                                    "src": "18553:36:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "falseBody": {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_enum$_MANAGING_$684",
                                        "typeString": "enum ApeTreasury.MANAGING"
                                      },
                                      "id": 1672,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 1669,
                                        "name": "_managing",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1558,
                                        "src": "18707:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_enum$_MANAGING_$684",
                                          "typeString": "enum ApeTreasury.MANAGING"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "expression": {
                                          "id": 1670,
                                          "name": "MANAGING",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 684,
                                          "src": "18720:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                            "typeString": "type(enum ApeTreasury.MANAGING)"
                                          }
                                        },
                                        "id": 1671,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "LIQUIDITYMANAGER",
                                        "nodeType": "MemberAccess",
                                        "src": "18720:25:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_enum$_MANAGING_$684",
                                          "typeString": "enum ApeTreasury.MANAGING"
                                        }
                                      },
                                      "src": "18707:38:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseBody": {
                                      "condition": {
                                        "commonType": {
                                          "typeIdentifier": "t_enum$_MANAGING_$684",
                                          "typeString": "enum ApeTreasury.MANAGING"
                                        },
                                        "id": 1690,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 1687,
                                          "name": "_managing",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1558,
                                          "src": "18874:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_MANAGING_$684",
                                            "typeString": "enum ApeTreasury.MANAGING"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "==",
                                        "rightExpression": {
                                          "expression": {
                                            "id": 1688,
                                            "name": "MANAGING",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 684,
                                            "src": "18887:8:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                              "typeString": "type(enum ApeTreasury.MANAGING)"
                                            }
                                          },
                                          "id": 1689,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "memberName": "DEBTOR",
                                          "nodeType": "MemberAccess",
                                          "src": "18887:15:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_MANAGING_$684",
                                            "typeString": "enum ApeTreasury.MANAGING"
                                          }
                                        },
                                        "src": "18874:28:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "falseBody": {
                                        "condition": {
                                          "commonType": {
                                            "typeIdentifier": "t_enum$_MANAGING_$684",
                                            "typeString": "enum ApeTreasury.MANAGING"
                                          },
                                          "id": 1705,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 1702,
                                            "name": "_managing",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1558,
                                            "src": "19012:9:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_enum$_MANAGING_$684",
                                              "typeString": "enum ApeTreasury.MANAGING"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "==",
                                          "rightExpression": {
                                            "expression": {
                                              "id": 1703,
                                              "name": "MANAGING",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 684,
                                              "src": "19025:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                                "typeString": "type(enum ApeTreasury.MANAGING)"
                                              }
                                            },
                                            "id": 1704,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "memberName": "REWARDMANAGER",
                                            "nodeType": "MemberAccess",
                                            "src": "19025:22:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_enum$_MANAGING_$684",
                                              "typeString": "enum ApeTreasury.MANAGING"
                                            }
                                          },
                                          "src": "19012:35:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "falseBody": {
                                          "condition": {
                                            "commonType": {
                                              "typeIdentifier": "t_enum$_MANAGING_$684",
                                              "typeString": "enum ApeTreasury.MANAGING"
                                            },
                                            "id": 1720,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 1717,
                                              "name": "_managing",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1558,
                                              "src": "19164:9:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                                "typeString": "enum ApeTreasury.MANAGING"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "==",
                                            "rightExpression": {
                                              "expression": {
                                                "id": 1718,
                                                "name": "MANAGING",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 684,
                                                "src": "19177:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                                  "typeString": "type(enum ApeTreasury.MANAGING)"
                                                }
                                              },
                                              "id": 1719,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "memberName": "SOHM",
                                              "nodeType": "MemberAccess",
                                              "src": "19177:13:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                                "typeString": "enum ApeTreasury.MANAGING"
                                              }
                                            },
                                            "src": "19164:26:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "falseBody": {
                                            "expression": {
                                              "hexValue": "66616c7365",
                                              "id": 1730,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "bool",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "19288:5:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              },
                                              "value": "false"
                                            },
                                            "functionReturnParameters": 1566,
                                            "id": 1731,
                                            "nodeType": "Return",
                                            "src": "19281:12:0"
                                          },
                                          "id": 1732,
                                          "nodeType": "IfStatement",
                                          "src": "19159:134:0",
                                          "trueBody": {
                                            "id": 1729,
                                            "nodeType": "Block",
                                            "src": "19193:82:0",
                                            "statements": [
                                              {
                                                "expression": {
                                                  "id": 1727,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftHandSide": {
                                                    "id": 1721,
                                                    "name": "sOHMQueue",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 799,
                                                    "src": "19212:9:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "nodeType": "Assignment",
                                                  "operator": "=",
                                                  "rightHandSide": {
                                                    "arguments": [
                                                      {
                                                        "id": 1725,
                                                        "name": "blocksNeededForQueue",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 688,
                                                        "src": "19242:20:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      }
                                                    ],
                                                    "expression": {
                                                      "argumentTypes": [
                                                        {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      ],
                                                      "expression": {
                                                        "expression": {
                                                          "id": 1722,
                                                          "name": "block",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": -4,
                                                          "src": "19224:5:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_magic_block",
                                                            "typeString": "block"
                                                          }
                                                        },
                                                        "id": 1723,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": false,
                                                        "lValueRequested": false,
                                                        "memberName": "number",
                                                        "nodeType": "MemberAccess",
                                                        "src": "19224:12:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "id": 1724,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "memberName": "add",
                                                      "nodeType": "MemberAccess",
                                                      "referencedDeclaration": 26,
                                                      "src": "19224:16:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                                                      }
                                                    },
                                                    "id": 1726,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "kind": "functionCall",
                                                    "lValueRequested": false,
                                                    "names": [],
                                                    "nodeType": "FunctionCall",
                                                    "src": "19224:40:0",
                                                    "tryCall": false,
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "src": "19212:52:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "id": 1728,
                                                "nodeType": "ExpressionStatement",
                                                "src": "19212:52:0"
                                              }
                                            ]
                                          }
                                        },
                                        "id": 1733,
                                        "nodeType": "IfStatement",
                                        "src": "19007:286:0",
                                        "trueBody": {
                                          "id": 1716,
                                          "nodeType": "Block",
                                          "src": "19050:103:0",
                                          "statements": [
                                            {
                                              "expression": {
                                                "id": 1714,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftHandSide": {
                                                  "baseExpression": {
                                                    "id": 1706,
                                                    "name": "rewardManagerQueue",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 795,
                                                    "src": "19069:18:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                      "typeString": "mapping(address => uint256)"
                                                    }
                                                  },
                                                  "id": 1708,
                                                  "indexExpression": {
                                                    "id": 1707,
                                                    "name": "_address",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1560,
                                                    "src": "19089:8:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": true,
                                                  "nodeType": "IndexAccess",
                                                  "src": "19069:30:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "Assignment",
                                                "operator": "=",
                                                "rightHandSide": {
                                                  "arguments": [
                                                    {
                                                      "id": 1712,
                                                      "name": "blocksNeededForQueue",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 688,
                                                      "src": "19120:20:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    ],
                                                    "expression": {
                                                      "expression": {
                                                        "id": 1709,
                                                        "name": "block",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": -4,
                                                        "src": "19102:5:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_magic_block",
                                                          "typeString": "block"
                                                        }
                                                      },
                                                      "id": 1710,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "memberName": "number",
                                                      "nodeType": "MemberAccess",
                                                      "src": "19102:12:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "id": 1711,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "add",
                                                    "nodeType": "MemberAccess",
                                                    "referencedDeclaration": 26,
                                                    "src": "19102:16:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                                    }
                                                  },
                                                  "id": 1713,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "19102:40:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "src": "19069:73:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "id": 1715,
                                              "nodeType": "ExpressionStatement",
                                              "src": "19069:73:0"
                                            }
                                          ]
                                        }
                                      },
                                      "id": 1734,
                                      "nodeType": "IfStatement",
                                      "src": "18869:424:0",
                                      "trueBody": {
                                        "id": 1701,
                                        "nodeType": "Block",
                                        "src": "18905:96:0",
                                        "statements": [
                                          {
                                            "expression": {
                                              "id": 1699,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftHandSide": {
                                                "baseExpression": {
                                                  "id": 1691,
                                                  "name": "debtorQueue",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 780,
                                                  "src": "18924:11:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                    "typeString": "mapping(address => uint256)"
                                                  }
                                                },
                                                "id": 1693,
                                                "indexExpression": {
                                                  "id": 1692,
                                                  "name": "_address",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1560,
                                                  "src": "18937:8:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": true,
                                                "nodeType": "IndexAccess",
                                                "src": "18924:23:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "nodeType": "Assignment",
                                              "operator": "=",
                                              "rightHandSide": {
                                                "arguments": [
                                                  {
                                                    "id": 1697,
                                                    "name": "blocksNeededForQueue",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 688,
                                                    "src": "18968:20:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  ],
                                                  "expression": {
                                                    "expression": {
                                                      "id": 1694,
                                                      "name": "block",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": -4,
                                                      "src": "18950:5:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_magic_block",
                                                        "typeString": "block"
                                                      }
                                                    },
                                                    "id": 1695,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "number",
                                                    "nodeType": "MemberAccess",
                                                    "src": "18950:12:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "id": 1696,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "add",
                                                  "nodeType": "MemberAccess",
                                                  "referencedDeclaration": 26,
                                                  "src": "18950:16:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                                  }
                                                },
                                                "id": 1698,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "functionCall",
                                                "lValueRequested": false,
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "18950:40:0",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "src": "18924:66:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "id": 1700,
                                            "nodeType": "ExpressionStatement",
                                            "src": "18924:66:0"
                                          }
                                        ]
                                      }
                                    },
                                    "id": 1735,
                                    "nodeType": "IfStatement",
                                    "src": "18702:591:0",
                                    "trueBody": {
                                      "id": 1686,
                                      "nodeType": "Block",
                                      "src": "18748:115:0",
                                      "statements": [
                                        {
                                          "expression": {
                                            "id": 1684,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "baseExpression": {
                                                "id": 1673,
                                                "name": "LiquidityManagerQueue",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 769,
                                                "src": "18767:21:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                  "typeString": "mapping(address => uint256)"
                                                }
                                              },
                                              "id": 1675,
                                              "indexExpression": {
                                                "id": 1674,
                                                "name": "_address",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1560,
                                                "src": "18790:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": true,
                                              "nodeType": "IndexAccess",
                                              "src": "18767:33:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "hexValue": "32",
                                                      "id": 1681,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "number",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "18847:1:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_2_by_1",
                                                        "typeString": "int_const 2"
                                                      },
                                                      "value": "2"
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_rational_2_by_1",
                                                        "typeString": "int_const 2"
                                                      }
                                                    ],
                                                    "expression": {
                                                      "id": 1679,
                                                      "name": "blocksNeededForQueue",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 688,
                                                      "src": "18821:20:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "id": 1680,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "mul",
                                                    "nodeType": "MemberAccess",
                                                    "referencedDeclaration": 103,
                                                    "src": "18821:24:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                                    }
                                                  },
                                                  "id": 1682,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "18821:29:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                ],
                                                "expression": {
                                                  "expression": {
                                                    "id": 1676,
                                                    "name": "block",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": -4,
                                                    "src": "18803:5:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_magic_block",
                                                      "typeString": "block"
                                                    }
                                                  },
                                                  "id": 1677,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "number",
                                                  "nodeType": "MemberAccess",
                                                  "src": "18803:12:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "id": 1678,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "add",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 26,
                                                "src": "18803:16:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                                }
                                              },
                                              "id": 1683,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "functionCall",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "18803:49:0",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "18767:85:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 1685,
                                          "nodeType": "ExpressionStatement",
                                          "src": "18767:85:0"
                                        }
                                      ]
                                    }
                                  },
                                  "id": 1736,
                                  "nodeType": "IfStatement",
                                  "src": "18548:745:0",
                                  "trueBody": {
                                    "id": 1668,
                                    "nodeType": "Block",
                                    "src": "18592:104:0",
                                    "statements": [
                                      {
                                        "expression": {
                                          "id": 1666,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftHandSide": {
                                            "baseExpression": {
                                              "id": 1658,
                                              "name": "LiquidityTokenQueue",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 732,
                                              "src": "18611:19:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                "typeString": "mapping(address => uint256)"
                                              }
                                            },
                                            "id": 1660,
                                            "indexExpression": {
                                              "id": 1659,
                                              "name": "_address",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1560,
                                              "src": "18632:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": true,
                                            "nodeType": "IndexAccess",
                                            "src": "18611:31:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "Assignment",
                                          "operator": "=",
                                          "rightHandSide": {
                                            "arguments": [
                                              {
                                                "id": 1664,
                                                "name": "blocksNeededForQueue",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 688,
                                                "src": "18663:20:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              ],
                                              "expression": {
                                                "expression": {
                                                  "id": 1661,
                                                  "name": "block",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": -4,
                                                  "src": "18645:5:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_magic_block",
                                                    "typeString": "block"
                                                  }
                                                },
                                                "id": 1662,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "number",
                                                "nodeType": "MemberAccess",
                                                "src": "18645:12:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "id": 1663,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "add",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 26,
                                              "src": "18645:16:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                                              }
                                            },
                                            "id": 1665,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "18645:40:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "18611:74:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 1667,
                                        "nodeType": "ExpressionStatement",
                                        "src": "18611:74:0"
                                      }
                                    ]
                                  }
                                },
                                "id": 1737,
                                "nodeType": "IfStatement",
                                "src": "18386:907:0",
                                "trueBody": {
                                  "id": 1653,
                                  "nodeType": "Block",
                                  "src": "18434:108:0",
                                  "statements": [
                                    {
                                      "expression": {
                                        "id": 1651,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftHandSide": {
                                          "baseExpression": {
                                            "id": 1643,
                                            "name": "LiquidityDepositorQueue",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 743,
                                            "src": "18453:23:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                              "typeString": "mapping(address => uint256)"
                                            }
                                          },
                                          "id": 1645,
                                          "indexExpression": {
                                            "id": 1644,
                                            "name": "_address",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1560,
                                            "src": "18478:8:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": true,
                                          "nodeType": "IndexAccess",
                                          "src": "18453:35:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "Assignment",
                                        "operator": "=",
                                        "rightHandSide": {
                                          "arguments": [
                                            {
                                              "id": 1649,
                                              "name": "blocksNeededForQueue",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 688,
                                              "src": "18509:20:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            ],
                                            "expression": {
                                              "expression": {
                                                "id": 1646,
                                                "name": "block",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": -4,
                                                "src": "18491:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_magic_block",
                                                  "typeString": "block"
                                                }
                                              },
                                              "id": 1647,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "number",
                                              "nodeType": "MemberAccess",
                                              "src": "18491:12:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "id": 1648,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "add",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 26,
                                            "src": "18491:16:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                                            }
                                          },
                                          "id": 1650,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "18491:40:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "18453:78:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 1652,
                                      "nodeType": "ExpressionStatement",
                                      "src": "18453:78:0"
                                    }
                                  ]
                                }
                              },
                              "id": 1738,
                              "nodeType": "IfStatement",
                              "src": "18223:1070:0",
                              "trueBody": {
                                "id": 1638,
                                "nodeType": "Block",
                                "src": "18267:113:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 1636,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "baseExpression": {
                                          "id": 1625,
                                          "name": "ReserveManagerQueue",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 758,
                                          "src": "18286:19:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                            "typeString": "mapping(address => uint256)"
                                          }
                                        },
                                        "id": 1627,
                                        "indexExpression": {
                                          "id": 1626,
                                          "name": "_address",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1560,
                                          "src": "18307:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "18286:31:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "hexValue": "32",
                                                "id": 1633,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "number",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "18364:1:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_rational_2_by_1",
                                                  "typeString": "int_const 2"
                                                },
                                                "value": "2"
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_rational_2_by_1",
                                                  "typeString": "int_const 2"
                                                }
                                              ],
                                              "expression": {
                                                "id": 1631,
                                                "name": "blocksNeededForQueue",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 688,
                                                "src": "18338:20:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "id": 1632,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "mul",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 103,
                                              "src": "18338:24:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                                              }
                                            },
                                            "id": 1634,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "18338:29:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "expression": {
                                              "id": 1628,
                                              "name": "block",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": -4,
                                              "src": "18320:5:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_magic_block",
                                                "typeString": "block"
                                              }
                                            },
                                            "id": 1629,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "number",
                                            "nodeType": "MemberAccess",
                                            "src": "18320:12:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 1630,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "add",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 26,
                                          "src": "18320:16:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                                          }
                                        },
                                        "id": 1635,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "18320:49:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "18286:83:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1637,
                                    "nodeType": "ExpressionStatement",
                                    "src": "18286:83:0"
                                  }
                                ]
                              }
                            },
                            "id": 1739,
                            "nodeType": "IfStatement",
                            "src": "18073:1220:0",
                            "trueBody": {
                              "id": 1620,
                              "nodeType": "Block",
                              "src": "18115:102:0",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 1618,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "baseExpression": {
                                        "id": 1610,
                                        "name": "reserveTokenQueue",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 699,
                                        "src": "18134:17:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                          "typeString": "mapping(address => uint256)"
                                        }
                                      },
                                      "id": 1612,
                                      "indexExpression": {
                                        "id": 1611,
                                        "name": "_address",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1560,
                                        "src": "18153:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "nodeType": "IndexAccess",
                                      "src": "18134:29:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "arguments": [
                                        {
                                          "id": 1616,
                                          "name": "blocksNeededForQueue",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 688,
                                          "src": "18184:20:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "expression": {
                                            "id": 1613,
                                            "name": "block",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -4,
                                            "src": "18166:5:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_magic_block",
                                              "typeString": "block"
                                            }
                                          },
                                          "id": 1614,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "number",
                                          "nodeType": "MemberAccess",
                                          "src": "18166:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 1615,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "add",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 26,
                                        "src": "18166:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                                        }
                                      },
                                      "id": 1617,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "18166:40:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "18134:72:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1619,
                                  "nodeType": "ExpressionStatement",
                                  "src": "18134:72:0"
                                }
                              ]
                            }
                          },
                          "id": 1740,
                          "nodeType": "IfStatement",
                          "src": "17919:1374:0",
                          "trueBody": {
                            "id": 1605,
                            "nodeType": "Block",
                            "src": "17963:104:0",
                            "statements": [
                              {
                                "expression": {
                                  "id": 1603,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "baseExpression": {
                                      "id": 1595,
                                      "name": "reserveSpenderQueue",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 721,
                                      "src": "17982:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                        "typeString": "mapping(address => uint256)"
                                      }
                                    },
                                    "id": 1597,
                                    "indexExpression": {
                                      "id": 1596,
                                      "name": "_address",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1560,
                                      "src": "18003:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": true,
                                    "nodeType": "IndexAccess",
                                    "src": "17982:31:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "arguments": [
                                      {
                                        "id": 1601,
                                        "name": "blocksNeededForQueue",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 688,
                                        "src": "18034:20:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "expression": {
                                          "id": 1598,
                                          "name": "block",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -4,
                                          "src": "18016:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_block",
                                            "typeString": "block"
                                          }
                                        },
                                        "id": 1599,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "number",
                                        "nodeType": "MemberAccess",
                                        "src": "18016:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 1600,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "add",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 26,
                                      "src": "18016:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                                      }
                                    },
                                    "id": 1602,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "18016:40:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "17982:74:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1604,
                                "nodeType": "ExpressionStatement",
                                "src": "17982:74:0"
                              }
                            ]
                          }
                        },
                        "id": 1741,
                        "nodeType": "IfStatement",
                        "src": "17761:1532:0",
                        "trueBody": {
                          "id": 1590,
                          "nodeType": "Block",
                          "src": "17807:106:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 1588,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1580,
                                    "name": "reserveDepositorQueue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 710,
                                    "src": "17826:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 1582,
                                  "indexExpression": {
                                    "id": 1581,
                                    "name": "_address",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1560,
                                    "src": "17849:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "17826:33:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 1586,
                                      "name": "blocksNeededForQueue",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 688,
                                      "src": "17880:20:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "expression": {
                                        "id": 1583,
                                        "name": "block",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -4,
                                        "src": "17862:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_block",
                                          "typeString": "block"
                                        }
                                      },
                                      "id": 1584,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "number",
                                      "nodeType": "MemberAccess",
                                      "src": "17862:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1585,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 26,
                                    "src": "17862:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 1587,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "17862:40:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "17826:76:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1589,
                              "nodeType": "ExpressionStatement",
                              "src": "17826:76:0"
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1743,
                              "name": "_managing",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1558,
                              "src": "19323:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                "typeString": "enum ApeTreasury.MANAGING"
                              }
                            },
                            {
                              "id": 1744,
                              "name": "_address",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1560,
                              "src": "19334:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                "typeString": "enum ApeTreasury.MANAGING"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1742,
                            "name": "ChangeQueued",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 665,
                            "src": "19309:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_enum$_MANAGING_$684_$_t_address_$returns$__$",
                              "typeString": "function (enum ApeTreasury.MANAGING,address)"
                            }
                          },
                          "id": 1745,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "19309:35:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1746,
                        "nodeType": "EmitStatement",
                        "src": "19304:40:0"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 1747,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "19361:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 1566,
                        "id": 1748,
                        "nodeType": "Return",
                        "src": "19354:11:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1556,
                    "nodeType": "StructuredDocumentation",
                    "src": "17451:157:0",
                    "text": "@notice queue address to change boolean in mapping\n@param _managing MANAGING\n@param _address address\n@return bool"
                  },
                  "functionSelector": "e83afee3",
                  "id": 1750,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [],
                      "id": 1563,
                      "modifierName": {
                        "id": 1562,
                        "name": "onlyManager",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 336,
                        "src": "17677:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "17677:13:0"
                    }
                  ],
                  "name": "queue",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1561,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1558,
                        "mutability": "mutable",
                        "name": "_managing",
                        "nodeType": "VariableDeclaration",
                        "scope": 1750,
                        "src": "17629:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_MANAGING_$684",
                          "typeString": "enum ApeTreasury.MANAGING"
                        },
                        "typeName": {
                          "id": 1557,
                          "name": "MANAGING",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 684,
                          "src": "17629:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_MANAGING_$684",
                            "typeString": "enum ApeTreasury.MANAGING"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1560,
                        "mutability": "mutable",
                        "name": "_address",
                        "nodeType": "VariableDeclaration",
                        "scope": 1750,
                        "src": "17649:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1559,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "17649:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17627:40:0"
                  },
                  "returnParameters": {
                    "id": 1566,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1565,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1750,
                        "src": "17701:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1564,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "17701:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17699:8:0"
                  },
                  "scope": 2311,
                  "src": "17613:1759:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2227,
                    "nodeType": "Block",
                    "src": "19690:4611:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1770,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1765,
                                "name": "_address",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1755,
                                "src": "19709:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 1768,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "19729:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 1767,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "19721:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1766,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "19721:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1769,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "19721:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "19709:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1764,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "19700:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1771,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "19700:33:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1772,
                        "nodeType": "ExpressionStatement",
                        "src": "19700:33:0"
                      },
                      {
                        "assignments": [
                          1774
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1774,
                            "mutability": "mutable",
                            "name": "result",
                            "nodeType": "VariableDeclaration",
                            "scope": 2227,
                            "src": "19743:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1773,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "19743:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1775,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "19743:11:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_MANAGING_$684",
                            "typeString": "enum ApeTreasury.MANAGING"
                          },
                          "id": 1779,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1776,
                            "name": "_managing",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1753,
                            "src": "19769:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MANAGING_$684",
                              "typeString": "enum ApeTreasury.MANAGING"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 1777,
                              "name": "MANAGING",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 684,
                              "src": "19782:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                "typeString": "type(enum ApeTreasury.MANAGING)"
                              }
                            },
                            "id": 1778,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "RESERVEDEPOSITOR",
                            "nodeType": "MemberAccess",
                            "src": "19782:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_MANAGING_$684",
                              "typeString": "enum ApeTreasury.MANAGING"
                            }
                          },
                          "src": "19769:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_enum$_MANAGING_$684",
                              "typeString": "enum ApeTreasury.MANAGING"
                            },
                            "id": 1823,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1820,
                              "name": "_managing",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1753,
                              "src": "20258:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                "typeString": "enum ApeTreasury.MANAGING"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "expression": {
                                "id": 1821,
                                "name": "MANAGING",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 684,
                                "src": "20271:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                  "typeString": "type(enum ApeTreasury.MANAGING)"
                                }
                              },
                              "id": 1822,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "RESERVESPENDER",
                              "nodeType": "MemberAccess",
                              "src": "20271:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                "typeString": "enum ApeTreasury.MANAGING"
                              }
                            },
                            "src": "20258:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                "typeString": "enum ApeTreasury.MANAGING"
                              },
                              "id": 1867,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1864,
                                "name": "_managing",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1753,
                                "src": "20719:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_MANAGING_$684",
                                  "typeString": "enum ApeTreasury.MANAGING"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 1865,
                                  "name": "MANAGING",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 684,
                                  "src": "20732:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                    "typeString": "type(enum ApeTreasury.MANAGING)"
                                  }
                                },
                                "id": 1866,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "RESERVETOKEN",
                                "nodeType": "MemberAccess",
                                "src": "20732:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_MANAGING_$684",
                                  "typeString": "enum ApeTreasury.MANAGING"
                                }
                              },
                              "src": "20719:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_enum$_MANAGING_$684",
                                  "typeString": "enum ApeTreasury.MANAGING"
                                },
                                "id": 1911,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1908,
                                  "name": "_managing",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1753,
                                  "src": "21164:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_MANAGING_$684",
                                    "typeString": "enum ApeTreasury.MANAGING"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1909,
                                    "name": "MANAGING",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 684,
                                    "src": "21177:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                      "typeString": "type(enum ApeTreasury.MANAGING)"
                                    }
                                  },
                                  "id": 1910,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "RESERVEMANAGER",
                                  "nodeType": "MemberAccess",
                                  "src": "21177:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_MANAGING_$684",
                                    "typeString": "enum ApeTreasury.MANAGING"
                                  }
                                },
                                "src": "21164:36:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "condition": {
                                  "commonType": {
                                    "typeIdentifier": "t_enum$_MANAGING_$684",
                                    "typeString": "enum ApeTreasury.MANAGING"
                                  },
                                  "id": 1961,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1958,
                                    "name": "_managing",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1753,
                                    "src": "21675:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_MANAGING_$684",
                                      "typeString": "enum ApeTreasury.MANAGING"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 1959,
                                      "name": "MANAGING",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 684,
                                      "src": "21688:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                        "typeString": "type(enum ApeTreasury.MANAGING)"
                                      }
                                    },
                                    "id": 1960,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "LIQUIDITYDEPOSITOR",
                                    "nodeType": "MemberAccess",
                                    "src": "21688:27:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_MANAGING_$684",
                                      "typeString": "enum ApeTreasury.MANAGING"
                                    }
                                  },
                                  "src": "21675:40:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "falseBody": {
                                  "condition": {
                                    "commonType": {
                                      "typeIdentifier": "t_enum$_MANAGING_$684",
                                      "typeString": "enum ApeTreasury.MANAGING"
                                    },
                                    "id": 2011,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 2008,
                                      "name": "_managing",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1753,
                                      "src": "22222:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_MANAGING_$684",
                                        "typeString": "enum ApeTreasury.MANAGING"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "expression": {
                                        "id": 2009,
                                        "name": "MANAGING",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 684,
                                        "src": "22235:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                          "typeString": "type(enum ApeTreasury.MANAGING)"
                                        }
                                      },
                                      "id": 2010,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "LIQUIDITYTOKEN",
                                      "nodeType": "MemberAccess",
                                      "src": "22235:23:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_MANAGING_$684",
                                        "typeString": "enum ApeTreasury.MANAGING"
                                      }
                                    },
                                    "src": "22222:36:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "falseBody": {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_enum$_MANAGING_$684",
                                        "typeString": "enum ApeTreasury.MANAGING"
                                      },
                                      "id": 2061,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 2058,
                                        "name": "_managing",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1753,
                                        "src": "22737:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_enum$_MANAGING_$684",
                                          "typeString": "enum ApeTreasury.MANAGING"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "expression": {
                                          "id": 2059,
                                          "name": "MANAGING",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 684,
                                          "src": "22750:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                            "typeString": "type(enum ApeTreasury.MANAGING)"
                                          }
                                        },
                                        "id": 2060,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "LIQUIDITYMANAGER",
                                        "nodeType": "MemberAccess",
                                        "src": "22750:25:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_enum$_MANAGING_$684",
                                          "typeString": "enum ApeTreasury.MANAGING"
                                        }
                                      },
                                      "src": "22737:38:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseBody": {
                                      "condition": {
                                        "commonType": {
                                          "typeIdentifier": "t_enum$_MANAGING_$684",
                                          "typeString": "enum ApeTreasury.MANAGING"
                                        },
                                        "id": 2105,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2102,
                                          "name": "_managing",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1753,
                                          "src": "23214:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_MANAGING_$684",
                                            "typeString": "enum ApeTreasury.MANAGING"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "==",
                                        "rightExpression": {
                                          "expression": {
                                            "id": 2103,
                                            "name": "MANAGING",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 684,
                                            "src": "23227:8:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                              "typeString": "type(enum ApeTreasury.MANAGING)"
                                            }
                                          },
                                          "id": 2104,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "memberName": "DEBTOR",
                                          "nodeType": "MemberAccess",
                                          "src": "23227:15:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_MANAGING_$684",
                                            "typeString": "enum ApeTreasury.MANAGING"
                                          }
                                        },
                                        "src": "23214:28:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "falseBody": {
                                        "condition": {
                                          "commonType": {
                                            "typeIdentifier": "t_enum$_MANAGING_$684",
                                            "typeString": "enum ApeTreasury.MANAGING"
                                          },
                                          "id": 2149,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 2146,
                                            "name": "_managing",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1753,
                                            "src": "23611:9:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_enum$_MANAGING_$684",
                                              "typeString": "enum ApeTreasury.MANAGING"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "==",
                                          "rightExpression": {
                                            "expression": {
                                              "id": 2147,
                                              "name": "MANAGING",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 684,
                                              "src": "23624:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                                "typeString": "type(enum ApeTreasury.MANAGING)"
                                              }
                                            },
                                            "id": 2148,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "memberName": "REWARDMANAGER",
                                            "nodeType": "MemberAccess",
                                            "src": "23624:22:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_enum$_MANAGING_$684",
                                              "typeString": "enum ApeTreasury.MANAGING"
                                            }
                                          },
                                          "src": "23611:35:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "falseBody": {
                                          "condition": {
                                            "commonType": {
                                              "typeIdentifier": "t_enum$_MANAGING_$684",
                                              "typeString": "enum ApeTreasury.MANAGING"
                                            },
                                            "id": 2193,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 2190,
                                              "name": "_managing",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1753,
                                              "src": "24064:9:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                                "typeString": "enum ApeTreasury.MANAGING"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "==",
                                            "rightExpression": {
                                              "expression": {
                                                "id": 2191,
                                                "name": "MANAGING",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 684,
                                                "src": "24077:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_enum$_MANAGING_$684_$",
                                                  "typeString": "type(enum ApeTreasury.MANAGING)"
                                                }
                                              },
                                              "id": 2192,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "memberName": "SOHM",
                                              "nodeType": "MemberAccess",
                                              "src": "24077:13:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                                "typeString": "enum ApeTreasury.MANAGING"
                                              }
                                            },
                                            "src": "24064:26:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "falseBody": {
                                            "expression": {
                                              "hexValue": "66616c7365",
                                              "id": 2207,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "bool",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "24206:5:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              },
                                              "value": "false"
                                            },
                                            "functionReturnParameters": 1763,
                                            "id": 2208,
                                            "nodeType": "Return",
                                            "src": "24199:12:0"
                                          },
                                          "id": 2209,
                                          "nodeType": "IfStatement",
                                          "src": "24059:152:0",
                                          "trueBody": {
                                            "id": 2206,
                                            "nodeType": "Block",
                                            "src": "24093:100:0",
                                            "statements": [
                                              {
                                                "expression": {
                                                  "id": 2196,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftHandSide": {
                                                    "id": 2194,
                                                    "name": "sOHMQueue",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 799,
                                                    "src": "24112:9:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "nodeType": "Assignment",
                                                  "operator": "=",
                                                  "rightHandSide": {
                                                    "hexValue": "30",
                                                    "id": 2195,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "number",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "24124:1:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_rational_0_by_1",
                                                      "typeString": "int_const 0"
                                                    },
                                                    "value": "0"
                                                  },
                                                  "src": "24112:13:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "id": 2197,
                                                "nodeType": "ExpressionStatement",
                                                "src": "24112:13:0"
                                              },
                                              {
                                                "expression": {
                                                  "id": 2200,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftHandSide": {
                                                    "id": 2198,
                                                    "name": "sOHM",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 797,
                                                    "src": "24139:4:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  },
                                                  "nodeType": "Assignment",
                                                  "operator": "=",
                                                  "rightHandSide": {
                                                    "id": 2199,
                                                    "name": "_address",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1755,
                                                    "src": "24146:8:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  },
                                                  "src": "24139:15:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                },
                                                "id": 2201,
                                                "nodeType": "ExpressionStatement",
                                                "src": "24139:15:0"
                                              },
                                              {
                                                "expression": {
                                                  "id": 2204,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftHandSide": {
                                                    "id": 2202,
                                                    "name": "result",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1774,
                                                    "src": "24168:6:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_bool",
                                                      "typeString": "bool"
                                                    }
                                                  },
                                                  "nodeType": "Assignment",
                                                  "operator": "=",
                                                  "rightHandSide": {
                                                    "hexValue": "74727565",
                                                    "id": 2203,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "bool",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "24177:4:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_bool",
                                                      "typeString": "bool"
                                                    },
                                                    "value": "true"
                                                  },
                                                  "src": "24168:13:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                  }
                                                },
                                                "id": 2205,
                                                "nodeType": "ExpressionStatement",
                                                "src": "24168:13:0"
                                              }
                                            ]
                                          }
                                        },
                                        "id": 2210,
                                        "nodeType": "IfStatement",
                                        "src": "23606:605:0",
                                        "trueBody": {
                                          "id": 2189,
                                          "nodeType": "Block",
                                          "src": "23649:404:0",
                                          "statements": [
                                            {
                                              "condition": {
                                                "arguments": [
                                                  {
                                                    "id": 2151,
                                                    "name": "rewardManagerQueue",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 795,
                                                    "src": "23687:18:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                      "typeString": "mapping(address => uint256)"
                                                    }
                                                  },
                                                  {
                                                    "id": 2152,
                                                    "name": "isRewardManager",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 791,
                                                    "src": "23707:15:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                      "typeString": "mapping(address => bool)"
                                                    }
                                                  },
                                                  {
                                                    "id": 2153,
                                                    "name": "_address",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1755,
                                                    "src": "23724:8:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                      "typeString": "mapping(address => uint256)"
                                                    },
                                                    {
                                                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                      "typeString": "mapping(address => bool)"
                                                    },
                                                    {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  ],
                                                  "id": 2150,
                                                  "name": "requirements",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 2274,
                                                  "src": "23673:12:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_function_internal_view$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_bool_$_$_t_address_$returns$_t_bool_$",
                                                    "typeString": "function (mapping(address => uint256),mapping(address => bool),address) view returns (bool)"
                                                  }
                                                },
                                                "id": 2154,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "functionCall",
                                                "lValueRequested": false,
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "23673:61:0",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "id": 2175,
                                              "nodeType": "IfStatement",
                                              "src": "23668:273:0",
                                              "trueBody": {
                                                "id": 2174,
                                                "nodeType": "Block",
                                                "src": "23737:204:0",
                                                "statements": [
                                                  {
                                                    "expression": {
                                                      "id": 2159,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "leftHandSide": {
                                                        "baseExpression": {
                                                          "id": 2155,
                                                          "name": "rewardManagerQueue",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 795,
                                                          "src": "23755:18:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                            "typeString": "mapping(address => uint256)"
                                                          }
                                                        },
                                                        "id": 2157,
                                                        "indexExpression": {
                                                          "id": 2156,
                                                          "name": "_address",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 1755,
                                                          "src": "23775:8:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_address",
                                                            "typeString": "address"
                                                          }
                                                        },
                                                        "isConstant": false,
                                                        "isLValue": true,
                                                        "isPure": false,
                                                        "lValueRequested": true,
                                                        "nodeType": "IndexAccess",
                                                        "src": "23755:30:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "nodeType": "Assignment",
                                                      "operator": "=",
                                                      "rightHandSide": {
                                                        "hexValue": "30",
                                                        "id": 2158,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": true,
                                                        "kind": "number",
                                                        "lValueRequested": false,
                                                        "nodeType": "Literal",
                                                        "src": "23788:1:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_rational_0_by_1",
                                                          "typeString": "int_const 0"
                                                        },
                                                        "value": "0"
                                                      },
                                                      "src": "23755:34:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "id": 2160,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "23755:34:0"
                                                  },
                                                  {
                                                    "condition": {
                                                      "id": 2165,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "nodeType": "UnaryOperation",
                                                      "operator": "!",
                                                      "prefix": true,
                                                      "src": "23811:41:0",
                                                      "subExpression": {
                                                        "arguments": [
                                                          {
                                                            "id": 2162,
                                                            "name": "rewardManagers",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 787,
                                                            "src": "23826:14:0",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                              "typeString": "address[] storage ref"
                                                            }
                                                          },
                                                          {
                                                            "id": 2163,
                                                            "name": "_address",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 1755,
                                                            "src": "23842:8:0",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_address",
                                                              "typeString": "address"
                                                            }
                                                          }
                                                        ],
                                                        "expression": {
                                                          "argumentTypes": [
                                                            {
                                                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                              "typeString": "address[] storage ref"
                                                            },
                                                            {
                                                              "typeIdentifier": "t_address",
                                                              "typeString": "address"
                                                            }
                                                          ],
                                                          "id": 2161,
                                                          "name": "listContains",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 2310,
                                                          "src": "23812:12:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$_t_bool_$",
                                                            "typeString": "function (address[] storage pointer,address) view returns (bool)"
                                                          }
                                                        },
                                                        "id": 2164,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": false,
                                                        "kind": "functionCall",
                                                        "lValueRequested": false,
                                                        "names": [],
                                                        "nodeType": "FunctionCall",
                                                        "src": "23812:40:0",
                                                        "tryCall": false,
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_bool",
                                                          "typeString": "bool"
                                                        }
                                                      },
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_bool",
                                                        "typeString": "bool"
                                                      }
                                                    },
                                                    "id": 2173,
                                                    "nodeType": "IfStatement",
                                                    "src": "23807:120:0",
                                                    "trueBody": {
                                                      "id": 2172,
                                                      "nodeType": "Block",
                                                      "src": "23855:72:0",
                                                      "statements": [
                                                        {
                                                          "expression": {
                                                            "arguments": [
                                                              {
                                                                "id": 2169,
                                                                "name": "_address",
                                                                "nodeType": "Identifier",
                                                                "overloadedDeclarations": [],
                                                                "referencedDeclaration": 1755,
                                                                "src": "23898:8:0",
                                                                "typeDescriptions": {
                                                                  "typeIdentifier": "t_address",
                                                                  "typeString": "address"
                                                                }
                                                              }
                                                            ],
                                                            "expression": {
                                                              "argumentTypes": [
                                                                {
                                                                  "typeIdentifier": "t_address",
                                                                  "typeString": "address"
                                                                }
                                                              ],
                                                              "expression": {
                                                                "id": 2166,
                                                                "name": "rewardManagers",
                                                                "nodeType": "Identifier",
                                                                "overloadedDeclarations": [],
                                                                "referencedDeclaration": 787,
                                                                "src": "23877:14:0",
                                                                "typeDescriptions": {
                                                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                                  "typeString": "address[] storage ref"
                                                                }
                                                              },
                                                              "id": 2168,
                                                              "isConstant": false,
                                                              "isLValue": false,
                                                              "isPure": false,
                                                              "lValueRequested": false,
                                                              "memberName": "push",
                                                              "nodeType": "MemberAccess",
                                                              "src": "23877:19:0",
                                                              "typeDescriptions": {
                                                                "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                                "typeString": "function (address)"
                                                              }
                                                            },
                                                            "id": 2170,
                                                            "isConstant": false,
                                                            "isLValue": false,
                                                            "isPure": false,
                                                            "kind": "functionCall",
                                                            "lValueRequested": false,
                                                            "names": [],
                                                            "nodeType": "FunctionCall",
                                                            "src": "23877:31:0",
                                                            "tryCall": false,
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_tuple$__$",
                                                              "typeString": "tuple()"
                                                            }
                                                          },
                                                          "id": 2171,
                                                          "nodeType": "ExpressionStatement",
                                                          "src": "23877:31:0"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "expression": {
                                                "id": 2181,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftHandSide": {
                                                  "id": 2176,
                                                  "name": "result",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1774,
                                                  "src": "23954:6:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                  }
                                                },
                                                "nodeType": "Assignment",
                                                "operator": "=",
                                                "rightHandSide": {
                                                  "id": 2180,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "UnaryOperation",
                                                  "operator": "!",
                                                  "prefix": true,
                                                  "src": "23963:28:0",
                                                  "subExpression": {
                                                    "baseExpression": {
                                                      "id": 2177,
                                                      "name": "isRewardManager",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 791,
                                                      "src": "23964:15:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                        "typeString": "mapping(address => bool)"
                                                      }
                                                    },
                                                    "id": 2179,
                                                    "indexExpression": {
                                                      "id": 2178,
                                                      "name": "_address",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1755,
                                                      "src": "23981:8:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      }
                                                    },
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "nodeType": "IndexAccess",
                                                    "src": "23964:27:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_bool",
                                                      "typeString": "bool"
                                                    }
                                                  },
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                  }
                                                },
                                                "src": "23954:37:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "id": 2182,
                                              "nodeType": "ExpressionStatement",
                                              "src": "23954:37:0"
                                            },
                                            {
                                              "expression": {
                                                "id": 2187,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftHandSide": {
                                                  "baseExpression": {
                                                    "id": 2183,
                                                    "name": "isRewardManager",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 791,
                                                    "src": "24005:15:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                      "typeString": "mapping(address => bool)"
                                                    }
                                                  },
                                                  "id": 2185,
                                                  "indexExpression": {
                                                    "id": 2184,
                                                    "name": "_address",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1755,
                                                    "src": "24022:8:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": true,
                                                  "nodeType": "IndexAccess",
                                                  "src": "24005:27:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                  }
                                                },
                                                "nodeType": "Assignment",
                                                "operator": "=",
                                                "rightHandSide": {
                                                  "id": 2186,
                                                  "name": "result",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1774,
                                                  "src": "24035:6:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                  }
                                                },
                                                "src": "24005:36:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "id": 2188,
                                              "nodeType": "ExpressionStatement",
                                              "src": "24005:36:0"
                                            }
                                          ]
                                        }
                                      },
                                      "id": 2211,
                                      "nodeType": "IfStatement",
                                      "src": "23209:1002:0",
                                      "trueBody": {
                                        "id": 2145,
                                        "nodeType": "Block",
                                        "src": "23245:355:0",
                                        "statements": [
                                          {
                                            "condition": {
                                              "arguments": [
                                                {
                                                  "id": 2107,
                                                  "name": "debtorQueue",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 780,
                                                  "src": "23283:11:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                    "typeString": "mapping(address => uint256)"
                                                  }
                                                },
                                                {
                                                  "id": 2108,
                                                  "name": "isDebtor",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 776,
                                                  "src": "23296:8:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                    "typeString": "mapping(address => bool)"
                                                  }
                                                },
                                                {
                                                  "id": 2109,
                                                  "name": "_address",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1755,
                                                  "src": "23306:8:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                    "typeString": "mapping(address => uint256)"
                                                  },
                                                  {
                                                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                    "typeString": "mapping(address => bool)"
                                                  },
                                                  {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                ],
                                                "id": 2106,
                                                "name": "requirements",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2274,
                                                "src": "23269:12:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_function_internal_view$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_bool_$_$_t_address_$returns$_t_bool_$",
                                                  "typeString": "function (mapping(address => uint256),mapping(address => bool),address) view returns (bool)"
                                                }
                                              },
                                              "id": 2110,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "functionCall",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "23269:47:0",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "id": 2131,
                                            "nodeType": "IfStatement",
                                            "src": "23264:238:0",
                                            "trueBody": {
                                              "id": 2130,
                                              "nodeType": "Block",
                                              "src": "23319:183:0",
                                              "statements": [
                                                {
                                                  "expression": {
                                                    "id": 2115,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "leftHandSide": {
                                                      "baseExpression": {
                                                        "id": 2111,
                                                        "name": "debtorQueue",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 780,
                                                        "src": "23337:11:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                          "typeString": "mapping(address => uint256)"
                                                        }
                                                      },
                                                      "id": 2113,
                                                      "indexExpression": {
                                                        "id": 2112,
                                                        "name": "_address",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 1755,
                                                        "src": "23350:8:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_address",
                                                          "typeString": "address"
                                                        }
                                                      },
                                                      "isConstant": false,
                                                      "isLValue": true,
                                                      "isPure": false,
                                                      "lValueRequested": true,
                                                      "nodeType": "IndexAccess",
                                                      "src": "23337:23:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "nodeType": "Assignment",
                                                    "operator": "=",
                                                    "rightHandSide": {
                                                      "hexValue": "30",
                                                      "id": 2114,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "number",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "23363:1:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_0_by_1",
                                                        "typeString": "int_const 0"
                                                      },
                                                      "value": "0"
                                                    },
                                                    "src": "23337:27:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "id": 2116,
                                                  "nodeType": "ExpressionStatement",
                                                  "src": "23337:27:0"
                                                },
                                                {
                                                  "condition": {
                                                    "id": 2121,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "nodeType": "UnaryOperation",
                                                    "operator": "!",
                                                    "prefix": true,
                                                    "src": "23386:34:0",
                                                    "subExpression": {
                                                      "arguments": [
                                                        {
                                                          "id": 2118,
                                                          "name": "debtors",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 772,
                                                          "src": "23401:7:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                            "typeString": "address[] storage ref"
                                                          }
                                                        },
                                                        {
                                                          "id": 2119,
                                                          "name": "_address",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 1755,
                                                          "src": "23410:8:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_address",
                                                            "typeString": "address"
                                                          }
                                                        }
                                                      ],
                                                      "expression": {
                                                        "argumentTypes": [
                                                          {
                                                            "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                            "typeString": "address[] storage ref"
                                                          },
                                                          {
                                                            "typeIdentifier": "t_address",
                                                            "typeString": "address"
                                                          }
                                                        ],
                                                        "id": 2117,
                                                        "name": "listContains",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 2310,
                                                        "src": "23387:12:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$_t_bool_$",
                                                          "typeString": "function (address[] storage pointer,address) view returns (bool)"
                                                        }
                                                      },
                                                      "id": 2120,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "kind": "functionCall",
                                                      "lValueRequested": false,
                                                      "names": [],
                                                      "nodeType": "FunctionCall",
                                                      "src": "23387:33:0",
                                                      "tryCall": false,
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_bool",
                                                        "typeString": "bool"
                                                      }
                                                    },
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_bool",
                                                      "typeString": "bool"
                                                    }
                                                  },
                                                  "id": 2129,
                                                  "nodeType": "IfStatement",
                                                  "src": "23382:106:0",
                                                  "trueBody": {
                                                    "id": 2128,
                                                    "nodeType": "Block",
                                                    "src": "23423:65:0",
                                                    "statements": [
                                                      {
                                                        "expression": {
                                                          "arguments": [
                                                            {
                                                              "id": 2125,
                                                              "name": "_address",
                                                              "nodeType": "Identifier",
                                                              "overloadedDeclarations": [],
                                                              "referencedDeclaration": 1755,
                                                              "src": "23459:8:0",
                                                              "typeDescriptions": {
                                                                "typeIdentifier": "t_address",
                                                                "typeString": "address"
                                                              }
                                                            }
                                                          ],
                                                          "expression": {
                                                            "argumentTypes": [
                                                              {
                                                                "typeIdentifier": "t_address",
                                                                "typeString": "address"
                                                              }
                                                            ],
                                                            "expression": {
                                                              "id": 2122,
                                                              "name": "debtors",
                                                              "nodeType": "Identifier",
                                                              "overloadedDeclarations": [],
                                                              "referencedDeclaration": 772,
                                                              "src": "23445:7:0",
                                                              "typeDescriptions": {
                                                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                                "typeString": "address[] storage ref"
                                                              }
                                                            },
                                                            "id": 2124,
                                                            "isConstant": false,
                                                            "isLValue": false,
                                                            "isPure": false,
                                                            "lValueRequested": false,
                                                            "memberName": "push",
                                                            "nodeType": "MemberAccess",
                                                            "src": "23445:12:0",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                              "typeString": "function (address)"
                                                            }
                                                          },
                                                          "id": 2126,
                                                          "isConstant": false,
                                                          "isLValue": false,
                                                          "isPure": false,
                                                          "kind": "functionCall",
                                                          "lValueRequested": false,
                                                          "names": [],
                                                          "nodeType": "FunctionCall",
                                                          "src": "23445:24:0",
                                                          "tryCall": false,
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_tuple$__$",
                                                            "typeString": "tuple()"
                                                          }
                                                        },
                                                        "id": 2127,
                                                        "nodeType": "ExpressionStatement",
                                                        "src": "23445:24:0"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "expression": {
                                              "id": 2137,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftHandSide": {
                                                "id": 2132,
                                                "name": "result",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1774,
                                                "src": "23515:6:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "nodeType": "Assignment",
                                              "operator": "=",
                                              "rightHandSide": {
                                                "id": 2136,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "UnaryOperation",
                                                "operator": "!",
                                                "prefix": true,
                                                "src": "23524:21:0",
                                                "subExpression": {
                                                  "baseExpression": {
                                                    "id": 2133,
                                                    "name": "isDebtor",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 776,
                                                    "src": "23525:8:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                      "typeString": "mapping(address => bool)"
                                                    }
                                                  },
                                                  "id": 2135,
                                                  "indexExpression": {
                                                    "id": 2134,
                                                    "name": "_address",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1755,
                                                    "src": "23535:8:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "IndexAccess",
                                                  "src": "23525:20:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                  }
                                                },
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "src": "23515:30:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "id": 2138,
                                            "nodeType": "ExpressionStatement",
                                            "src": "23515:30:0"
                                          },
                                          {
                                            "expression": {
                                              "id": 2143,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftHandSide": {
                                                "baseExpression": {
                                                  "id": 2139,
                                                  "name": "isDebtor",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 776,
                                                  "src": "23559:8:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                    "typeString": "mapping(address => bool)"
                                                  }
                                                },
                                                "id": 2141,
                                                "indexExpression": {
                                                  "id": 2140,
                                                  "name": "_address",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1755,
                                                  "src": "23569:8:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": true,
                                                "nodeType": "IndexAccess",
                                                "src": "23559:20:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "nodeType": "Assignment",
                                              "operator": "=",
                                              "rightHandSide": {
                                                "id": 2142,
                                                "name": "result",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1774,
                                                "src": "23582:6:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "src": "23559:29:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "id": 2144,
                                            "nodeType": "ExpressionStatement",
                                            "src": "23559:29:0"
                                          }
                                        ]
                                      }
                                    },
                                    "id": 2212,
                                    "nodeType": "IfStatement",
                                    "src": "22732:1479:0",
                                    "trueBody": {
                                      "id": 2101,
                                      "nodeType": "Block",
                                      "src": "22778:425:0",
                                      "statements": [
                                        {
                                          "condition": {
                                            "arguments": [
                                              {
                                                "id": 2063,
                                                "name": "LiquidityManagerQueue",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 769,
                                                "src": "22816:21:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                  "typeString": "mapping(address => uint256)"
                                                }
                                              },
                                              {
                                                "id": 2064,
                                                "name": "isLiquidityManager",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 765,
                                                "src": "22839:18:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                  "typeString": "mapping(address => bool)"
                                                }
                                              },
                                              {
                                                "id": 2065,
                                                "name": "_address",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1755,
                                                "src": "22859:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                  "typeString": "mapping(address => uint256)"
                                                },
                                                {
                                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                  "typeString": "mapping(address => bool)"
                                                },
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              ],
                                              "id": 2062,
                                              "name": "requirements",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2274,
                                              "src": "22802:12:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_view$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_bool_$_$_t_address_$returns$_t_bool_$",
                                                "typeString": "function (mapping(address => uint256),mapping(address => bool),address) view returns (bool)"
                                              }
                                            },
                                            "id": 2066,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "22802:67:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "id": 2087,
                                          "nodeType": "IfStatement",
                                          "src": "22797:288:0",
                                          "trueBody": {
                                            "id": 2086,
                                            "nodeType": "Block",
                                            "src": "22872:213:0",
                                            "statements": [
                                              {
                                                "expression": {
                                                  "id": 2071,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftHandSide": {
                                                    "baseExpression": {
                                                      "id": 2067,
                                                      "name": "LiquidityManagerQueue",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 769,
                                                      "src": "22890:21:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                        "typeString": "mapping(address => uint256)"
                                                      }
                                                    },
                                                    "id": 2069,
                                                    "indexExpression": {
                                                      "id": 2068,
                                                      "name": "_address",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1755,
                                                      "src": "22913:8:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      }
                                                    },
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": true,
                                                    "nodeType": "IndexAccess",
                                                    "src": "22890:33:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "nodeType": "Assignment",
                                                  "operator": "=",
                                                  "rightHandSide": {
                                                    "hexValue": "30",
                                                    "id": 2070,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "number",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "22926:1:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_rational_0_by_1",
                                                      "typeString": "int_const 0"
                                                    },
                                                    "value": "0"
                                                  },
                                                  "src": "22890:37:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "id": 2072,
                                                "nodeType": "ExpressionStatement",
                                                "src": "22890:37:0"
                                              },
                                              {
                                                "condition": {
                                                  "id": 2077,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "UnaryOperation",
                                                  "operator": "!",
                                                  "prefix": true,
                                                  "src": "22949:44:0",
                                                  "subExpression": {
                                                    "arguments": [
                                                      {
                                                        "id": 2074,
                                                        "name": "liquidityManagers",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 761,
                                                        "src": "22964:17:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                          "typeString": "address[] storage ref"
                                                        }
                                                      },
                                                      {
                                                        "id": 2075,
                                                        "name": "_address",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 1755,
                                                        "src": "22983:8:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_address",
                                                          "typeString": "address"
                                                        }
                                                      }
                                                    ],
                                                    "expression": {
                                                      "argumentTypes": [
                                                        {
                                                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                          "typeString": "address[] storage ref"
                                                        },
                                                        {
                                                          "typeIdentifier": "t_address",
                                                          "typeString": "address"
                                                        }
                                                      ],
                                                      "id": 2073,
                                                      "name": "listContains",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 2310,
                                                      "src": "22950:12:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$_t_bool_$",
                                                        "typeString": "function (address[] storage pointer,address) view returns (bool)"
                                                      }
                                                    },
                                                    "id": 2076,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "kind": "functionCall",
                                                    "lValueRequested": false,
                                                    "names": [],
                                                    "nodeType": "FunctionCall",
                                                    "src": "22950:43:0",
                                                    "tryCall": false,
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_bool",
                                                      "typeString": "bool"
                                                    }
                                                  },
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                  }
                                                },
                                                "id": 2085,
                                                "nodeType": "IfStatement",
                                                "src": "22945:126:0",
                                                "trueBody": {
                                                  "id": 2084,
                                                  "nodeType": "Block",
                                                  "src": "22996:75:0",
                                                  "statements": [
                                                    {
                                                      "expression": {
                                                        "arguments": [
                                                          {
                                                            "id": 2081,
                                                            "name": "_address",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 1755,
                                                            "src": "23042:8:0",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_address",
                                                              "typeString": "address"
                                                            }
                                                          }
                                                        ],
                                                        "expression": {
                                                          "argumentTypes": [
                                                            {
                                                              "typeIdentifier": "t_address",
                                                              "typeString": "address"
                                                            }
                                                          ],
                                                          "expression": {
                                                            "id": 2078,
                                                            "name": "liquidityManagers",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 761,
                                                            "src": "23018:17:0",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                              "typeString": "address[] storage ref"
                                                            }
                                                          },
                                                          "id": 2080,
                                                          "isConstant": false,
                                                          "isLValue": false,
                                                          "isPure": false,
                                                          "lValueRequested": false,
                                                          "memberName": "push",
                                                          "nodeType": "MemberAccess",
                                                          "src": "23018:22:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                            "typeString": "function (address)"
                                                          }
                                                        },
                                                        "id": 2082,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": false,
                                                        "kind": "functionCall",
                                                        "lValueRequested": false,
                                                        "names": [],
                                                        "nodeType": "FunctionCall",
                                                        "src": "23018:34:0",
                                                        "tryCall": false,
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_tuple$__$",
                                                          "typeString": "tuple()"
                                                        }
                                                      },
                                                      "id": 2083,
                                                      "nodeType": "ExpressionStatement",
                                                      "src": "23018:34:0"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "expression": {
                                            "id": 2093,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "id": 2088,
                                              "name": "result",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1774,
                                              "src": "23098:6:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "id": 2092,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "UnaryOperation",
                                              "operator": "!",
                                              "prefix": true,
                                              "src": "23107:31:0",
                                              "subExpression": {
                                                "baseExpression": {
                                                  "id": 2089,
                                                  "name": "isLiquidityManager",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 765,
                                                  "src": "23108:18:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                    "typeString": "mapping(address => bool)"
                                                  }
                                                },
                                                "id": 2091,
                                                "indexExpression": {
                                                  "id": 2090,
                                                  "name": "_address",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1755,
                                                  "src": "23128:8:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "23108:30:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "src": "23098:40:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "id": 2094,
                                          "nodeType": "ExpressionStatement",
                                          "src": "23098:40:0"
                                        },
                                        {
                                          "expression": {
                                            "id": 2099,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "baseExpression": {
                                                "id": 2095,
                                                "name": "isLiquidityManager",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 765,
                                                "src": "23152:18:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                  "typeString": "mapping(address => bool)"
                                                }
                                              },
                                              "id": 2097,
                                              "indexExpression": {
                                                "id": 2096,
                                                "name": "_address",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1755,
                                                "src": "23172:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": true,
                                              "nodeType": "IndexAccess",
                                              "src": "23152:30:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "id": 2098,
                                              "name": "result",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1774,
                                              "src": "23185:6:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "src": "23152:39:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "id": 2100,
                                          "nodeType": "ExpressionStatement",
                                          "src": "23152:39:0"
                                        }
                                      ]
                                    }
                                  },
                                  "id": 2213,
                                  "nodeType": "IfStatement",
                                  "src": "22217:1994:0",
                                  "trueBody": {
                                    "id": 2057,
                                    "nodeType": "Block",
                                    "src": "22261:465:0",
                                    "statements": [
                                      {
                                        "condition": {
                                          "arguments": [
                                            {
                                              "id": 2013,
                                              "name": "LiquidityTokenQueue",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 732,
                                              "src": "22299:19:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                "typeString": "mapping(address => uint256)"
                                              }
                                            },
                                            {
                                              "id": 2014,
                                              "name": "isLiquidityToken",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 728,
                                              "src": "22320:16:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                "typeString": "mapping(address => bool)"
                                              }
                                            },
                                            {
                                              "id": 2015,
                                              "name": "_address",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1755,
                                              "src": "22338:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                "typeString": "mapping(address => uint256)"
                                              },
                                              {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                "typeString": "mapping(address => bool)"
                                              },
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            ],
                                            "id": 2012,
                                            "name": "requirements",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2274,
                                            "src": "22285:12:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_internal_view$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_bool_$_$_t_address_$returns$_t_bool_$",
                                              "typeString": "function (mapping(address => uint256),mapping(address => bool),address) view returns (bool)"
                                            }
                                          },
                                          "id": 2016,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "22285:63:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "id": 2037,
                                        "nodeType": "IfStatement",
                                        "src": "22280:278:0",
                                        "trueBody": {
                                          "id": 2036,
                                          "nodeType": "Block",
                                          "src": "22351:207:0",
                                          "statements": [
                                            {
                                              "expression": {
                                                "id": 2021,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftHandSide": {
                                                  "baseExpression": {
                                                    "id": 2017,
                                                    "name": "LiquidityTokenQueue",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 732,
                                                    "src": "22369:19:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                      "typeString": "mapping(address => uint256)"
                                                    }
                                                  },
                                                  "id": 2019,
                                                  "indexExpression": {
                                                    "id": 2018,
                                                    "name": "_address",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1755,
                                                    "src": "22390:8:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": true,
                                                  "nodeType": "IndexAccess",
                                                  "src": "22369:31:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "Assignment",
                                                "operator": "=",
                                                "rightHandSide": {
                                                  "hexValue": "30",
                                                  "id": 2020,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "22403:1:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_0_by_1",
                                                    "typeString": "int_const 0"
                                                  },
                                                  "value": "0"
                                                },
                                                "src": "22369:35:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "id": 2022,
                                              "nodeType": "ExpressionStatement",
                                              "src": "22369:35:0"
                                            },
                                            {
                                              "condition": {
                                                "id": 2027,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "UnaryOperation",
                                                "operator": "!",
                                                "prefix": true,
                                                "src": "22426:42:0",
                                                "subExpression": {
                                                  "arguments": [
                                                    {
                                                      "id": 2024,
                                                      "name": "liquidityTokens",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 724,
                                                      "src": "22441:15:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                        "typeString": "address[] storage ref"
                                                      }
                                                    },
                                                    {
                                                      "id": 2025,
                                                      "name": "_address",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1755,
                                                      "src": "22458:8:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                        "typeString": "address[] storage ref"
                                                      },
                                                      {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      }
                                                    ],
                                                    "id": 2023,
                                                    "name": "listContains",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 2310,
                                                    "src": "22427:12:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$_t_bool_$",
                                                      "typeString": "function (address[] storage pointer,address) view returns (bool)"
                                                    }
                                                  },
                                                  "id": 2026,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "22427:41:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                  }
                                                },
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "id": 2035,
                                              "nodeType": "IfStatement",
                                              "src": "22422:122:0",
                                              "trueBody": {
                                                "id": 2034,
                                                "nodeType": "Block",
                                                "src": "22471:73:0",
                                                "statements": [
                                                  {
                                                    "expression": {
                                                      "arguments": [
                                                        {
                                                          "id": 2031,
                                                          "name": "_address",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 1755,
                                                          "src": "22515:8:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_address",
                                                            "typeString": "address"
                                                          }
                                                        }
                                                      ],
                                                      "expression": {
                                                        "argumentTypes": [
                                                          {
                                                            "typeIdentifier": "t_address",
                                                            "typeString": "address"
                                                          }
                                                        ],
                                                        "expression": {
                                                          "id": 2028,
                                                          "name": "liquidityTokens",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 724,
                                                          "src": "22493:15:0",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                            "typeString": "address[] storage ref"
                                                          }
                                                        },
                                                        "id": 2030,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": false,
                                                        "lValueRequested": false,
                                                        "memberName": "push",
                                                        "nodeType": "MemberAccess",
                                                        "src": "22493:20:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                          "typeString": "function (address)"
                                                        }
                                                      },
                                                      "id": 2032,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "kind": "functionCall",
                                                      "lValueRequested": false,
                                                      "names": [],
                                                      "nodeType": "FunctionCall",
                                                      "src": "22493:32:0",
                                                      "tryCall": false,
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_tuple$__$",
                                                        "typeString": "tuple()"
                                                      }
                                                    },
                                                    "id": 2033,
                                                    "nodeType": "ExpressionStatement",
                                                    "src": "22493:32:0"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "expression": {
                                          "id": 2043,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftHandSide": {
                                            "id": 2038,
                                            "name": "result",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1774,
                                            "src": "22571:6:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "nodeType": "Assignment",
                                          "operator": "=",
                                          "rightHandSide": {
                                            "id": 2042,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "UnaryOperation",
                                            "operator": "!",
                                            "prefix": true,
                                            "src": "22580:29:0",
                                            "subExpression": {
                                              "baseExpression": {
                                                "id": 2039,
                                                "name": "isLiquidityToken",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 728,
                                                "src": "22581:16:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                  "typeString": "mapping(address => bool)"
                                                }
                                              },
                                              "id": 2041,
                                              "indexExpression": {
                                                "id": 2040,
                                                "name": "_address",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1755,
                                                "src": "22599:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "22581:28:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "src": "22571:38:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "id": 2044,
                                        "nodeType": "ExpressionStatement",
                                        "src": "22571:38:0"
                                      },
                                      {
                                        "expression": {
                                          "id": 2049,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftHandSide": {
                                            "baseExpression": {
                                              "id": 2045,
                                              "name": "isLiquidityToken",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 728,
                                              "src": "22623:16:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                "typeString": "mapping(address => bool)"
                                              }
                                            },
                                            "id": 2047,
                                            "indexExpression": {
                                              "id": 2046,
                                              "name": "_address",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1755,
                                              "src": "22641:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": true,
                                            "nodeType": "IndexAccess",
                                            "src": "22623:28:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "nodeType": "Assignment",
                                          "operator": "=",
                                          "rightHandSide": {
                                            "id": 2048,
                                            "name": "result",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1774,
                                            "src": "22654:6:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "src": "22623:37:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "id": 2050,
                                        "nodeType": "ExpressionStatement",
                                        "src": "22623:37:0"
                                      },
                                      {
                                        "expression": {
                                          "id": 2055,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftHandSide": {
                                            "baseExpression": {
                                              "id": 2051,
                                              "name": "bondCalculator",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 747,
                                              "src": "22674:14:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                                "typeString": "mapping(address => address)"
                                              }
                                            },
                                            "id": 2053,
                                            "indexExpression": {
                                              "id": 2052,
                                              "name": "_address",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1755,
                                              "src": "22690:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": true,
                                            "nodeType": "IndexAccess",
                                            "src": "22674:26:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "nodeType": "Assignment",
                                          "operator": "=",
                                          "rightHandSide": {
                                            "id": 2054,
                                            "name": "_calculator",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1757,
                                            "src": "22703:11:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "src": "22674:40:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        "id": 2056,
                                        "nodeType": "ExpressionStatement",
                                        "src": "22674:40:0"
                                      }
                                    ]
                                  }
                                },
                                "id": 2214,
                                "nodeType": "IfStatement",
                                "src": "21670:2541:0",
                                "trueBody": {
                                  "id": 2007,
                                  "nodeType": "Block",
                                  "src": "21718:493:0",
                                  "statements": [
                                    {
                                      "condition": {
                                        "arguments": [
                                          {
                                            "id": 1963,
                                            "name": "LiquidityDepositorQueue",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 743,
                                            "src": "21756:23:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                              "typeString": "mapping(address => uint256)"
                                            }
                                          },
                                          {
                                            "id": 1964,
                                            "name": "isLiquidityDepositor",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 739,
                                            "src": "21781:20:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                              "typeString": "mapping(address => bool)"
                                            }
                                          },
                                          {
                                            "id": 1965,
                                            "name": "_address",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1755,
                                            "src": "21803:8:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                              "typeString": "mapping(address => uint256)"
                                            },
                                            {
                                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                              "typeString": "mapping(address => bool)"
                                            },
                                            {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          ],
                                          "id": 1962,
                                          "name": "requirements",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2274,
                                          "src": "21742:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_view$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_bool_$_$_t_address_$returns$_t_bool_$",
                                            "typeString": "function (mapping(address => uint256),mapping(address => bool),address) view returns (bool)"
                                          }
                                        },
                                        "id": 1966,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "21742:71:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "id": 1993,
                                      "nodeType": "IfStatement",
                                      "src": "21737:352:0",
                                      "trueBody": {
                                        "id": 1992,
                                        "nodeType": "Block",
                                        "src": "21816:273:0",
                                        "statements": [
                                          {
                                            "expression": {
                                              "arguments": [
                                                {
                                                  "id": 1970,
                                                  "name": "_address",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1755,
                                                  "src": "21860:8:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                ],
                                                "expression": {
                                                  "id": 1967,
                                                  "name": "liquidityDepositors",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 735,
                                                  "src": "21834:19:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                    "typeString": "address[] storage ref"
                                                  }
                                                },
                                                "id": 1969,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "push",
                                                "nodeType": "MemberAccess",
                                                "src": "21834:24:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                  "typeString": "function (address)"
                                                }
                                              },
                                              "id": 1971,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "functionCall",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "21834:36:0",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_tuple$__$",
                                                "typeString": "tuple()"
                                              }
                                            },
                                            "id": 1972,
                                            "nodeType": "ExpressionStatement",
                                            "src": "21834:36:0"
                                          },
                                          {
                                            "expression": {
                                              "id": 1977,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftHandSide": {
                                                "baseExpression": {
                                                  "id": 1973,
                                                  "name": "LiquidityDepositorQueue",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 743,
                                                  "src": "21888:23:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                    "typeString": "mapping(address => uint256)"
                                                  }
                                                },
                                                "id": 1975,
                                                "indexExpression": {
                                                  "id": 1974,
                                                  "name": "_address",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1755,
                                                  "src": "21913:8:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": true,
                                                "nodeType": "IndexAccess",
                                                "src": "21888:35:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "nodeType": "Assignment",
                                              "operator": "=",
                                              "rightHandSide": {
                                                "hexValue": "30",
                                                "id": 1976,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "number",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "21926:1:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_rational_0_by_1",
                                                  "typeString": "int_const 0"
                                                },
                                                "value": "0"
                                              },
                                              "src": "21888:39:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "id": 1978,
                                            "nodeType": "ExpressionStatement",
                                            "src": "21888:39:0"
                                          },
                                          {
                                            "condition": {
                                              "id": 1983,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "UnaryOperation",
                                              "operator": "!",
                                              "prefix": true,
                                              "src": "21949:46:0",
                                              "subExpression": {
                                                "arguments": [
                                                  {
                                                    "id": 1980,
                                                    "name": "liquidityDepositors",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 735,
                                                    "src": "21964:19:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                      "typeString": "address[] storage ref"
                                                    }
                                                  },
                                                  {
                                                    "id": 1981,
                                                    "name": "_address",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1755,
                                                    "src": "21985:8:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                      "typeString": "address[] storage ref"
                                                    },
                                                    {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  ],
                                                  "id": 1979,
                                                  "name": "listContains",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 2310,
                                                  "src": "21950:12:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$_t_bool_$",
                                                    "typeString": "function (address[] storage pointer,address) view returns (bool)"
                                                  }
                                                },
                                                "id": 1982,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "functionCall",
                                                "lValueRequested": false,
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "21950:45:0",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "id": 1991,
                                            "nodeType": "IfStatement",
                                            "src": "21945:130:0",
                                            "trueBody": {
                                              "id": 1990,
                                              "nodeType": "Block",
                                              "src": "21998:77:0",
                                              "statements": [
                                                {
                                                  "expression": {
                                                    "arguments": [
                                                      {
                                                        "id": 1987,
                                                        "name": "_address",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 1755,
                                                        "src": "22046:8:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_address",
                                                          "typeString": "address"
                                                        }
                                                      }
                                                    ],
                                                    "expression": {
                                                      "argumentTypes": [
                                                        {
                                                          "typeIdentifier": "t_address",
                                                          "typeString": "address"
                                                        }
                                                      ],
                                                      "expression": {
                                                        "id": 1984,
                                                        "name": "liquidityDepositors",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 735,
                                                        "src": "22020:19:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                          "typeString": "address[] storage ref"
                                                        }
                                                      },
                                                      "id": 1986,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "memberName": "push",
                                                      "nodeType": "MemberAccess",
                                                      "src": "22020:24:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                        "typeString": "function (address)"
                                                      }
                                                    },
                                                    "id": 1988,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "kind": "functionCall",
                                                    "lValueRequested": false,
                                                    "names": [],
                                                    "nodeType": "FunctionCall",
                                                    "src": "22020:36:0",
                                                    "tryCall": false,
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_tuple$__$",
                                                      "typeString": "tuple()"
                                                    }
                                                  },
                                                  "id": 1989,
                                                  "nodeType": "ExpressionStatement",
                                                  "src": "22020:36:0"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "expression": {
                                        "id": 1999,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftHandSide": {
                                          "id": 1994,
                                          "name": "result",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1774,
                                          "src": "22102:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "nodeType": "Assignment",
                                        "operator": "=",
                                        "rightHandSide": {
                                          "id": 1998,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "UnaryOperation",
                                          "operator": "!",
                                          "prefix": true,
                                          "src": "22111:33:0",
                                          "subExpression": {
                                            "baseExpression": {
                                              "id": 1995,
                                              "name": "isLiquidityDepositor",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 739,
                                              "src": "22112:20:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                                "typeString": "mapping(address => bool)"
                                              }
                                            },
                                            "id": 1997,
                                            "indexExpression": {
                                              "id": 1996,
                                              "name": "_address",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1755,
                                              "src": "22134:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "22112:32:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "src": "22102:42:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "id": 2000,
                                      "nodeType": "ExpressionStatement",
                                      "src": "22102:42:0"
                                    },
                                    {
                                      "expression": {
                                        "id": 2005,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftHandSide": {
                                          "baseExpression": {
                                            "id": 2001,
                                            "name": "isLiquidityDepositor",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 739,
                                            "src": "22158:20:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                              "typeString": "mapping(address => bool)"
                                            }
                                          },
                                          "id": 2003,
                                          "indexExpression": {
                                            "id": 2002,
                                            "name": "_address",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1755,
                                            "src": "22180:8:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": true,
                                          "nodeType": "IndexAccess",
                                          "src": "22158:32:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "nodeType": "Assignment",
                                        "operator": "=",
                                        "rightHandSide": {
                                          "id": 2004,
                                          "name": "result",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1774,
                                          "src": "22193:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "src": "22158:41:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "id": 2006,
                                      "nodeType": "ExpressionStatement",
                                      "src": "22158:41:0"
                                    }
                                  ]
                                }
                              },
                              "id": 2215,
                              "nodeType": "IfStatement",
                              "src": "21159:3052:0",
                              "trueBody": {
                                "id": 1957,
                                "nodeType": "Block",
                                "src": "21203:461:0",
                                "statements": [
                                  {
                                    "condition": {
                                      "arguments": [
                                        {
                                          "id": 1913,
                                          "name": "ReserveManagerQueue",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 758,
                                          "src": "21241:19:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                            "typeString": "mapping(address => uint256)"
                                          }
                                        },
                                        {
                                          "id": 1914,
                                          "name": "isReserveManager",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 754,
                                          "src": "21262:16:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                            "typeString": "mapping(address => bool)"
                                          }
                                        },
                                        {
                                          "id": 1915,
                                          "name": "_address",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1755,
                                          "src": "21280:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                            "typeString": "mapping(address => uint256)"
                                          },
                                          {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                            "typeString": "mapping(address => bool)"
                                          },
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "id": 1912,
                                        "name": "requirements",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2274,
                                        "src": "21227:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_view$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_bool_$_$_t_address_$returns$_t_bool_$",
                                          "typeString": "function (mapping(address => uint256),mapping(address => bool),address) view returns (bool)"
                                        }
                                      },
                                      "id": 1916,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "21227:63:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 1943,
                                    "nodeType": "IfStatement",
                                    "src": "21222:328:0",
                                    "trueBody": {
                                      "id": 1942,
                                      "nodeType": "Block",
                                      "src": "21293:257:0",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "id": 1920,
                                                "name": "_address",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1755,
                                                "src": "21333:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              ],
                                              "expression": {
                                                "id": 1917,
                                                "name": "reserveManagers",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 750,
                                                "src": "21311:15:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                  "typeString": "address[] storage ref"
                                                }
                                              },
                                              "id": 1919,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "push",
                                              "nodeType": "MemberAccess",
                                              "src": "21311:20:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                "typeString": "function (address)"
                                              }
                                            },
                                            "id": 1921,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "21311:32:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 1922,
                                          "nodeType": "ExpressionStatement",
                                          "src": "21311:32:0"
                                        },
                                        {
                                          "expression": {
                                            "id": 1927,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "baseExpression": {
                                                "id": 1923,
                                                "name": "ReserveManagerQueue",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 758,
                                                "src": "21361:19:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                  "typeString": "mapping(address => uint256)"
                                                }
                                              },
                                              "id": 1925,
                                              "indexExpression": {
                                                "id": 1924,
                                                "name": "_address",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1755,
                                                "src": "21382:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": true,
                                              "nodeType": "IndexAccess",
                                              "src": "21361:31:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "hexValue": "30",
                                              "id": 1926,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "21395:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_0_by_1",
                                                "typeString": "int_const 0"
                                              },
                                              "value": "0"
                                            },
                                            "src": "21361:35:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 1928,
                                          "nodeType": "ExpressionStatement",
                                          "src": "21361:35:0"
                                        },
                                        {
                                          "condition": {
                                            "id": 1933,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "UnaryOperation",
                                            "operator": "!",
                                            "prefix": true,
                                            "src": "21418:42:0",
                                            "subExpression": {
                                              "arguments": [
                                                {
                                                  "id": 1930,
                                                  "name": "reserveManagers",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 750,
                                                  "src": "21433:15:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                    "typeString": "address[] storage ref"
                                                  }
                                                },
                                                {
                                                  "id": 1931,
                                                  "name": "_address",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1755,
                                                  "src": "21450:8:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                    "typeString": "address[] storage ref"
                                                  },
                                                  {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                ],
                                                "id": 1929,
                                                "name": "listContains",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2310,
                                                "src": "21419:12:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$_t_bool_$",
                                                  "typeString": "function (address[] storage pointer,address) view returns (bool)"
                                                }
                                              },
                                              "id": 1932,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "functionCall",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "21419:41:0",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "id": 1941,
                                          "nodeType": "IfStatement",
                                          "src": "21414:122:0",
                                          "trueBody": {
                                            "id": 1940,
                                            "nodeType": "Block",
                                            "src": "21463:73:0",
                                            "statements": [
                                              {
                                                "expression": {
                                                  "arguments": [
                                                    {
                                                      "id": 1937,
                                                      "name": "_address",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1755,
                                                      "src": "21507:8:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      }
                                                    ],
                                                    "expression": {
                                                      "id": 1934,
                                                      "name": "reserveManagers",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 750,
                                                      "src": "21485:15:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                        "typeString": "address[] storage ref"
                                                      }
                                                    },
                                                    "id": 1936,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "push",
                                                    "nodeType": "MemberAccess",
                                                    "src": "21485:20:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                      "typeString": "function (address)"
                                                    }
                                                  },
                                                  "id": 1938,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "21485:32:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_tuple$__$",
                                                    "typeString": "tuple()"
                                                  }
                                                },
                                                "id": 1939,
                                                "nodeType": "ExpressionStatement",
                                                "src": "21485:32:0"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 1949,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 1944,
                                        "name": "result",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1774,
                                        "src": "21563:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "id": 1948,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "UnaryOperation",
                                        "operator": "!",
                                        "prefix": true,
                                        "src": "21572:29:0",
                                        "subExpression": {
                                          "baseExpression": {
                                            "id": 1945,
                                            "name": "isReserveManager",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 754,
                                            "src": "21573:16:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                              "typeString": "mapping(address => bool)"
                                            }
                                          },
                                          "id": 1947,
                                          "indexExpression": {
                                            "id": 1946,
                                            "name": "_address",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1755,
                                            "src": "21591:8:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "21573:28:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "21563:38:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 1950,
                                    "nodeType": "ExpressionStatement",
                                    "src": "21563:38:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 1955,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "baseExpression": {
                                          "id": 1951,
                                          "name": "isReserveManager",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 754,
                                          "src": "21615:16:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                            "typeString": "mapping(address => bool)"
                                          }
                                        },
                                        "id": 1953,
                                        "indexExpression": {
                                          "id": 1952,
                                          "name": "_address",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1755,
                                          "src": "21633:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "21615:28:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "id": 1954,
                                        "name": "result",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1774,
                                        "src": "21646:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "21615:37:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 1956,
                                    "nodeType": "ExpressionStatement",
                                    "src": "21615:37:0"
                                  }
                                ]
                              }
                            },
                            "id": 2216,
                            "nodeType": "IfStatement",
                            "src": "20714:3497:0",
                            "trueBody": {
                              "id": 1907,
                              "nodeType": "Block",
                              "src": "20756:397:0",
                              "statements": [
                                {
                                  "condition": {
                                    "arguments": [
                                      {
                                        "id": 1869,
                                        "name": "reserveTokenQueue",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 699,
                                        "src": "20794:17:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                          "typeString": "mapping(address => uint256)"
                                        }
                                      },
                                      {
                                        "id": 1870,
                                        "name": "isReserveToken",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 695,
                                        "src": "20813:14:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                          "typeString": "mapping(address => bool)"
                                        }
                                      },
                                      {
                                        "id": 1871,
                                        "name": "_address",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1755,
                                        "src": "20829:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                          "typeString": "mapping(address => uint256)"
                                        },
                                        {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                          "typeString": "mapping(address => bool)"
                                        },
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 1868,
                                      "name": "requirements",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2274,
                                      "src": "20780:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_bool_$_$_t_address_$returns$_t_bool_$",
                                        "typeString": "function (mapping(address => uint256),mapping(address => bool),address) view returns (bool)"
                                      }
                                    },
                                    "id": 1872,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "20780:59:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "id": 1893,
                                  "nodeType": "IfStatement",
                                  "src": "20775:268:0",
                                  "trueBody": {
                                    "id": 1892,
                                    "nodeType": "Block",
                                    "src": "20842:201:0",
                                    "statements": [
                                      {
                                        "expression": {
                                          "id": 1877,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftHandSide": {
                                            "baseExpression": {
                                              "id": 1873,
                                              "name": "reserveTokenQueue",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 699,
                                              "src": "20860:17:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                                "typeString": "mapping(address => uint256)"
                                              }
                                            },
                                            "id": 1875,
                                            "indexExpression": {
                                              "id": 1874,
                                              "name": "_address",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1755,
                                              "src": "20879:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": true,
                                            "nodeType": "IndexAccess",
                                            "src": "20860:29:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "Assignment",
                                          "operator": "=",
                                          "rightHandSide": {
                                            "hexValue": "30",
                                            "id": 1876,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "20892:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_0_by_1",
                                              "typeString": "int_const 0"
                                            },
                                            "value": "0"
                                          },
                                          "src": "20860:33:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 1878,
                                        "nodeType": "ExpressionStatement",
                                        "src": "20860:33:0"
                                      },
                                      {
                                        "condition": {
                                          "id": 1883,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "UnaryOperation",
                                          "operator": "!",
                                          "prefix": true,
                                          "src": "20915:40:0",
                                          "subExpression": {
                                            "arguments": [
                                              {
                                                "id": 1880,
                                                "name": "reserveTokens",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 691,
                                                "src": "20930:13:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                  "typeString": "address[] storage ref"
                                                }
                                              },
                                              {
                                                "id": 1881,
                                                "name": "_address",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1755,
                                                "src": "20945:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                  "typeString": "address[] storage ref"
                                                },
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              ],
                                              "id": 1879,
                                              "name": "listContains",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2310,
                                              "src": "20916:12:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$_t_bool_$",
                                                "typeString": "function (address[] storage pointer,address) view returns (bool)"
                                              }
                                            },
                                            "id": 1882,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "20916:39:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "id": 1891,
                                        "nodeType": "IfStatement",
                                        "src": "20911:118:0",
                                        "trueBody": {
                                          "id": 1890,
                                          "nodeType": "Block",
                                          "src": "20958:71:0",
                                          "statements": [
                                            {
                                              "expression": {
                                                "arguments": [
                                                  {
                                                    "id": 1887,
                                                    "name": "_address",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1755,
                                                    "src": "21000:8:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  ],
                                                  "expression": {
                                                    "id": 1884,
                                                    "name": "reserveTokens",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 691,
                                                    "src": "20980:13:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                      "typeString": "address[] storage ref"
                                                    }
                                                  },
                                                  "id": 1886,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "push",
                                                  "nodeType": "MemberAccess",
                                                  "src": "20980:18:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                    "typeString": "function (address)"
                                                  }
                                                },
                                                "id": 1888,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "functionCall",
                                                "lValueRequested": false,
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "20980:30:0",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_tuple$__$",
                                                  "typeString": "tuple()"
                                                }
                                              },
                                              "id": 1889,
                                              "nodeType": "ExpressionStatement",
                                              "src": "20980:30:0"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 1899,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 1894,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1774,
                                      "src": "21056:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "id": 1898,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "UnaryOperation",
                                      "operator": "!",
                                      "prefix": true,
                                      "src": "21065:27:0",
                                      "subExpression": {
                                        "baseExpression": {
                                          "id": 1895,
                                          "name": "isReserveToken",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 695,
                                          "src": "21066:14:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                            "typeString": "mapping(address => bool)"
                                          }
                                        },
                                        "id": 1897,
                                        "indexExpression": {
                                          "id": 1896,
                                          "name": "_address",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1755,
                                          "src": "21082:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "21066:26:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "src": "21056:36:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "id": 1900,
                                  "nodeType": "ExpressionStatement",
                                  "src": "21056:36:0"
                                },
                                {
                                  "expression": {
                                    "id": 1905,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "baseExpression": {
                                        "id": 1901,
                                        "name": "isReserveToken",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 695,
                                        "src": "21106:14:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                          "typeString": "mapping(address => bool)"
                                        }
                                      },
                                      "id": 1903,
                                      "indexExpression": {
                                        "id": 1902,
                                        "name": "_address",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1755,
                                        "src": "21122:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "nodeType": "IndexAccess",
                                      "src": "21106:26:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "id": 1904,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1774,
                                      "src": "21135:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "src": "21106:35:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "id": 1906,
                                  "nodeType": "ExpressionStatement",
                                  "src": "21106:35:0"
                                }
                              ]
                            }
                          },
                          "id": 2217,
                          "nodeType": "IfStatement",
                          "src": "20253:3958:0",
                          "trueBody": {
                            "id": 1863,
                            "nodeType": "Block",
                            "src": "20297:411:0",
                            "statements": [
                              {
                                "condition": {
                                  "arguments": [
                                    {
                                      "id": 1825,
                                      "name": "reserveSpenderQueue",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 721,
                                      "src": "20335:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                        "typeString": "mapping(address => uint256)"
                                      }
                                    },
                                    {
                                      "id": 1826,
                                      "name": "isReserveSpender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 717,
                                      "src": "20356:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                        "typeString": "mapping(address => bool)"
                                      }
                                    },
                                    {
                                      "id": 1827,
                                      "name": "_address",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1755,
                                      "src": "20374:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                        "typeString": "mapping(address => uint256)"
                                      },
                                      {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                        "typeString": "mapping(address => bool)"
                                      },
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 1824,
                                    "name": "requirements",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2274,
                                    "src": "20321:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_bool_$_$_t_address_$returns$_t_bool_$",
                                      "typeString": "function (mapping(address => uint256),mapping(address => bool),address) view returns (bool)"
                                    }
                                  },
                                  "id": 1828,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "20321:63:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 1849,
                                "nodeType": "IfStatement",
                                "src": "20316:278:0",
                                "trueBody": {
                                  "id": 1848,
                                  "nodeType": "Block",
                                  "src": "20387:207:0",
                                  "statements": [
                                    {
                                      "expression": {
                                        "id": 1833,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftHandSide": {
                                          "baseExpression": {
                                            "id": 1829,
                                            "name": "reserveSpenderQueue",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 721,
                                            "src": "20405:19:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                              "typeString": "mapping(address => uint256)"
                                            }
                                          },
                                          "id": 1831,
                                          "indexExpression": {
                                            "id": 1830,
                                            "name": "_address",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1755,
                                            "src": "20426:8:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": true,
                                          "nodeType": "IndexAccess",
                                          "src": "20405:31:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "Assignment",
                                        "operator": "=",
                                        "rightHandSide": {
                                          "hexValue": "30",
                                          "id": 1832,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "20439:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_0_by_1",
                                            "typeString": "int_const 0"
                                          },
                                          "value": "0"
                                        },
                                        "src": "20405:35:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 1834,
                                      "nodeType": "ExpressionStatement",
                                      "src": "20405:35:0"
                                    },
                                    {
                                      "condition": {
                                        "id": 1839,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "UnaryOperation",
                                        "operator": "!",
                                        "prefix": true,
                                        "src": "20462:42:0",
                                        "subExpression": {
                                          "arguments": [
                                            {
                                              "id": 1836,
                                              "name": "reserveSpenders",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 713,
                                              "src": "20477:15:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                "typeString": "address[] storage ref"
                                              }
                                            },
                                            {
                                              "id": 1837,
                                              "name": "_address",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1755,
                                              "src": "20494:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                "typeString": "address[] storage ref"
                                              },
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            ],
                                            "id": 1835,
                                            "name": "listContains",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2310,
                                            "src": "20463:12:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$_t_bool_$",
                                              "typeString": "function (address[] storage pointer,address) view returns (bool)"
                                            }
                                          },
                                          "id": 1838,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "20463:41:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "id": 1847,
                                      "nodeType": "IfStatement",
                                      "src": "20458:122:0",
                                      "trueBody": {
                                        "id": 1846,
                                        "nodeType": "Block",
                                        "src": "20507:73:0",
                                        "statements": [
                                          {
                                            "expression": {
                                              "arguments": [
                                                {
                                                  "id": 1843,
                                                  "name": "_address",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1755,
                                                  "src": "20551:8:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                ],
                                                "expression": {
                                                  "id": 1840,
                                                  "name": "reserveSpenders",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 713,
                                                  "src": "20529:15:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                    "typeString": "address[] storage ref"
                                                  }
                                                },
                                                "id": 1842,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "push",
                                                "nodeType": "MemberAccess",
                                                "src": "20529:20:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                  "typeString": "function (address)"
                                                }
                                              },
                                              "id": 1844,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "functionCall",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "20529:32:0",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_tuple$__$",
                                                "typeString": "tuple()"
                                              }
                                            },
                                            "id": 1845,
                                            "nodeType": "ExpressionStatement",
                                            "src": "20529:32:0"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "expression": {
                                  "id": 1855,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "id": 1850,
                                    "name": "result",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1774,
                                    "src": "20607:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "id": 1854,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "!",
                                    "prefix": true,
                                    "src": "20616:29:0",
                                    "subExpression": {
                                      "baseExpression": {
                                        "id": 1851,
                                        "name": "isReserveSpender",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 717,
                                        "src": "20617:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                          "typeString": "mapping(address => bool)"
                                        }
                                      },
                                      "id": 1853,
                                      "indexExpression": {
                                        "id": 1852,
                                        "name": "_address",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1755,
                                        "src": "20635:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "20617:28:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "20607:38:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 1856,
                                "nodeType": "ExpressionStatement",
                                "src": "20607:38:0"
                              },
                              {
                                "expression": {
                                  "id": 1861,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "baseExpression": {
                                      "id": 1857,
                                      "name": "isReserveSpender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 717,
                                      "src": "20659:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                        "typeString": "mapping(address => bool)"
                                      }
                                    },
                                    "id": 1859,
                                    "indexExpression": {
                                      "id": 1858,
                                      "name": "_address",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1755,
                                      "src": "20677:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": true,
                                    "nodeType": "IndexAccess",
                                    "src": "20659:28:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "id": 1860,
                                    "name": "result",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1774,
                                    "src": "20690:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "20659:37:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 1862,
                                "nodeType": "ExpressionStatement",
                                "src": "20659:37:0"
                              }
                            ]
                          }
                        },
                        "id": 2218,
                        "nodeType": "IfStatement",
                        "src": "19764:4447:0",
                        "trueBody": {
                          "id": 1819,
                          "nodeType": "Block",
                          "src": "19810:437:0",
                          "statements": [
                            {
                              "condition": {
                                "arguments": [
                                  {
                                    "id": 1781,
                                    "name": "reserveDepositorQueue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 710,
                                    "src": "19848:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  {
                                    "id": 1782,
                                    "name": "isReserveDepositor",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 706,
                                    "src": "19871:18:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                      "typeString": "mapping(address => bool)"
                                    }
                                  },
                                  {
                                    "id": 1783,
                                    "name": "_address",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1755,
                                    "src": "19891:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    },
                                    {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                      "typeString": "mapping(address => bool)"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 1780,
                                  "name": "requirements",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2274,
                                  "src": "19834:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_bool_$_$_t_address_$returns$_t_bool_$",
                                    "typeString": "function (mapping(address => uint256),mapping(address => bool),address) view returns (bool)"
                                  }
                                },
                                "id": 1784,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "19834:67:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1805,
                              "nodeType": "IfStatement",
                              "src": "19829:288:0",
                              "trueBody": {
                                "id": 1804,
                                "nodeType": "Block",
                                "src": "19904:213:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 1789,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "baseExpression": {
                                          "id": 1785,
                                          "name": "reserveDepositorQueue",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 710,
                                          "src": "19922:21:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                            "typeString": "mapping(address => uint256)"
                                          }
                                        },
                                        "id": 1787,
                                        "indexExpression": {
                                          "id": 1786,
                                          "name": "_address",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1755,
                                          "src": "19945:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "19922:33:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "hexValue": "30",
                                        "id": 1788,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "19958:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "19922:37:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1790,
                                    "nodeType": "ExpressionStatement",
                                    "src": "19922:37:0"
                                  },
                                  {
                                    "condition": {
                                      "id": 1795,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "UnaryOperation",
                                      "operator": "!",
                                      "prefix": true,
                                      "src": "19981:44:0",
                                      "subExpression": {
                                        "arguments": [
                                          {
                                            "id": 1792,
                                            "name": "reserveDepositors",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 702,
                                            "src": "19996:17:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                              "typeString": "address[] storage ref"
                                            }
                                          },
                                          {
                                            "id": 1793,
                                            "name": "_address",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1755,
                                            "src": "20015:8:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                              "typeString": "address[] storage ref"
                                            },
                                            {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          ],
                                          "id": 1791,
                                          "name": "listContains",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2310,
                                          "src": "19982:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$_t_bool_$",
                                            "typeString": "function (address[] storage pointer,address) view returns (bool)"
                                          }
                                        },
                                        "id": 1794,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "19982:43:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 1803,
                                    "nodeType": "IfStatement",
                                    "src": "19977:126:0",
                                    "trueBody": {
                                      "id": 1802,
                                      "nodeType": "Block",
                                      "src": "20028:75:0",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "id": 1799,
                                                "name": "_address",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1755,
                                                "src": "20074:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              ],
                                              "expression": {
                                                "id": 1796,
                                                "name": "reserveDepositors",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 702,
                                                "src": "20050:17:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                  "typeString": "address[] storage ref"
                                                }
                                              },
                                              "id": 1798,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "push",
                                              "nodeType": "MemberAccess",
                                              "src": "20050:22:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                "typeString": "function (address)"
                                              }
                                            },
                                            "id": 1800,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "20050:34:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 1801,
                                          "nodeType": "ExpressionStatement",
                                          "src": "20050:34:0"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "id": 1811,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1806,
                                  "name": "result",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1774,
                                  "src": "20130:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 1810,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "UnaryOperation",
                                  "operator": "!",
                                  "prefix": true,
                                  "src": "20139:31:0",
                                  "subExpression": {
                                    "baseExpression": {
                                      "id": 1807,
                                      "name": "isReserveDepositor",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 706,
                                      "src": "20140:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                        "typeString": "mapping(address => bool)"
                                      }
                                    },
                                    "id": 1809,
                                    "indexExpression": {
                                      "id": 1808,
                                      "name": "_address",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1755,
                                      "src": "20160:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "20140:30:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "20130:40:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1812,
                              "nodeType": "ExpressionStatement",
                              "src": "20130:40:0"
                            },
                            {
                              "expression": {
                                "id": 1817,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1813,
                                    "name": "isReserveDepositor",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 706,
                                    "src": "20184:18:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                      "typeString": "mapping(address => bool)"
                                    }
                                  },
                                  "id": 1815,
                                  "indexExpression": {
                                    "id": 1814,
                                    "name": "_address",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1755,
                                    "src": "20204:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "20184:30:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 1816,
                                  "name": "result",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1774,
                                  "src": "20217:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "20184:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1818,
                              "nodeType": "ExpressionStatement",
                              "src": "20184:39:0"
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 2220,
                              "name": "_managing",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1753,
                              "src": "24244:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                "typeString": "enum ApeTreasury.MANAGING"
                              }
                            },
                            {
                              "id": 2221,
                              "name": "_address",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1755,
                              "src": "24255:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2222,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1774,
                              "src": "24265:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_enum$_MANAGING_$684",
                                "typeString": "enum ApeTreasury.MANAGING"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 2219,
                            "name": "ChangeActivated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 673,
                            "src": "24227:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_enum$_MANAGING_$684_$_t_address_$_t_bool_$returns$__$",
                              "typeString": "function (enum ApeTreasury.MANAGING,address,bool)"
                            }
                          },
                          "id": 2223,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "24227:46:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2224,
                        "nodeType": "EmitStatement",
                        "src": "24222:51:0"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 2225,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "24290:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 1763,
                        "id": 2226,
                        "nodeType": "Return",
                        "src": "24283:11:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1751,
                    "nodeType": "StructuredDocumentation",
                    "src": "19378:190:0",
                    "text": "@notice verify queue then set boolean in mapping\n@param _managing MANAGING\n@param _address address\n@param _calculator address\n@return bool"
                  },
                  "functionSelector": "fbfd393b",
                  "id": 2228,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [],
                      "id": 1760,
                      "modifierName": {
                        "id": 1759,
                        "name": "onlyManager",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 336,
                        "src": "19659:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "19659:13:0"
                    }
                  ],
                  "name": "toggle",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1758,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1753,
                        "mutability": "mutable",
                        "name": "_managing",
                        "nodeType": "VariableDeclaration",
                        "scope": 2228,
                        "src": "19590:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_MANAGING_$684",
                          "typeString": "enum ApeTreasury.MANAGING"
                        },
                        "typeName": {
                          "id": 1752,
                          "name": "MANAGING",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 684,
                          "src": "19590:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_MANAGING_$684",
                            "typeString": "enum ApeTreasury.MANAGING"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1755,
                        "mutability": "mutable",
                        "name": "_address",
                        "nodeType": "VariableDeclaration",
                        "scope": 2228,
                        "src": "19610:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1754,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "19610:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1757,
                        "mutability": "mutable",
                        "name": "_calculator",
                        "nodeType": "VariableDeclaration",
                        "scope": 2228,
                        "src": "19628:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1756,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "19628:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "19588:61:0"
                  },
                  "returnParameters": {
                    "id": 1763,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1762,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2228,
                        "src": "19683:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1761,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "19683:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "19681:8:0"
                  },
                  "scope": 2311,
                  "src": "19573:4728:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2273,
                    "nodeType": "Block",
                    "src": "24732:236:0",
                    "statements": [
                      {
                        "condition": {
                          "id": 2247,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "24747:20:0",
                          "subExpression": {
                            "baseExpression": {
                              "id": 2244,
                              "name": "status_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2237,
                              "src": "24748:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 2246,
                            "indexExpression": {
                              "id": 2245,
                              "name": "_address",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2239,
                              "src": "24757:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "24748:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2270,
                        "nodeType": "IfStatement",
                        "src": "24742:206:0",
                        "trueBody": {
                          "id": 2269,
                          "nodeType": "Block",
                          "src": "24770:178:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2253,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "baseExpression": {
                                        "id": 2249,
                                        "name": "queue_",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2233,
                                        "src": "24793:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                          "typeString": "mapping(address => uint256)"
                                        }
                                      },
                                      "id": 2251,
                                      "indexExpression": {
                                        "id": 2250,
                                        "name": "_address",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2239,
                                        "src": "24801:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "24793:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "!=",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 2252,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "24815:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "24793:23:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "4d757374207175657565",
                                    "id": 2254,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "24818:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_aba60747e6633e488f9f393b8420ade3a0b44f9def8d4a3769b0b8220bd2a250",
                                      "typeString": "literal_string \"Must queue\""
                                    },
                                    "value": "Must queue"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_aba60747e6633e488f9f393b8420ade3a0b44f9def8d4a3769b0b8220bd2a250",
                                      "typeString": "literal_string \"Must queue\""
                                    }
                                  ],
                                  "id": 2248,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "24784:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 2255,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "24784:48:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2256,
                              "nodeType": "ExpressionStatement",
                              "src": "24784:48:0"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2263,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "baseExpression": {
                                        "id": 2258,
                                        "name": "queue_",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2233,
                                        "src": "24855:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                          "typeString": "mapping(address => uint256)"
                                        }
                                      },
                                      "id": 2260,
                                      "indexExpression": {
                                        "id": 2259,
                                        "name": "_address",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2239,
                                        "src": "24863:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "24855:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<=",
                                    "rightExpression": {
                                      "expression": {
                                        "id": 2261,
                                        "name": "block",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -4,
                                        "src": "24877:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_block",
                                          "typeString": "block"
                                        }
                                      },
                                      "id": 2262,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "number",
                                      "nodeType": "MemberAccess",
                                      "src": "24877:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "24855:34:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "5175657565206e6f742065787069726564",
                                    "id": 2264,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "24891:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_20f81a12537dab2de6f63614f9df91e785d8b2db704bbdcc64e781adf7c0e2ff",
                                      "typeString": "literal_string \"Queue not expired\""
                                    },
                                    "value": "Queue not expired"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_20f81a12537dab2de6f63614f9df91e785d8b2db704bbdcc64e781adf7c0e2ff",
                                      "typeString": "literal_string \"Queue not expired\""
                                    }
                                  ],
                                  "id": 2257,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "24846:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 2265,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "24846:66:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2266,
                              "nodeType": "ExpressionStatement",
                              "src": "24846:66:0"
                            },
                            {
                              "expression": {
                                "hexValue": "74727565",
                                "id": 2267,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "24933:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              "functionReturnParameters": 2243,
                              "id": 2268,
                              "nodeType": "Return",
                              "src": "24926:11:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "hexValue": "66616c7365",
                          "id": 2271,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "24956:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 2243,
                        "id": 2272,
                        "nodeType": "Return",
                        "src": "24949:12:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2229,
                    "nodeType": "StructuredDocumentation",
                    "src": "24307:228:0",
                    "text": "@notice checks requirements and returns altered structs\n@param queue_ mapping( address => uint )\n@param status_ mapping( address => bool )\n@param _address address\n@return bool "
                  },
                  "id": 2274,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "requirements",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2240,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2233,
                        "mutability": "mutable",
                        "name": "queue_",
                        "nodeType": "VariableDeclaration",
                        "scope": 2274,
                        "src": "24572:41:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        },
                        "typeName": {
                          "id": 2232,
                          "keyType": {
                            "id": 2230,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "24581:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Mapping",
                          "src": "24572:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          },
                          "valueType": {
                            "id": 2231,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "24592:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2237,
                        "mutability": "mutable",
                        "name": "status_",
                        "nodeType": "VariableDeclaration",
                        "scope": 2274,
                        "src": "24624:42:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        },
                        "typeName": {
                          "id": 2236,
                          "keyType": {
                            "id": 2234,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "24633:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Mapping",
                          "src": "24624:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          },
                          "valueType": {
                            "id": 2235,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "24644:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2239,
                        "mutability": "mutable",
                        "name": "_address",
                        "nodeType": "VariableDeclaration",
                        "scope": 2274,
                        "src": "24677:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2238,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "24677:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "24561:139:0"
                  },
                  "returnParameters": {
                    "id": 2243,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2242,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2274,
                        "src": "24725:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2241,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "24725:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "24723:8:0"
                  },
                  "scope": 2311,
                  "src": "24540:428:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2309,
                    "nodeType": "Block",
                    "src": "25225:174:0",
                    "statements": [
                      {
                        "body": {
                          "id": 2305,
                          "nodeType": "Block",
                          "src": "25276:95:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 2300,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "baseExpression": {
                                    "id": 2296,
                                    "name": "_list",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2278,
                                    "src": "25294:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                                      "typeString": "address[] storage pointer"
                                    }
                                  },
                                  "id": 2298,
                                  "indexExpression": {
                                    "id": 2297,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2286,
                                    "src": "25301:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "25294:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "id": 2299,
                                  "name": "_token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2280,
                                  "src": "25308:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "25294:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 2304,
                              "nodeType": "IfStatement",
                              "src": "25290:71:0",
                              "trueBody": {
                                "id": 2303,
                                "nodeType": "Block",
                                "src": "25317:44:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "hexValue": "74727565",
                                      "id": 2301,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "bool",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "25342:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "value": "true"
                                    },
                                    "functionReturnParameters": 2284,
                                    "id": 2302,
                                    "nodeType": "Return",
                                    "src": "25335:11:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2292,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2289,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2286,
                            "src": "25252:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 2290,
                              "name": "_list",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2278,
                              "src": "25256:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                                "typeString": "address[] storage pointer"
                              }
                            },
                            "id": 2291,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "25256:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "25252:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2306,
                        "initializationExpression": {
                          "assignments": [
                            2286
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 2286,
                              "mutability": "mutable",
                              "name": "i",
                              "nodeType": "VariableDeclaration",
                              "scope": 2306,
                              "src": "25240:6:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 2285,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "25240:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 2288,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 2287,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "25249:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "25240:10:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 2294,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "25270:3:0",
                            "subExpression": {
                              "id": 2293,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2286,
                              "src": "25270:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2295,
                          "nodeType": "ExpressionStatement",
                          "src": "25270:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "25235:136:0"
                      },
                      {
                        "expression": {
                          "hexValue": "66616c7365",
                          "id": 2307,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "25387:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 2284,
                        "id": 2308,
                        "nodeType": "Return",
                        "src": "25380:12:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2275,
                    "nodeType": "StructuredDocumentation",
                    "src": "24974:150:0",
                    "text": "@notice checks array to ensure against duplicate\n@param _list address[]\n@param _token address\n@return bool"
                  },
                  "id": 2310,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "listContains",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2281,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2278,
                        "mutability": "mutable",
                        "name": "_list",
                        "nodeType": "VariableDeclaration",
                        "scope": 2310,
                        "src": "25152:23:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 2276,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "25152:7:0",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 2277,
                          "nodeType": "ArrayTypeName",
                          "src": "25152:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2280,
                        "mutability": "mutable",
                        "name": "_token",
                        "nodeType": "VariableDeclaration",
                        "scope": 2310,
                        "src": "25177:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2279,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "25177:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "25150:43:0"
                  },
                  "returnParameters": {
                    "id": 2284,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2283,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2310,
                        "src": "25218:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2282,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "25218:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "25216:8:0"
                  },
                  "scope": 2311,
                  "src": "25129:270:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 2312,
              "src": "6550:18851:0"
            }
          ],
          "src": "46:25355:0"
        },
        "id": 0
      }
    }
  }
}
